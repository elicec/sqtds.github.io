<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[蜻蜓点水]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://sqtds.github.io/"/>
  <updated>2015-08-22T11:11:43.000Z</updated>
  <id>http://sqtds.github.io/</id>
  
  <author>
    <name><![CDATA[sqtds]]></name>
    <email><![CDATA[858569159@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[列式压缩技术汇总]]></title>
    <link href="http://sqtds.github.io/2015/08/22/column-base-store/"/>
    <id>http://sqtds.github.io/2015/08/22/column-base-store/</id>
    <published>2015-08-22T06:51:05.000Z</published>
    <updated>2015-08-22T11:11:43.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一，前言">一，前言</h2><p>孔子说，温故而知新，可以为师矣。好久没探讨列式数据库了，今天在此再次总结一遍，供以后查阅。本文介绍的内容如下：<br><img src="/img/2015/列式存储.png" alt=""></p>
<h2 id="二，存储算法">二，存储算法</h2><p>对于一列值，你认为会有哪些存储方式呢？下面我们来看看常用的存储算法：</p>
<h3 id="2-1_dictionary(字典项编码)">2.1 dictionary(字典项编码)</h3><p>这个最常用的，不说了，so easy。</p>
<h3 id="2-2_bit_Vector（比特向量）">2.2 bit Vector（比特向量）</h3><p>适用于重复度比较高的。<br>比如一列 ABAABCCCAABB<br>对于字段值A,B,C分别用一个bit Vector来存储他们的位置。<br>A 101100001100<br>B 010010000011<br>C 000001110000</p>
<h3 id="2-3_RLE（Run-length_encoding，行程编码）">2.3 RLE（Run-length encoding，行程编码）</h3><p>RLE适合用于对已排序好的数据进行编码。<br>RLE由一下3部分组成：</p>
<blockquote>
<p>控制符+重复次数+被重复字符</p>
</blockquote>
<p>例如，字符串 RTAAAASDEEEEE<br>经RLE压缩后为： RT<em>4ASD</em>5E</p>
<p>在这里，”<em>4A” 代替了流”AAAA”，”</em>5E” 代替”EEEEE”。其中，控制符采用特殊字符’*’ 指出一个RLE编码的开始，后面的数字表示重复的次数，数字后的单个字符是被重复的字符。显然，重复字符数为4或大于4，RLE编码效率才高，因为一个重复至少需要3个符号来表示。</p>
<h3 id="2-4_LZ算法簇">2.4 LZ算法簇</h3><p>LZ算法簇包括LZ77，LZW，LZ78，LZSS，他们都是以LZ77算法为基础的，我们重点介绍LZ77算法。</p>
<p>我们先看个例子： the brown fox jumped over the brown foxy jumping frog<br>这个短语的长度总共是53个八位组 = 424 bit。算法从左向右处理这个文本。初始时，每个字符被映射成9 bit的编码，二进制的1跟着该字符的8 bit ASCII码。在处理进行时，算法查找重复的序列。当碰到一个重复时，算法继续扫描直到该重复序列终止。换句话说，每次出现一个重复时，算法包括尽可能多的字符。碰到的第一个这样的序列是the brown fox。这个序列被替换成指向前一个序列的指针和序列的长度。在这种情况下，前一个序列的the brown fox出现在26个字符之前，序列的长度是13个字符。对于这个例子，假定存在两种编码选项：8 bit的指针和4 bit的长度，或者12 bit的指针和6 bit的长度。使用2 bit的首部来指示选择了哪种选项，00表示第一种选项，01表示第二种选项。因此，the brown fox的第二次出现被编码为 <00b><26d><13 d="">，或者00 00011010 1101。<br>压缩报文的剩余部分是字母y；序列<00b><27d><5 d="">替换了由一个空格跟着jump组成的序列，以及字符序列ing frog。<br>下图演示了压缩映射的过程。压缩过的报文由35个9 bit字符和两个编码组成，总长度为35 x 9 + 2 x 14 = 343比特。和原来未压缩的长度为424比特的报文相比，压缩比为1.24。<br><img src="/img/2015/lz77-example短语.gif" alt=""></5></27d></00b></13></26d></00b></p>
<p>LZ77（及其变体）的压缩算法使用了两个缓存。<strong>滑动历史缓存</strong>包含了前面处理过的N个源字符，<strong>前向缓存</strong>包含了将要处理的下面L个字符。算法尝试将前向缓存开始的两个或多个字符与滑动历史缓存中的字符串相匹配。如果没有发现匹配，前向缓存的第一个字符作为9 bit的字符输出并且移入滑动窗口，滑动窗口中最久的字符被移出。如果找到匹配，算法继续扫描以找出最长的匹配。然后匹配字符串作为三元组输出（指示标记、指针和长度）。对于K个字符的字符串，滑动窗口中最久的K个字符被移出，并且被编码的K个字符被移入窗口。</p>
<p><img src="/img/2015/lz77-算法.gif" alt=""></p>
<p><img src="/img/2015/lz77-例子.gif" alt=""></p>
<h3 id="2-5_哈弗曼编码">2.5 哈弗曼编码</h3><p>哈弗曼编码为前缀编码，即一个编码不是另一个编码的前缀。<br><img src="/img/2015/哈弗曼.jpg" alt=""></p>
<h3 id="2-6_trie">2.6 trie</h3><p>Trie数据结构一般也叫prefix trees, 一般用在数据类型为string并且排序之后有明显倾斜的数据分布的列，比如URL , 家庭住址, 这些字段的前缀经过排序之后在局部区域往往都有很高的压缩比，在最近的Hbase 里面也使用了这种方式压缩rowKey 的部分，Google PowerDrill也同时使用Trie Encoding压缩由”字典表”和”字典表所在位置”所组成的文件格式及其对应的内存数据结构.</p>
<h2 id="三，数据库">三，数据库</h2><p>对于列式数据库都有哪些，他们都有哪些优缺点，下面我们将介绍一下。</p>
<h3 id="3-1_impala">3.1 impala</h3><p>impala是基于hadoop大数据的列式数据库。impala主要使用的列式存储是parquet。</p>
<p>impala的性能快的原因：</p>
<ul>
<li>Impala不需要把中间结果写入磁盘，省掉了大量的I/O开销。</li>
<li>省掉了MapReduce作业启动的开销。</li>
<li>Impala完全抛弃了MapReduce这个不太适合做SQL查询的范式，而是像Dremel一样借鉴了MPP并行数据库的思想另起炉灶，因此可做更多的查询优化，从而省掉不必要的shuffle、sort等开销。</li>
<li>用C++实现，做了很多有针对性的硬件优化，例如使用SSE指令。</li>
<li>使用了支持Data locality的I/O调度机制，尽可能地将数据和计算分配在同一台机器上进行，减少了网络开销。</li>
</ul>
<h3 id="3-2_hbase">3.2 hbase</h3><p>hbase建立的hdfs之上，提供高可靠性、高性能、列存储、可伸缩、实时读写的数据库系统。</p>
<h3 id="3-3_infobright">3.3 infobright</h3><p>infobright是基于mysql的,它也是利用了MPP分布式架构。<br>infobright相比其他的数据库最大的特点就是知识网格的特性。<br>Knowledge Grid（知识网格）包含了Data Pack Node（知识节点），每个知识节点又对应于一个Data Pack（数据块）。<br>存储层最底层就是一个个的Data Pack（数据块）。每一个Pack装着某一列的64K个元素，所有数据按照这样的形式打包存储，每一个数据块进行类型相关的压缩（即根据不同数据类型采 用不同的压缩算法），压缩比很高。<br><img src="/img/2015/infobright-arti.png" alt=""></p>
<h3 id="3-4_greenplum">3.4 greenplum</h3><p>Greenplum是一种基于postgresql的分布式数据库,它也利用了MPP分布式架构。</p>
<h3 id="3-5_dremel">3.5 dremel</h3><p>Dremel 是Google 的“交互式”数据分析系统。可以组建成规模上千的集群，处理PB级别的数据。<br>Dremel的特点：</p>
<ul>
<li>按列存储的嵌套数据格式</li>
<li>多级执行查询树</li>
</ul>
<h3 id="3-6_monetdb">3.6 monetdb</h3><p>monetdb暂时介绍的太少，没有商用。</p>
<h2 id="四，其他">四，其他</h2><p>说了这么多，那么列式数据库的高效到底在哪里？为什么列存储会比行存储更高效呢？我们看看其原理：</p>
<h3 id="4-1_原理">4.1 原理</h3><p>列式查询的原理就是延迟物化，直到最后才把值查出来。<br>假设我们用的数据字典压缩存储列。如果要查询符合条件的记录，我们可以按照以下方式：</p>
<ol>
<li>去字典表里找到字符串对应数字。</li>
<li>用数字去列表里匹配，匹配上的位置设为1。</li>
<li>把不同列的匹配结果进行位运算得到符合所有条件的记录下标。</li>
<li>使用这个下标组装出最终的结果集。<br><img src="/img/2015/column-query.png" alt=""></li>
</ol>
<h3 id="4-2_特点">4.2 特点</h3><p>列式数据库优点：</p>
<ul>
<li>极高的装载速度（最高可以等于所有硬盘IO的总和，基本是极限了）</li>
<li>适合大量的数据而不是小数据</li>
<li>实时加载数据仅限于增加（删除和更新需要解压缩Block 然后计算然后重新压缩储存）</li>
<li>高效的压缩率，不仅节省储存空间也节省计算内存和CPU。</li>
<li>非常适合做聚合操作。</li>
</ul>
<p>列式数据库缺点：</p>
<ul>
<li>不适合扫描小量数据</li>
<li>不适合随机的更新</li>
<li>批量更新情况各异，有的优化的比较好的列式数据库（比如Vertica）表现比较好，有些没有针对更新的数据库表现比较差。</li>
<li>不适合做含有删除和更新的实时操作。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一，前言">一，前言</h2><p>孔子说，温故而知新，可以为师矣。好久没探讨列式数据库了，今天在此再次总结一遍，供以后查阅。本文介绍的内容如下：<br><img src="/img/2015/列式存储.png" alt=""></p>
<h2 id="二，存储算]]>
    </summary>
    
      <category term="数据库" scheme="http://sqtds.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="数据库" scheme="http://sqtds.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tomcat8源码阅读(六)--接收请求]]></title>
    <link href="http://sqtds.github.io/2015/08/15/tomcat8-sourcecode06/"/>
    <id>http://sqtds.github.io/2015/08/15/tomcat8-sourcecode06/</id>
    <published>2015-08-15T09:30:04.000Z</published>
    <updated>2015-08-15T10:30:25.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一，回顾">一，回顾</h2><p>上篇文章讲了tomcat的Connector启动过程，启动之后，就可以接收请求了。这篇文章主要讲解tomcat如何接收请求。</p>
<h2 id="二，NioEndpoint">二，NioEndpoint</h2><h3 id="2-1_NioEndpoint#Acceptor创建链接">2.1 NioEndpoint#Acceptor创建链接</h3><p>在NioEndpoint#Acceptor的run方法中，接受socket链接，代码如下：</p>
<pre><code>NioEndpoint#Acceptor    
<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{

        <span class="keyword">int</span> errorDelay = <span class="number">0</span>;

        <span class="comment">// Loop until we receive a shutdown command</span>
        <span class="keyword">while</span> (running) {

           ...<span class="comment">//略 是否要暂停 Loop if endpoint is paused</span>

            state = AcceptorState.RUNNING;

            <span class="keyword">try</span> {
                <span class="comment">//if we have reached max connections, wait</span>
                countUpOrAwaitConnection();

                SocketChannel socket = <span class="keyword">null</span>;
                <span class="keyword">try</span> {
                    <span class="comment">// Accept the next incoming connection from the server</span>
                    <span class="comment">// socket</span>
                    socket = serverSock.accept();
                } <span class="keyword">catch</span> (IOException ioe) {
                    <span class="comment">//we didn't get a socket</span>
                    countDownConnection();
                    <span class="comment">// Introduce delay if necessary</span>
                    errorDelay = handleExceptionWithDelay(errorDelay);
                    <span class="comment">// re-throw</span>
                    <span class="keyword">throw</span> ioe;
                }
                <span class="comment">// Successful accept, reset the error delay</span>
                errorDelay = <span class="number">0</span>;

                <span class="comment">// setSocketOptions() will add channel to the poller</span>
                <span class="comment">// if successful</span>
                ...<span class="comment">//略，状态处理</span>
            } <span class="keyword">catch</span> (SocketTimeoutException sx) {
                <span class="comment">// Ignore: Normal condition</span>
            } <span class="keyword">catch</span> (IOException x) {
                <span class="keyword">if</span> (running) {
                    log.<span class="keyword">error</span>(sm.getString(<span class="string">"endpoint.accept.fail"</span>), x);
                }
            } <span class="keyword">catch</span> (Throwable t) {
                ExceptionUtils.handleThrowable(t);
                log.<span class="keyword">error</span>(sm.getString(<span class="string">"endpoint.accept.fail"</span>), t);
            }
        }
        state = AcceptorState.ENDED;
    }
</code></pre><p>核心代码在<code>socket = serverSock.accept()</code>中，当创建链路后。Selector会对此链路进行监控，然后进行数据的读写。</p>
<h3 id="2-2_NioEndpoint#Poller接受数据">2.2 NioEndpoint#Poller接受数据</h3><p>在poller的run方法中，对SelectionKey进行遍历。</p>
<pre><code>public <span class="type">void</span> run() {
    // <span class="type">Loop</span> until destroy() <span class="keyword">is</span> called
    <span class="keyword">while</span> (<span class="literal">true</span>) {

        boolean hasEvents = <span class="literal">false</span>;

        ...略// <span class="type">Time</span> to terminate?

        <span class="keyword">try</span> {
            <span class="keyword">if</span> ( !close ) {
                <span class="keyword">if</span> (wakeupCounter.getAndSet(-<span class="number">1</span>) &gt; <span class="number">0</span>) {
                    //<span class="keyword">if</span> we are here, means we have other stuff to <span class="keyword">do</span>
                    //<span class="keyword">do</span> a non blocking select
                    keyCount = selector.selectNow();
                } <span class="keyword">else</span> {
                    keyCount = selector.select(selectorTimeout);
                }
                wakeupCounter.<span class="type">set</span>(<span class="number">0</span>);
            }
            <span class="keyword">if</span> (close) {
                events();
                timeout(<span class="number">0</span>, <span class="literal">false</span>);
                <span class="keyword">try</span> {
                    selector.close();
                } catch (<span class="type">IOException</span> ioe) {
                    log.error(sm.getString(
                            <span class="string">"endpoint.nio.selectorCloseFail"</span>), ioe);
                }
                <span class="keyword">break</span>;
            }
        } catch (<span class="type">Throwable</span> x) {
            <span class="type">ExceptionUtils</span>.handleThrowable(x);
            log.error(<span class="string">""</span>,x);
            <span class="keyword">continue</span>;
        }
        //either we timed <span class="keyword">out</span> <span class="keyword">or</span> we woke up, process events first
        <span class="keyword">if</span> ( keyCount == <span class="number">0</span> ) hasEvents = (hasEvents | events());

        //遍历<span class="type">SelectionKey</span>    
        <span class="type">Iterator</span>&lt;<span class="type">SelectionKey</span>&gt; <span class="keyword">iterator</span> =
            keyCount &gt; <span class="number">0</span> ? selector.selectedKeys().<span class="keyword">iterator</span>() : null;
        // <span class="type">Walk</span> through the collection <span class="keyword">of</span> ready keys <span class="keyword">and</span> dispatch
        // <span class="type">any</span> active event.
        <span class="keyword">while</span> (<span class="keyword">iterator</span> != null &amp;&amp; <span class="keyword">iterator</span>.hasNext()) {
            <span class="type">SelectionKey</span> sk = <span class="keyword">iterator</span>.next();
            <span class="type">NioSocketWrapper</span> attachment = (<span class="type">NioSocketWrapper</span>)sk.attachment();
            // <span class="type">Attachment</span> may be null <span class="keyword">if</span> another thread has called
            // cancelledKey()
            <span class="keyword">if</span> (attachment == null) {
                <span class="keyword">iterator</span>.remove();
            } <span class="keyword">else</span> {
                <span class="keyword">iterator</span>.remove();
                //处理<span class="type">SelectionKey</span>
                processKey(sk, attachment);
            }
        }//<span class="keyword">while</span>

        //process timeouts
        timeout(keyCount,hasEvents);
    }//<span class="keyword">while</span>

    stopLatch.countDown();
}
</code></pre><p>在run方法中，有一句<code>processKey(sk, attachment)</code>，对SelectionKey进行处理，我们看其具体实现逻辑:</p>
<pre><code> <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">processKey</span><span class="params">(SelectionKey sk, NioSocketWrapper attachment)</span> </span>{
    <span class="keyword">try</span> {
        <span class="keyword">if</span> ( close ) {
            cancelledKey(sk);
        } <span class="keyword">else</span> <span class="keyword">if</span> ( sk.isValid() &amp;&amp; attachment != <span class="keyword">null</span> ) {
            <span class="keyword">if</span> (sk.isReadable() || sk.isWritable() ) {
                <span class="keyword">if</span> ( attachment.getSendfileData() != <span class="keyword">null</span> ) {
                    <span class="comment">//处理文件发送</span>
                    processSendfile(sk,attachment, <span class="keyword">false</span>);
                } <span class="keyword">else</span> {
                    <span class="keyword">if</span> ( isWorkerAvailable() ) {
                        unreg(sk, attachment, sk.readyOps());
                        <span class="keyword">boolean</span> closeSocket = <span class="keyword">false</span>;
                        <span class="comment">// Read goes before write</span>
                        <span class="keyword">if</span> (sk.isReadable()) {
                            <span class="comment">//读操作</span>
                            <span class="keyword">if</span> (!processSocket(attachment, SocketStatus.OPEN_READ, <span class="keyword">true</span>)) {
                                closeSocket = <span class="keyword">true</span>;
                            }
                        }
                        <span class="keyword">if</span> (!closeSocket &amp;&amp; sk.isWritable()) {
                            <span class="comment">//写操作                    </span>
                            <span class="keyword">if</span> (!processSocket(attachment, SocketStatus.OPEN_WRITE, <span class="keyword">true</span>)) {
                                closeSocket = <span class="keyword">true</span>;
                            }
                        }
                        <span class="keyword">if</span> (closeSocket) {
                            cancelledKey(sk);
                        }
                    }
                }
            }
        } <span class="keyword">else</span> {
            <span class="comment">//invalid key</span>
            cancelledKey(sk);
        }
    } <span class="keyword">catch</span> ( CancelledKeyException ckx ) {
        cancelledKey(sk);
    } <span class="keyword">catch</span> (Throwable t) {
        ExceptionUtils.handleThrowable(t);
        log.<span class="keyword">error</span>(<span class="string">""</span>,t);
    }
}
</code></pre><p>processKey对文件进行了隔离操作，然后使用processSocket方法进行读写操作。</p>
<pre><code><span class="keyword">protected</span> <span class="function"><span class="keyword">boolean</span> <span class="title">processSocket</span><span class="params">(NioSocketWrapper attachment, SocketStatus status, <span class="keyword">boolean</span> dispatch)</span> </span>{
    <span class="keyword">try</span> {
        <span class="keyword">if</span> (attachment == <span class="keyword">null</span>) {
            <span class="keyword">return</span> <span class="keyword">false</span>;
        }
        SocketProcessor sc = processorCache.pop();
        <span class="keyword">if</span> ( sc == <span class="keyword">null</span> ) sc = <span class="keyword">new</span> SocketProcessor(attachment, status);
        <span class="function"><span class="keyword">else</span> sc.<span class="title">reset</span><span class="params">(attachment, status)</span></span>;
        Executor executor = getExecutor();
        <span class="keyword">if</span> (dispatch &amp;&amp; executor != <span class="keyword">null</span>) {
            executor.execute(sc);
        } <span class="keyword">else</span> {
            sc.run();
        }
    } <span class="keyword">catch</span> (RejectedExecutionException ree) {
        <span class="keyword">return</span> <span class="keyword">false</span>;
    } <span class="keyword">catch</span> (Throwable t) {
        <span class="keyword">return</span> <span class="keyword">false</span>;
    }
    <span class="keyword">return</span> <span class="keyword">true</span>;
}
</code></pre><p>processSocket创建了一个SocketProcessor，然后提交到线程池中进行处理。我们看SocketProcessor的run方法。</p>
<pre><code><span class="keyword">public</span> <span class="keyword">void</span> run() {
    NioChannel socket = ka.getSocket();
    <span class="keyword">if</span> (socket == <span class="keyword">null</span>) {
        <span class="keyword">return</span>;
    }
    SelectionKey <span class="variable">key</span> = socket.getIOChannel().keyFor(
            socket.getPoller().getSelector());

    <span class="keyword">synchronized</span> (socket) {
        <span class="keyword">try</span> {
            <span class="built_in">int</span> handshake = -<span class="number">1</span>;

            <span class="keyword">try</span> {
                ...<span class="comment">//略，握手处理</span>
            <span class="keyword">if</span> (handshake == <span class="number">0</span>) {
                SocketState state = SocketState.OPEN;
                <span class="comment">// Process the request from this socket</span>
                <span class="keyword">if</span> (status == <span class="keyword">null</span>) {
                    state = handler.process(ka, SocketStatus.OPEN_READ);
                } <span class="keyword">else</span> {
                    state = handler.process(ka, status);
                }
                <span class="keyword">if</span> (state == SocketState.CLOSED) {
                    close(socket, <span class="variable">key</span>);
                }
            } <span class="keyword">else</span> <span class="keyword">if</span> (handshake == -<span class="number">1</span> ) {
                close(socket, <span class="variable">key</span>);
            } <span class="keyword">else</span> {
                ka.getPoller().<span class="built_in">add</span>(socket,handshake);
            }
        } <span class="keyword">catch</span> (CancelledKeyException cx) {
            socket.getPoller().cancelledKey(<span class="variable">key</span>);
        } <span class="keyword">catch</span> (VirtualMachineError vme) {
            ExceptionUtils.handleThrowable(vme);
        } <span class="keyword">catch</span> (Throwable t) {
            <span class="built_in">log</span>.error(<span class="string">""</span>, t);
            socket.getPoller().cancelledKey(<span class="variable">key</span>);
        } <span class="keyword">finally</span> {
            ka = <span class="keyword">null</span>;
            status = <span class="keyword">null</span>;
            <span class="comment">//return to cache</span>
            <span class="keyword">if</span> (running &amp;&amp; !paused) {
                processorCache.push(<span class="keyword">this</span>);
            }
        }
    }
}
</code></pre><p>run方法对握手进行了处理，然后开始处理数据。在handler的procee实现了具体的处理方式：</p>
<pre><code>public SocketState process(SocketWrapperBase<span class="variable">&lt;S&gt;</span> wrapper,
        SocketStatus status) {
    ...//略，对状态的一些判断

    Processor processor = connections.get(socket);
    if (status == SocketStatus.DISCONNECT &amp;&amp; processor == null) {
        // Nothing <span class="keyword">to</span> do. Endpoint requested a close and there is no
        // longer a processor associated with this socket.
        return SocketState.CLOSED;
    }

    wrapper.<span class="built_in">set</span>Async(false);
    ContainerThreadMarker.<span class="built_in">set</span>();

    try {
        ...//对process的判断
        processor.<span class="built_in">set</span>SslSupport(
                wrapper.getSslSupport(getProtocol().getClientCertProvider()));

        SocketState <span class="keyword">state</span> = SocketState.CLOSED;
        Iterator<span class="variable">&lt;DispatchType&gt;</span> dispatches = null;
        do {
            if (status == SocketStatus.CLOSE_NOW) {
                ...//略，很多状态
            } else {
                <span class="keyword">state</span> = processor.process(wrapper);
            }

            if (<span class="keyword">state</span> != SocketState.CLOSED &amp;&amp; processor.isAsync()) {
                <span class="keyword">state</span> = processor.asyncPostProcess();
            }

            ...//略，协议更新处理
            if (dispatches == null || !dispatches.hasNext()) {
                // Only returns non-null iterator if there are
                // dispatches <span class="keyword">to</span> process.
                dispatches = wrapper.getIteratorAndClearDispatches();
            }
        } while (<span class="keyword">state</span> == SocketState.ASYNC_END ||
                <span class="keyword">state</span> == SocketState.UPGRADING ||
                dispatches != null &amp;&amp; <span class="keyword">state</span> != SocketState.CLOSED);

        ...//略，状态判断
        return <span class="keyword">state</span>;
    } catch(java.net.SocketException e) {
       ...//略，异常
    }
    finally {
        ContainerThreadMarker.clear();
    }

    // Make sure socket/processor is removed <span class="keyword">from</span> the list of current
    // connections
    connections.remove(socket);
    // D<span class="keyword">on</span>'t try <span class="keyword">to</span> add upgrade processors back into the pool
    if (processor !=null &amp;&amp; !processor.isUpgrade()) {
        release(wrapper, processor, false);
    }
    return SocketState.CLOSED;
}
</code></pre><p>在这个方法中，我们只看最重要的 <code>processor.process(wrapper);</code>对于http协议，processor是Http11Processor，下面将详细讲解。</p>
<h2 id="三，Http11Processor">三，Http11Processor</h2><p>下面我们看看Process是如何对NioSocketWrapper进行处理的。我们看process方法，方法太长，省略了许多：</p>
<pre><code><span class="keyword">public</span> SocketState process(SocketWrapperBase&lt;?&gt; socketWrapper)
    <span class="keyword">throws</span> IOException {
    RequestInfo rp = request.getRequestProcessor();
    rp.setStage(org.apache.coyote.Constants.STAGE_PARSE);

    <span class="comment">// Setting up the I/O</span>
     ...<span class="comment">//略</span>
    <span class="comment">// Flags</span>
    keepAlive = <span class="keyword">true</span>;
    openSocket = <span class="keyword">false</span>;
    sendfileInProgress = <span class="keyword">false</span>;
    readComplete = <span class="keyword">true</span>;
    keptAlive = <span class="keyword">false</span>;

    <span class="keyword">while</span> (!getErrorState().isError() &amp;&amp; keepAlive &amp;&amp; !isAsync() &amp;&amp;
            httpUpgradeHandler == <span class="keyword">null</span> &amp;&amp; !endpoint.isPaused()) {

        <span class="comment">// Parsing the request header</span>
        <span class="keyword">try</span> {
            <span class="keyword">if</span> (!inputBuffer.parseRequestLine(keptAlive)) {
                <span class="keyword">if</span> (handleIncompleteRequestLineRead()) {
                    <span class="keyword">break</span>;
                }
            }

            <span class="keyword">if</span> (endpoint.isPaused()) {
                <span class="comment">// 503 - Service unavailable</span>
                response.setStatus(<span class="number">503</span>);
                setErrorState(ErrorState.CLOSE_CLEAN, <span class="keyword">null</span>);
            } <span class="keyword">else</span> {
                keptAlive = <span class="keyword">true</span>;
                <span class="comment">// Set this every time in case limit has been changed via JMX</span>
                request.getMimeHeaders().setLimit(endpoint.getMaxHeaderCount());
                <span class="keyword">if</span> (!inputBuffer.parseHeaders()) {
                    <span class="comment">// We've read part of the request, don't recycle it</span>
                    <span class="comment">// instead associate it with the socket</span>
                    openSocket = <span class="keyword">true</span>;
                    readComplete = <span class="keyword">false</span>;
                    <span class="keyword">break</span>;
                }
                <span class="keyword">if</span> (!disableUploadTimeout) {
                    socketWrapper.setReadTimeout(connectionUploadTimeout);
                }
            }
        } <span class="keyword">catch</span> (Throwable t) {
            ...<span class="comment">//略，其他异常</span>
            <span class="comment">// 400 - Bad Request ，返回400错误</span>
            response.setStatus(<span class="number">400</span>);
            setErrorState(ErrorState.CLOSE_CLEAN, t);
            getAdapter().<span class="built_in">log</span>(request, response, <span class="number">0</span>);
        }

        <span class="comment">// Has an upgrade been requested?</span>
        ...<span class="comment">//略，更新请求</span>

        <span class="keyword">if</span> (!getErrorState().isError()) {
            <span class="comment">// Setting up filters, and parse some request headers</span>
            rp.setStage(org.apache.coyote.Constants.STAGE_PREPARE);
            <span class="keyword">try</span> {
                prepareRequest();
            } <span class="keyword">catch</span> (Throwable t) {
                ExceptionUtils.handleThrowable(t);
                <span class="keyword">if</span> (<span class="built_in">log</span>.isDebugEnabled()) {
                    <span class="built_in">log</span>.debug(sm.getString(<span class="string">"http11processor.request.prepare"</span>), t);
                }
                <span class="comment">// 500 - Internal Server Error</span>
                response.setStatus(<span class="number">500</span>);
                setErrorState(ErrorState.CLOSE_CLEAN, t);
                getAdapter().<span class="built_in">log</span>(request, response, <span class="number">0</span>);
            }
        }

        <span class="keyword">if</span> (maxKeepAliveRequests == <span class="number">1</span>) {
            keepAlive = <span class="keyword">false</span>;
        } <span class="keyword">else</span> <span class="keyword">if</span> (maxKeepAliveRequests &gt; <span class="number">0</span> &amp;&amp;
                socketWrapper.decrementKeepAlive() &lt;= <span class="number">0</span>) {
            keepAlive = <span class="keyword">false</span>;
        }

        <span class="comment">// Process the request in the adapter</span>
        <span class="keyword">if</span> (!getErrorState().isError()) {
            <span class="keyword">try</span> {
                rp.setStage(org.apache.coyote.Constants.STAGE_SERVICE);
                getAdapter().service(request, response);
                <span class="comment">// Handle when the response was committed before a serious</span>
                <span class="comment">// error occurred.  Throwing a ServletException should both</span>
                <span class="comment">// set the status to 500 and set the errorException.</span>
                <span class="comment">// If we fail here, then the response is likely already</span>
                <span class="comment">// committed, so we can't try and set headers.</span>
                <span class="keyword">if</span>(keepAlive &amp;&amp; !getErrorState().isError() &amp;&amp; (
                        response.getErrorException() != <span class="keyword">null</span> ||
                                (!isAsync() &amp;&amp;
                                statusDropsConnection(response.getStatus())))) {
                    setErrorState(ErrorState.CLOSE_CLEAN, <span class="keyword">null</span>);
                }
            } <span class="keyword">catch</span> (InterruptedIOException e) {
                setErrorState(ErrorState.CLOSE_NOW, e);
            } <span class="keyword">catch</span> (HeadersTooLargeException e) {
                <span class="comment">// The response should not have been committed but check it</span>
                <span class="comment">// anyway to be safe</span>
                <span class="keyword">if</span> (response.isCommitted()) {
                    setErrorState(ErrorState.CLOSE_NOW, e);
                } <span class="keyword">else</span> {
                    response.reset();
                    response.setStatus(<span class="number">500</span>);
                    setErrorState(ErrorState.CLOSE_CLEAN, e);
                    response.setHeader(<span class="string">"Connection"</span>, <span class="string">"close"</span>); <span class="comment">// TODO: Remove</span>
                }
            } <span class="keyword">catch</span> (Throwable t) {
                ExceptionUtils.handleThrowable(t);
                <span class="built_in">log</span>.error(sm.getString(<span class="string">"http11processor.request.process"</span>), t);
                <span class="comment">// 500 - Internal Server Error</span>
                response.setStatus(<span class="number">500</span>);
                setErrorState(ErrorState.CLOSE_CLEAN, t);
                getAdapter().<span class="built_in">log</span>(request, response, <span class="number">0</span>);
            }
        }

        <span class="comment">// Finish the handling of the request</span>
        rp.setStage(org.apache.coyote.Constants.STAGE_ENDINPUT);
        <span class="keyword">if</span> (!isAsync()) {
            <span class="comment">// If this is an async request then the request ends when it has</span>
            <span class="comment">// been completed. The AsyncContext is responsible for calling</span>
            <span class="comment">// endRequest() in that case.</span>
            endRequest();
        }
        rp.setStage(org.apache.coyote.Constants.STAGE_ENDOUTPUT);

        <span class="comment">// If there was an error, make sure the request is counted as</span>
        <span class="comment">// and error, and update the statistics counter</span>
        <span class="keyword">if</span> (getErrorState().isError()) {
            response.setStatus(<span class="number">500</span>);
        }
        request.updateCounters();

        ...<span class="comment">//略</span>

        rp.setStage(org.apache.coyote.Constants.STAGE_KEEPALIVE);

        <span class="keyword">if</span> (breakKeepAliveLoop(socketWrapper)) {
            <span class="keyword">break</span>;
        }
    }

    rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);

    <span class="keyword">if</span> (getErrorState().isError() || endpoint.isPaused()) {
        <span class="keyword">return</span> SocketState.CLOSED;
    } <span class="keyword">else</span> <span class="keyword">if</span> (isAsync()) {
        <span class="keyword">return</span> SocketState.LONG;
    } <span class="keyword">else</span> <span class="keyword">if</span> (isUpgrade()) {
        <span class="keyword">return</span> SocketState.UPGRADING;
    } <span class="keyword">else</span> {
        <span class="keyword">if</span> (sendfileInProgress) {
            <span class="keyword">return</span> SocketState.SENDFILE;
        } <span class="keyword">else</span> {
            <span class="keyword">if</span> (openSocket) {
                <span class="keyword">if</span> (readComplete) {
                    <span class="keyword">return</span> SocketState.OPEN;
                } <span class="keyword">else</span> {
                    <span class="keyword">return</span> SocketState.LONG;
                }
            } <span class="keyword">else</span> {
                <span class="keyword">return</span> SocketState.CLOSED;
            }
        }
    }
}
</code></pre><p>方法太长，略去了一部分。代码主要是作用是生成了org.apache.coyote.Requset对象和org.apache.coyote.Response对象，对升级和错误进行了额外的处理等。我们重点看<code>getAdapter().service(request, response);</code>这段代码会转发到Servlet请求上。getAdapter()返回一个CoyoteAdapter对象，我们接着看。</p>
<h2 id="四，CoyoteAdapter">四，CoyoteAdapter</h2><p>service方法对req和res进行转型，转成ServletRequest和ServletResponse<br>    public void service(org.apache.coyote.Request req,<br>                        org.apache.coyote.Response res)<br>        throws Exception {</p>
<pre><code>    Request request = (Request) req.getNote(ADAPTER_NOTES);
    Response response = (Response) res.getNote(ADAPTER_NOTES);

    <span class="keyword">if</span> (request == <span class="keyword">null</span>) {

        <span class="comment">// Create objects</span>
        request = connector.createRequest();
        request.setCoyoteRequest(req);
        response = connector.createResponse();
        response.setCoyoteResponse(res);

        <span class="comment">// Link objects</span>
        request.setResponse(response);
        response.setRequest(request);

        <span class="comment">// Set as notes</span>
        req.setNote(ADAPTER_NOTES, request);
        res.setNote(ADAPTER_NOTES, response);

        <span class="comment">// Set query string encoding</span>
        req.getParameters().setQueryStringEncoding
            (connector.getURIEncoding());

    }

    <span class="keyword">if</span> (connector.getXpoweredBy()) {
        response.addHeader(<span class="string">"X-Powered-By"</span>, POWERED_BY);
    }

    <span class="keyword">boolean</span> async = <span class="keyword">false</span>;

    <span class="keyword">try</span> {

        <span class="comment">// Parse and set Catalina and configuration specific</span>
        <span class="comment">// request parameters</span>
        req.getRequestProcessor().setWorkerThreadName(THREAD_NAME.get());
        <span class="keyword">boolean</span> postParseSuccess = postParseRequest(req, request, res, response);
        <span class="keyword">if</span> (postParseSuccess) {
            <span class="comment">//check valves if we support async</span>
            request.setAsyncSupported(connector.getService().getContainer().getPipeline().isAsyncSupported());
            <span class="comment">// Calling the container</span>
            connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);
        }
        AsyncContextImpl asyncConImpl = (AsyncContextImpl)request.getAsyncContext();
        <span class="keyword">if</span> (asyncConImpl != <span class="keyword">null</span>) {
            async = <span class="keyword">true</span>;
            ReadListener readListener = req.getReadListener();
            <span class="keyword">if</span> (readListener != <span class="keyword">null</span> &amp;&amp; request.isFinished()) {
                <span class="comment">// Possible the all data may have been read during service()</span>
                <span class="comment">// method so this needs to be checked here</span>
                ClassLoader oldCL = <span class="keyword">null</span>;
                <span class="keyword">try</span> {
                    oldCL = request.getContext().bind(<span class="keyword">false</span>, <span class="keyword">null</span>);
                    <span class="keyword">if</span> (req.sendAllDataReadEvent()) {
                        req.getReadListener().onAllDataRead();
                    }
                } <span class="keyword">finally</span> {
                    request.getContext().unbind(<span class="keyword">false</span>, oldCL);
                }
            }
        } <span class="keyword">else</span> {
            request.finishRequest();
            response.finishResponse();
            <span class="keyword">if</span> (postParseSuccess) {
                <span class="comment">// Log only if processing was invoked.</span>
                <span class="comment">// If postParseRequest() failed, it has already logged it.</span>
                request.getMappingData().context.logAccess(
                        request, response,
                        System.currentTimeMillis() - req.getStartTime(),
                        <span class="keyword">false</span>);
            }
        }

    } <span class="keyword">catch</span> (IOException e) {
        <span class="comment">// Ignore</span>
    } <span class="keyword">finally</span> {
        req.getRequestProcessor().setWorkerThreadName(<span class="keyword">null</span>);
        AtomicBoolean <span class="keyword">error</span> = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);
        res.action(ActionCode.IS_ERROR, <span class="keyword">error</span>);
        <span class="comment">// Recycle the wrapper request and response</span>
        <span class="keyword">if</span> (!async || <span class="keyword">error</span>.get()) {
            request.recycle();
            response.recycle();
        } <span class="keyword">else</span> {
            <span class="comment">// Clear converters so that the minimum amount of memory</span>
            <span class="comment">// is used by this processor</span>
            request.clearEncoders();
            response.clearEncoders();
        }
    }

}
</code></pre><p>太长了，我们只关注最重要的：<code>connector.getService().getMapper().map(serverName, decodedURI, version, request.getMappingData());</code></p>
<p>connector.getService()返回了StandardService，然后映射到了具体的Servlet上，这里就是详细解释了，要去跑步了，88.</p>
<h2 id="五，结束">五，结束</h2><p>请求处理完后就会发送数据，就不一一详解了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一，回顾">一，回顾</h2><p>上篇文章讲了tomcat的Connector启动过程，启动之后，就可以接收请求了。这篇文章主要讲解tomcat如何接收请求。</p>
<h2 id="二，NioEndpoint">二，NioEndpoint</h2><h3 id]]>
    </summary>
    
      <category term="tomcat" scheme="http://sqtds.github.io/tags/tomcat/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tomcat8源码阅读(五)--启动四]]></title>
    <link href="http://sqtds.github.io/2015/08/15/2015/tomcat8-sourcecode05/"/>
    <id>http://sqtds.github.io/2015/08/15/2015/tomcat8-sourcecode05/</id>
    <published>2015-08-15T06:10:54.000Z</published>
    <updated>2015-08-15T09:33:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一，回顾">一，回顾</h2><p>还记得我们在启动二讲过的嘛？container的启动和初始化讲完了，connector还没开始。下面，我们开始看connector是如何初始化和启动的。</p>
<h2 id="二，再读Lifecycle">二，再读Lifecycle</h2><p><img src="/img/2015/tomcat8-lifecycle.png" alt=""><br>我们看Lifecycle的类层次图，发现很多类都实现了Lifecycle，包括connector和container，这里我只关心connector。由于Connector继承了LifecycleBase，跟container一样，当调用其init和start方法时，会调用其内部的initInternal和startInternal方法，下面我们就关注其方法。</p>
<h2 id="三，Connector的initInternal">三，Connector的initInternal</h2><p>看方法：</p>
<pre><code><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>{

    <span class="keyword">super</span>.initInternal();

    <span class="comment">// Initialize adapter</span>
    adapter = <span class="keyword">new</span> CoyoteAdapter(<span class="keyword">this</span>);
    protocolHandler.setAdapter(adapter);    

    <span class="keyword">try</span> {
        protocolHandler.init();
    } <span class="keyword">catch</span> (Exception e) {
        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException
            (sm.getString
             (<span class="string">"coyoteConnector.protocolHandlerInitializationFailed"</span>), e);
    }
}
</code></pre><p>这里我们要重点关注protocolHandler，它是怎么创建的呢？我们看Connector的创建。</p>
<h3 id="3-1_创建Connector">3.1 创建Connector</h3><p>在Catalian的createStartDigester()方法中，有这样一段代码：</p>
<pre><code><span class="type">Catalian</span>
digester.addRule(<span class="string">"Server/Service/Connector"</span>,
                     <span class="keyword">new</span> <span class="type">ConnectorCreateRule</span><span class="literal">()</span>);
</code></pre><p>我们看代码，这里创建了一个ConnectorCreateRule对象，到这个里面看看。<br>    ConnectorCreateRule<br>    public void begin(String namespace, String name, Attributes attributes)<br>            throws Exception {<br>        Service svc = (Service)digester.peek();<br>        Executor ex = null;<br>        if ( attributes.getValue(“executor”)!=null ) {<br>            ex = svc.getExecutor(attributes.getValue(“executor”));<br>        }<br>        Connector con = new Connector(attributes.getValue(“protocol”));<br>        if (ex != null) {<br>            setExecutor(con, ex);<br>        }<br>        String sslImplementationName = attributes.getValue(“sslImplementationName”);<br>        if (sslImplementationName != null) {<br>            setSSLImplementationName(con, sslImplementationName);<br>        }<br>        digester.push(con);<br>    }</p>
<p>中间有一句<code>new Connector(attributes.getValue(&quot;protocol&quot;));</code>，好家伙，我们看看Connector的构造方法。</p>
<pre><code><span class="keyword">public</span> Connector(<span class="keyword">String</span> protocol) {
    setProtocol(protocol);
    <span class="comment">// Instantiate protocol handler</span>
    ProtocolHandler p = <span class="keyword">null</span>;
    <span class="keyword">try</span> {
        Class&lt;?&gt; clazz = Class.forName(protocolHandlerClassName);
        p = (ProtocolHandler) clazz.newInstance();
    } <span class="keyword">catch</span> (Exception e) {
        <span class="built_in">log</span>.error(sm.getString(
                <span class="string">"coyoteConnector.protocolHandlerInstantiationFailed"</span>), e);
    } <span class="keyword">finally</span> {
        <span class="keyword">this</span>.protocolHandler = p;
    }

    ...<span class="comment">//other</span>
}
<span class="comment">//默认类为Http11NioProtocol</span>
<span class="keyword">protected</span> <span class="keyword">String</span> protocolHandlerClassName =
    <span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>;
</code></pre><p>我们看到，这里用反射创建了一个ProtocolHandler，默认为Http11NioProtocol，并且根据server.xml属性配置设置了协议。 </p>
<h3 id="3-2_Http11NioProtocol的init">3.2 Http11NioProtocol的init</h3><p>我们看代码：</p>
<pre><code>AbstractHttp11Protocol
<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{
    <span class="keyword">for</span> (UpgradeProtocol upgradeProtocol : upgradeProtocols) {
        configureUpgradeProtocol(upgradeProtocol);
    }

    <span class="keyword">super</span>.init();
}
</code></pre><p>调用了父类的init<br>    AbstractProtocol<br>    public void init() throws Exception {</p>
<pre><code>    <span class="keyword">if</span> (oname == <span class="keyword">null</span>) {
        <span class="comment">// Component not pre-registered so register it</span>
        oname = createObjectName();
        <span class="keyword">if</span> (oname != <span class="keyword">null</span>) {
            Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(<span class="keyword">this</span>, oname,
                <span class="keyword">null</span>);
        }
    }

    <span class="keyword">if</span> (<span class="keyword">this</span>.domain != <span class="keyword">null</span>) {
        <span class="keyword">try</span> {
            tpOname = <span class="keyword">new</span> ObjectName(domain + <span class="string">":"</span> +
                    <span class="string">"type=ThreadPool,name="</span> + getName());
            Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(endpoint,
                    tpOname, <span class="keyword">null</span>);
        } <span class="keyword">catch</span> (Exception e) {
            getLog().<span class="keyword">error</span>(sm.getString(
                    <span class="string">"abstractProtocolHandler.mbeanRegistrationFailed"</span>,
                    tpOname, getName()), e);
        }
        rgOname=<span class="keyword">new</span> ObjectName(domain +
                <span class="string">":type=GlobalRequestProcessor,name="</span> + getName());
        Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(
                getHandler().getGlobal(), rgOname, <span class="keyword">null</span> );
    }

    String endpointName = getName();
    endpoint.setName(endpointName.substring(<span class="number">1</span>, endpointName.length()-<span class="number">1</span>));

    <span class="keyword">try</span> {
        endpoint.init();
    } <span class="keyword">catch</span> (Exception ex) {
        getLog().<span class="keyword">error</span>(sm.getString(<span class="string">"abstractProtocolHandler.initError"</span>,
                getName()), ex);
        <span class="keyword">throw</span> ex;
    }
}
AbstractEndpoint
<span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{
    <span class="keyword">if</span> (bindOnInit) {
        bind();
        bindState = BindState.BOUND_ON_INIT;
    }
}
</code></pre><p>先调用bind方法，绑定端口：</p>
<pre><code><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">bind</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{

    serverSock = ServerSocketChannel.open();
    socketProperties.setProperties(serverSock.socket());
    InetSocketAddress addr = (getAddress()!=<span class="keyword">null</span>?<span class="keyword">new</span> InetSocketAddress(getAddress(),getPort()):<span class="keyword">new</span> InetSocketAddress(getPort()));
    serverSock.socket().bind(addr,getBacklog());
    serverSock.configureBlocking(<span class="keyword">true</span>); <span class="comment">//mimic APR behavior</span>
    serverSock.socket().setSoTimeout(getSocketProperties().getSoTimeout());

    <span class="comment">// Initialize thread count defaults for acceptor, poller</span>
    <span class="keyword">if</span> (acceptorThreadCount == <span class="number">0</span>) {
        <span class="comment">// FIXME: Doesn't seem to work that well with multiple accept threads</span>
        acceptorThreadCount = <span class="number">1</span>;
    }
    <span class="keyword">if</span> (pollerThreadCount &lt;= <span class="number">0</span>) {
        <span class="comment">//minimum one poller thread</span>
        pollerThreadCount = <span class="number">1</span>;
    }
    stopLatch = <span class="keyword">new</span> CountDownLatch(pollerThreadCount);

    <span class="comment">// Initialize SSL if needed</span>
    initialiseSsl();

    selectorPool.open();
}
</code></pre><h2 id="四，Connector的startInternal">四，Connector的startInternal</h2><p>直接上方法：</p>
<pre><code><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>{
    ...<span class="comment">//检验</span>
    setState(LifecycleState.STARTING);
    <span class="keyword">try</span> {
        protocolHandler.start();
    } <span class="keyword">catch</span> (Exception e) {
        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException
            (errPrefix + <span class="string">" "</span> + sm.getString
             (<span class="string">"coyoteConnector.protocolHandlerStartFailed"</span>), e);
    }
}
</code></pre><p>方法很简单，调用了protocolHandler的start方法。</p>
<h3 id="4-1_Http11NioProtocol的start">4.1 Http11NioProtocol的start</h3><pre><code><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{
    <span class="keyword">try</span> {
        endpoint.start();
    } <span class="keyword">catch</span> (Exception ex) {
        getLog().<span class="keyword">error</span>(sm.getString(<span class="string">"abstractProtocolHandler.startError"</span>,
                getName()), ex);
        <span class="keyword">throw</span> ex;
    }
}
</code></pre><p>代码直接启动了endpoint，在Http11NioProtocol为NioEndpoint对象，这里就不解释了。</p>
<p>我们看其内部方法：</p>
<pre><code>AbstractEndpoint
<span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{
    <span class="keyword">if</span> (bindState == BindState.UNBOUND) {
        bind();
        bindState = BindState.BOUND_ON_START;
    }
    startInternal();
}
</code></pre><p>代码采用Blocking模式接收连接请求。接着调用了startInternal方法:</p>
<pre><code><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{

    <span class="keyword">if</span> (!running) {
        running = <span class="keyword">true</span>;
        paused = <span class="keyword">false</span>;

        processorCache = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,
                socketProperties.getProcessorCache());
        eventCache = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,
                        socketProperties.getEventCache());
        nioChannels = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,
                socketProperties.getBufferPool());

        <span class="comment">// Create worker collection</span>
        <span class="keyword">if</span> ( getExecutor() == <span class="keyword">null</span> ) {
            createExecutor();
        }

        initializeConnectionLatch();

        <span class="comment">// Start poller threads</span>
        pollers = <span class="keyword">new</span> Poller[getPollerThreadCount()];
        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pollers.length; i++) {
            pollers[i] = <span class="keyword">new</span> Poller();
            Thread pollerThread = <span class="keyword">new</span> Thread(pollers[i], getName() + <span class="string">"-ClientPoller-"</span>+i);
            pollerThread.setPriority(threadPriority);
            pollerThread.setDaemon(<span class="keyword">true</span>);
            pollerThread.start();
        }

        startAcceptorThreads();
    }
}
</code></pre><p>代码首先创建了线程池，然后初始化了最大连接限制，启动了poller线程，和acceptor线程。这样，整个流程就结束了。Poller主要作用于socket读写事件，Acceptor主要作用于接收请求。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一，回顾">一，回顾</h2><p>还记得我们在启动二讲过的嘛？container的启动和初始化讲完了，connector还没开始。下面，我们开始看connector是如何初始化和启动的。</p>
<h2 id="二，再读Lifecycle">二，再读Lifecy]]>
    </summary>
    
      <category term="tomcat" scheme="http://sqtds.github.io/tags/tomcat/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis学习]]></title>
    <link href="http://sqtds.github.io/2015/08/15/2015/redis-study/"/>
    <id>http://sqtds.github.io/2015/08/15/2015/redis-study/</id>
    <published>2015-08-15T02:07:36.000Z</published>
    <updated>2015-08-15T04:11:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一，redis数据结构">一，redis数据结构</h2><p>redis总共包含5种类型的数据结构，分别是String,Hash,List,Set,Sorted Set。下面我们来逐一介绍.</p>
<h3 id="1-1_String">1.1 String</h3><p>String就是基本的key-value数据结构。</p>
<p>常用命令：</p>
<blockquote>
<p>get,set,mset,mget,decr,incr,getset,del,exists等。</p>
</blockquote>
<h3 id="1-2_Hash">1.2 Hash</h3><p>Hash提供对象关系存储，相比String而言多了一层查找字段的功能。<br>举个例子，我们看hash的set命令：</p>
<blockquote>
<p>HSET key field value</p>
</blockquote>
<p>相比String而言，多了field名称，这样我们就可以以对象来存储对象的值。例如有一个对象Person，它有2个字段 name和sex。我们就可以使用</p>
<pre><code><span class="tag">HSET</span> <span class="rule"><span class="attribute">person</span>:<span class="value"><span class="number">1</span> name <span class="string">'张三'</span>；
HSET person:<span class="number">1</span> sex <span class="string">'男'</span>；
或者使用 HMSET person:<span class="number">1</span> name  <span class="string">'张三'</span> sex <span class="string">'男'</span> </span></span>;
</code></pre><p>如果我们需要修改”张三”的姓名时，只需要</p>
<pre><code><span class="tag">HSET</span> <span class="rule"><span class="attribute">person</span>:<span class="value"><span class="number">1</span> name <span class="string">'李四'</span></span></span>
</code></pre><p>即可。</p>
<p>常用命令：</p>
<blockquote>
<p>hset,hget,hlen,hmset,hmget,hkeys,hdel,hincrby</p>
</blockquote>
<h3 id="1-3_List">1.3 List</h3><p>List使用双向链表构成，它维护了一个给定key的一组数组值。你可以对这个list进行增删改查。<br>我们来看一个它的简单命令：</p>
<blockquote>
<p>LPUSH key value [value …]</p>
</blockquote>
<p>这里value可以是一个或者多个，这些value组成了一个list。</p>
<p>常用命令：</p>
<blockquote>
<p>lpush,lpop,rpush,rpop,llen,lrange,lrem</p>
</blockquote>
<h3 id="1-4_Set">1.4 Set</h3><p>Set相比List就是存储的值不重复，即唯一的。Set操作还支持集合操作，交集，差集和并集。<br>命令格式如下：</p>
<blockquote>
<p>SADD key member [member …]</p>
</blockquote>
<p>常用命令：</p>
<blockquote>
<p>sadd,srem,smembers,sismember,sdiff,sinter,sunion,scard等</p>
</blockquote>
<h3 id="1-4_Sorted_Set">1.4 Sorted Set</h3><p>Sorted Set是有序的集合，使用跳表(skip list)实现的。<br>添加命令：</p>
<blockquote>
<p>ZADD key [NX|XX] [CH] [INCR] score member [score member …]</p>
</blockquote>
<p>zadd命令用于向有序集合中加入一个元素和改元素对应的分数，如果该元素存在则会用新的分数替换原来的分数。</p>
<p>常用命令：</p>
<blockquote>
<p>zadd,zscore,zrange,zrangebyscore,zrem,zcard,zcount</p>
</blockquote>
<h2 id="二，存储结构">二，存储结构</h2><p>Redis内部使用一个redisObject对象来表示所有的key和value,我们先看redisObject:<br><img src="/img/2015/redisObject.jpg" alt=""></p>
<p>type代表一个value对象具体是何种数据类型，encoding是不同数据类型在redis内部的存储方式，比如：type=string代表value存储的是一个普通字符串，那么对应的encoding可以是raw或者是int,如果是int则代表实际redis内部是按数值型类存储和表示这个字符串的，当然前提是这个字符串本身可以用数值表示，比如:”123” “456”这样的字符串。</p>
<p>接下来，我们看redis的内存结构：<br><img src="/img/2015/redismemory.jpg" alt=""><br>我们看到，dictEntry存储了key和val,它主要由链表实现。key是一个字符串，val可以是上面5种不同的数据类型。</p>
<p>更详尽的介绍请移步<a href="http://www.searchtb.com/2011/05/redis-storage.html" target="_blank" rel="external">Redis内存存储结构分析</a></p>
<h2 id="三，其他特性">三，其他特性</h2><p>这一小节主要介绍了redis的缓存失效，事务，发布订阅，持久化等方面。</p>
<h3 id="3-1_缓存失效">3.1 缓存失效</h3><p>在 Redis 提供的诸多命令中，EXPIRE、EXPIREAT、PEXPIRE、PEXPIREAT 以及 SETEX 和 PSETEX 均可以用来设置一条 Key-Value 对的失效时间，而一条 Key-Value 对一旦被关联了失效时间就会在到期后自动删除（或者说变得无法访问更为准确）。</p>
<p>Redis 删除失效主键的方法主要有两种：</p>
<ul>
<li>消极方法（passive way），在主键被访问时如果发现它已经失效，那么就删除它</li>
<li>积极方法（active way），周期性地从设置了失效时间的主键中选择一部分失效的主键删除—使用抽样方法，如果失效的主键数占抽样数的百分比大于25%，则继续抽样删除过程</li>
</ul>
<h3 id="3-2_事务">3.2 事务</h3><blockquote>
<p>使用互斥</p>
</blockquote>
<p>可以使用 multi(开始事务) ，discard(取消事务)，exec(提交事务)。<br>注意：Redis 不支持回滚。</p>
<blockquote>
<p>使用cas</p>
</blockquote>
<p>WATCH 命令可以为 Redis 事务提供 check-and-set （CAS）行为。<br>被 WATCH 的键会被监视，并会发觉这些键是否被改动过了。 如果有至少一个被监视的键在 EXEC 执行之前被修改了， 那么整个事务都会被取消， EXEC 返回空多条批量回复（null multi-bulk reply）来表示事务已经失败。</p>
<pre><code><span class="type">WATCH</span> mykey

<span class="function"><span class="keyword">val</span> =</span> <span class="type">GET</span> mykey
<span class="function"><span class="keyword">val</span> =</span> <span class="function"><span class="keyword">val</span> <span class="title">+</span> 1
</span>
<span class="type">MULTI</span>
<span class="type">SET</span> mykey $<span class="function"><span class="keyword">val</span>
</span><span class="type">EXEC</span>
</code></pre><h3 id="3-3_发布订阅">3.3 发布订阅</h3><p>redis使用SUBSCRIBE 、 UNSUBSCRIBE 和 PUBLISH 来做发布订阅操作。你可以设定对某一个 key 值进行消息发布及消息订阅，当一个 key 值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。</p>
<h4 id="3-4_持久化">3.4 持久化</h4><p>redis的持久化有rdb和aof两种。</p>
<ul>
<li>rdb 记录一段时间内的操作，一般的配置是一段时间内操作超过多少次就持久化</li>
<li>aof可以实现每次操作都持久化</li>
</ul>
<h2 id="参考资料">参考资料</h2><ul>
<li><a href="http://redisdoc.com/" target="_blank" rel="external">Redis 命令参考</a></li>
<li><a href="http://redis.io/" target="_blank" rel="external">Redis官方网站</a></li>
<li><a href="http://openmymind.net/2012/1/23/The-Little-Redis-Book/" target="_blank" rel="external">The Little Redis Book</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一，redis数据结构">一，redis数据结构</h2><p>redis总共包含5种类型的数据结构，分别是String,Hash,List,Set,Sorted Set。下面我们来逐一介绍.</p>
<h3 id="1-1_String">1.1 String<]]>
    </summary>
    
      <category term="缓存" scheme="http://sqtds.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="数据库" scheme="http://sqtds.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tomcat8源码阅读(四)--启动三]]></title>
    <link href="http://sqtds.github.io/2015/08/12/2015/tomcat8-sourcecode04/"/>
    <id>http://sqtds.github.io/2015/08/12/2015/tomcat8-sourcecode04/</id>
    <published>2015-08-12T13:40:47.000Z</published>
    <updated>2015-08-15T06:33:28.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一，回顾">一，回顾</h2><p>上文介绍了Server的启动过程，但是没有详细介绍Container和Connector的详细启动流程，下面我将介绍Container的启动流程。</p>
<h2 id="二，Container的init">二，Container的init</h2><p>下面我看看Container的继承结构：<br><img src="/img/2015/container.png" alt=""><br>Engine，Host，Context，Wrapper都属于Container。下面，我们根据server.xml的默认配置结构来看看。</p>
<pre><code><span class="tag">&lt;<span class="title">Engine</span> <span class="attribute">name</span>=<span class="value">"Catalina"</span> <span class="attribute">defaultHost</span>=<span class="value">"localhost"</span>&gt;</span>
  <span class="comment">&lt;!--
  &lt;Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/&gt;
  --&gt;</span> 
   //LockOutRealm防止暴力破解
  <span class="tag">&lt;<span class="title">Realm</span> <span class="attribute">className</span>=<span class="value">"org.apache.catalina.realm.LockOutRealm"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">Realm</span> <span class="attribute">className</span>=<span class="value">"org.apache.catalina.realm.UserDatabaseRealm"</span>
           <span class="attribute">resourceName</span>=<span class="value">"UserDatabase"</span>/&gt;</span>
  <span class="tag">&lt;/<span class="title">Realm</span>&gt;</span>

  <span class="tag">&lt;<span class="title">Host</span> <span class="attribute">name</span>=<span class="value">"localhost"</span>  <span class="attribute">appBase</span>=<span class="value">"webapps"</span>
        <span class="attribute">unpackWARs</span>=<span class="value">"true"</span> <span class="attribute">autoDeploy</span>=<span class="value">"true"</span>&gt;</span>

    <span class="tag">&lt;<span class="title">Valve</span> <span class="attribute">className</span>=<span class="value">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attribute">directory</span>=<span class="value">"logs"</span>
           <span class="attribute">prefix</span>=<span class="value">"localhost_access_log"</span> <span class="attribute">suffix</span>=<span class="value">".txt"</span>
           <span class="attribute">pattern</span>=<span class="value">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span>

  <span class="tag">&lt;/<span class="title">Host</span>&gt;</span>
<span class="tag">&lt;/<span class="title">Engine</span>&gt;</span>
</code></pre><p>其中有Realm，这个是TOMCAT的安全域，我们暂时不关心，看其他的几个。</p>
<h3 id="2-1_Engine的initInternal">2.1 Engine的initInternal</h3><pre><code> <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>{
    <span class="comment">//获取一个默认的安全域</span>
    getRealm();
    <span class="keyword">super</span>.initInternal();
}
</code></pre><p>方法比较简单，我们关注super.initInternal()方法：</p>
<h3 id="2-2_ContainerBase的initInternal">2.2 ContainerBase的initInternal</h3><p>ContainerBase主要是创建一个startStopExecutor线程池用来启动停止子节点。</p>
<pre><code>ContainerBase
<span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>{
    BlockingQueue&lt;Runnable&gt; startStopQueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();
    <span class="comment">//创建线程池 </span>
    startStopExecutor = <span class="keyword">new</span> ThreadPoolExecutor(
            getStartStopThreadsInternal(),
            getStartStopThreadsInternal(), <span class="number">10</span>, TimeUnit.SECONDS,
            startStopQueue,
            <span class="keyword">new</span> StartStopThreadFactory(getName() + <span class="string">"-startStop-"</span>));
    startStopExecutor.allowCoreThreadTimeOut(<span class="keyword">true</span>);
    <span class="keyword">super</span>.initInternal();
}        
</code></pre><h3 id="2-3_StandardHost的initInternal">2.3 StandardHost的initInternal</h3><pre><code><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>{
    <span class="comment">//设置异常处理valve</span>
    String errorValve = getErrorReportValveClass();
    <span class="keyword">super</span>.startInternal();
}
</code></pre><h3 id="2-4_StandardContext的initInternal">2.4 StandardContext的initInternal</h3><pre><code><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>{
    <span class="keyword">super</span>.initInternal();

    <span class="comment">//注册命名服务</span>
    <span class="keyword">if</span> (namingResources != <span class="keyword">null</span>) {
        namingResources.init();
    }
    <span class="comment">//启动</span>
    <span class="keyword">if</span> (resources != <span class="keyword">null</span>) {
        resources.start();
    }

    <span class="comment">// Send j2ee.object.created notification</span>
    <span class="keyword">if</span> (<span class="keyword">this</span>.getObjectName() != <span class="keyword">null</span>) {
        Notification notification = <span class="keyword">new</span> Notification(<span class="string">"j2ee.object.created"</span>,
                <span class="keyword">this</span>.getObjectName(), sequenceNumber.getAndIncrement());
        broadcaster.sendNotification(notification);
    }
}
</code></pre><h3 id="2-5_StandardWrapper的initInternal">2.5 StandardWrapper的initInternal</h3><p>StandardWrapper的initInternal继承的父类ContainerBase的initInternal。</p>
<p>这样，初始化工作就告一段落了，下面，我们看start方法。</p>
<h2 id="三，Container的start">三，Container的start</h2><p>上文中我们知道，Container的start最终会调用自己的startInternal方法，下面我们看具体实现。</p>
<h3 id="3-1_StandardEngine的startInternal">3.1 StandardEngine的startInternal</h3><pre><code>StandardEngine
<span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>{
    <span class="keyword">super</span>.startInternal();
}
</code></pre><p>StandardEngine调用了父类ContainerBase的startInternal方法。</p>
<h3 id="3-2_ContainerBase的startInternal">3.2 ContainerBase的startInternal</h3><pre><code>ContainerBase
<span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> startInternal() <span class="keyword">throws</span> LifecycleException {
    logger = <span class="keyword">null</span>;
    getLogger();
    <span class="comment">//获取并启动集群</span>
    Cluster cluster = getClusterInternal();
    <span class="keyword">if</span> (cluster <span class="keyword">instanceof</span> Lifecycle) {
        ((Lifecycle) cluster).start();
    }
    <span class="comment">//获取并启动安全域</span>
    Realm realm = getRealmInternal();
    <span class="keyword">if</span> (realm <span class="keyword">instanceof</span> Lifecycle) {
        ((Lifecycle) realm).start();
    }

    <span class="comment">//使用线程池启动子容器</span>
    Container children[] = findChildren();
    List&lt;Future&lt;Void&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();
    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; children.length; i++) {
        results.<span class="built_in">add</span>(startStopExecutor.submit(<span class="keyword">new</span> StartChild(children[i])));
    }
    <span class="comment">//异步获取启动结果</span>
    <span class="built_in">boolean</span> fail = <span class="keyword">false</span>;
    <span class="keyword">for</span> (Future&lt;Void&gt; result : results) {
        <span class="keyword">try</span> {
            result.<span class="built_in">get</span>();
        } <span class="keyword">catch</span> (Exception e) {
            <span class="built_in">log</span>.error(sm.getString(<span class="string">"containerBase.threadedStartFailed"</span>), e);
            fail = <span class="keyword">true</span>;
        }

    }
    <span class="keyword">if</span> (fail) {
        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(
                sm.getString(<span class="string">"containerBase.threadedStartFailed"</span>));
    }

    <span class="comment">// 启动pipeline中的Valves</span>
    <span class="keyword">if</span> (pipeline <span class="keyword">instanceof</span> Lifecycle)
        ((Lifecycle) pipeline).start();

    setState(LifecycleState.STARTING);

    <span class="comment">//启动后台线程，定期检查session超时</span>
    threadStart();
}
</code></pre><p>就这样，ContainerBase会将它的子容器用线程池启动起来。</p>
<h3 id="3-3_StandardHost的startInternal">3.3 StandardHost的startInternal</h3><pre><code>StandardHost
<span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>{
    String errorValve = getErrorReportValveClass();
    <span class="keyword">super</span>.startInternal();
}
</code></pre><p>啥也没做，继续调用父类的startInternal方法。</p>
<h3 id="3-4_StandardContext的startInternal">3.4 StandardContext的startInternal</h3><pre><code>StandardContext
<span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> startInternal() <span class="keyword">throws</span> LifecycleException {
    <span class="comment">// Send j2ee.state.starting notification</span>
    <span class="keyword">if</span> (<span class="keyword">this</span>.getObjectName() != <span class="keyword">null</span>) {
        Notification notification = <span class="keyword">new</span> Notification(<span class="string">"j2ee.state.starting"</span>,
                <span class="keyword">this</span>.getObjectName(), sequenceNumber.getAndIncrement());
        broadcaster.sendNotification(notification);
    }

    setConfigured(<span class="keyword">false</span>);
    <span class="built_in">boolean</span> ok = <span class="keyword">true</span>;

    <span class="comment">// Currently this is effectively a NO-OP but needs to be called to</span>
    <span class="comment">// ensure the NamingResources follows the correct lifecycle</span>
    <span class="keyword">if</span> (namingResources != <span class="keyword">null</span>) {
        namingResources.start();
    }

    <span class="comment">// Add missing components as necessary</span>
    <span class="keyword">if</span> (getResources() == <span class="keyword">null</span>) {   <span class="comment">// (1) Required by Loader</span>
        <span class="keyword">if</span> (<span class="built_in">log</span>.isDebugEnabled())
            <span class="built_in">log</span>.debug(<span class="string">"Configuring default Resources"</span>);

        <span class="keyword">try</span> {
            setResources(<span class="keyword">new</span> StandardRoot(<span class="keyword">this</span>));
        } <span class="keyword">catch</span> (IllegalArgumentException e) {
            <span class="built_in">log</span>.error(sm.getString(<span class="string">"standardContext.resourcesInit"</span>), e);
            ok = <span class="keyword">false</span>;
        }
    }
    <span class="keyword">if</span> (ok) {
        resourcesStart();
    }

    <span class="keyword">if</span> (getLoader() == <span class="keyword">null</span>) {
        WebappLoader webappLoader = <span class="keyword">new</span> WebappLoader(getParentClassLoader());
        webappLoader.setDelegate(getDelegate());
        setLoader(webappLoader);
    }

    <span class="comment">// Initialize character set mapper</span>
    getCharsetMapper();

    <span class="comment">// Post work directory</span>
    postWorkDirectory();

    <span class="comment">// Validate required extensions</span>
    <span class="built_in">boolean</span> dependencyCheck = <span class="keyword">true</span>;
    <span class="keyword">try</span> {
        dependencyCheck = ExtensionValidator.validateApplication
            (getResources(), <span class="keyword">this</span>);
    } <span class="keyword">catch</span> (IOException ioe) {
        <span class="built_in">log</span>.error(sm.getString(<span class="string">"standardContext.extensionValidationError"</span>), ioe);
        dependencyCheck = <span class="keyword">false</span>;
    }

    <span class="keyword">if</span> (!dependencyCheck) {
        <span class="comment">// do not make application available if depency check fails</span>
        ok = <span class="keyword">false</span>;
    }

    <span class="comment">// Reading the "catalina.useNaming" environment variable</span>
    <span class="keyword">String</span> useNamingProperty = System.getProperty(<span class="string">"catalina.useNaming"</span>);
    <span class="keyword">if</span> ((useNamingProperty != <span class="keyword">null</span>)
        &amp;&amp; (useNamingProperty.equals(<span class="string">"false"</span>))) {
        useNaming = <span class="keyword">false</span>;
    }

    <span class="keyword">if</span> (ok &amp;&amp; isUseNaming()) {
        <span class="keyword">if</span> (getNamingContextListener() == <span class="keyword">null</span>) {
            NamingContextListener ncl = <span class="keyword">new</span> NamingContextListener();
            ncl.setName(getNamingContextName());
            ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());
            addLifecycleListener(ncl);
            setNamingContextListener(ncl);
        }
    }

    <span class="comment">// Standard container startup</span>
    <span class="keyword">if</span> (<span class="built_in">log</span>.isDebugEnabled())
        <span class="built_in">log</span>.debug(<span class="string">"Processing standard container startup"</span>);


    <span class="comment">// Binding thread</span>
    ClassLoader oldCCL = bindThread();

    <span class="keyword">try</span> {
        <span class="keyword">if</span> (ok) {
            <span class="comment">// Start our subordinate components, if any</span>
            Loader loader = getLoader();
            <span class="keyword">if</span> (loader <span class="keyword">instanceof</span> Lifecycle) {
                ((Lifecycle) loader).start();
            }

            <span class="comment">// since the loader just started, the webapp classloader is now</span>
            <span class="comment">// created.</span>
            setClassLoaderProperty(<span class="string">"clearReferencesStatic"</span>,
                    getClearReferencesStatic());
            setClassLoaderProperty(<span class="string">"clearReferencesStopThreads"</span>,
                    getClearReferencesStopThreads());
            setClassLoaderProperty(<span class="string">"clearReferencesStopTimerThreads"</span>,
                    getClearReferencesStopTimerThreads());
            setClassLoaderProperty(<span class="string">"clearReferencesHttpClientKeepAliveThread"</span>,
                    getClearReferencesHttpClientKeepAliveThread());

            <span class="comment">// By calling unbindThread and bindThread in a row, we setup the</span>
            <span class="comment">// current Thread CCL to be the webapp classloader</span>
            unbindThread(oldCCL);
            oldCCL = bindThread();

            <span class="comment">// Initialize logger again. Other components might have used it</span>
            <span class="comment">// too early, so it should be reset.</span>
            logger = <span class="keyword">null</span>;
            getLogger();

            Cluster cluster = getClusterInternal();
            <span class="keyword">if</span> (cluster <span class="keyword">instanceof</span> Lifecycle) {
                ((Lifecycle) cluster).start();
            }
            Realm realm = getRealmInternal();
            <span class="keyword">if</span> (realm <span class="keyword">instanceof</span> Lifecycle) {
                ((Lifecycle) realm).start();
            }

            <span class="comment">// Notify our interested LifecycleListeners</span>
            fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, <span class="keyword">null</span>);

            <span class="comment">// Start our child containers, if not already started</span>
            <span class="keyword">for</span> (Container child : findChildren()) {
                <span class="keyword">if</span> (!child.getState().isAvailable()) {
                    child.start();
                }
            }

            <span class="comment">// Start the Valves in our pipeline (including the basic),</span>
            <span class="comment">// if any</span>
            <span class="keyword">if</span> (pipeline <span class="keyword">instanceof</span> Lifecycle) {
                ((Lifecycle) pipeline).start();
            }

            <span class="comment">// Acquire clustered manager</span>
            Manager contextManager = <span class="keyword">null</span>;
            Manager manager = getManager();
            <span class="keyword">if</span> (manager == <span class="keyword">null</span>) {
                <span class="keyword">if</span> (<span class="built_in">log</span>.isDebugEnabled()) {
                    <span class="built_in">log</span>.debug(sm.getString(<span class="string">"standardContext.cluster.noManager"</span>,
                            Boolean.valueOf((getCluster() != <span class="keyword">null</span>)),
                            Boolean.valueOf(distributable)));
                }
                <span class="keyword">if</span> ( (getCluster() != <span class="keyword">null</span>) &amp;&amp; distributable) {
                    <span class="keyword">try</span> {
                        contextManager = getCluster().createManager(getName());
                    } <span class="keyword">catch</span> (Exception ex) {
                        <span class="built_in">log</span>.error(<span class="string">"standardContext.clusterFail"</span>, ex);
                        ok = <span class="keyword">false</span>;
                    }
                } <span class="keyword">else</span> {
                    contextManager = <span class="keyword">new</span> StandardManager();
                }
            }

            <span class="comment">// Configure default manager if none was specified</span>
            <span class="keyword">if</span> (contextManager != <span class="keyword">null</span>) {
                <span class="keyword">if</span> (<span class="built_in">log</span>.isDebugEnabled()) {
                    <span class="built_in">log</span>.debug(sm.getString(<span class="string">"standardContext.manager"</span>,
                            contextManager.getClass().getName()));
                }
                setManager(contextManager);
            }

            <span class="keyword">if</span> (manager!=<span class="keyword">null</span> &amp;&amp; (getCluster() != <span class="keyword">null</span>) &amp;&amp; distributable) {
                <span class="comment">//let the cluster know that there is a context that is distributable</span>
                <span class="comment">//and that it has its own manager</span>
                getCluster().registerManager(manager);
            }
        }

        <span class="keyword">if</span> (!getConfigured()) {
            <span class="built_in">log</span>.error(sm.getString(<span class="string">"standardContext.configurationFail"</span>));
            ok = <span class="keyword">false</span>;
        }

        <span class="comment">// We put the resources into the servlet context</span>
        <span class="keyword">if</span> (ok)
            getServletContext().setAttribute
                (Globals.RESOURCES_ATTR, getResources());

        <span class="keyword">if</span> (ok ) {
            <span class="keyword">if</span> (getInstanceManager() == <span class="keyword">null</span>) {
                javax.naming.Context context = <span class="keyword">null</span>;
                <span class="keyword">if</span> (isUseNaming() &amp;&amp; getNamingContextListener() != <span class="keyword">null</span>) {
                    context = getNamingContextListener().getEnvContext();
                }
                Map&lt;<span class="keyword">String</span>, Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;&gt; injectionMap = buildInjectionMap(
                        getIgnoreAnnotations() ? <span class="keyword">new</span> NamingResourcesImpl(): getNamingResources());
                setInstanceManager(<span class="keyword">new</span> DefaultInstanceManager(context,
                        injectionMap, <span class="keyword">this</span>, <span class="keyword">this</span>.getClass().getClassLoader()));
                getServletContext().setAttribute(
                        InstanceManager.class.getName(), getInstanceManager());
            }
        }

        <span class="comment">// Create context attributes that will be required</span>
        <span class="keyword">if</span> (ok) {
            getServletContext().setAttribute(
                    JarScanner.class.getName(), getJarScanner());
        }

        <span class="comment">// Set up the context init params</span>
        mergeParameters();

        <span class="comment">// Call ServletContainerInitializers</span>
        <span class="keyword">for</span> (Map.Entry&lt;ServletContainerInitializer, Set&lt;Class&lt;?&gt;&gt;&gt; entry :
            initializers.entrySet()) {
            <span class="keyword">try</span> {
                entry.getKey().onStartup(entry.getValue(),
                        getServletContext());
            } <span class="keyword">catch</span> (ServletException e) {
                <span class="built_in">log</span>.error(sm.getString(<span class="string">"standardContext.sciFail"</span>), e);
                ok = <span class="keyword">false</span>;
                <span class="keyword">break</span>;
            }
        }

        <span class="comment">// Configure and call application event listeners</span>
        <span class="keyword">if</span> (ok) {
            <span class="keyword">if</span> (!listenerStart()) {
                <span class="built_in">log</span>.error(sm.getString(<span class="string">"standardContext.listenerFail"</span>));
                ok = <span class="keyword">false</span>;
            }
        }

        <span class="comment">// Check constraints for uncovered HTTP methods</span>
        <span class="comment">// Needs to be after SCIs and listeners as they may programatically</span>
        <span class="comment">// change constraints</span>
        <span class="keyword">if</span> (ok) {
            checkConstraintsForUncoveredMethods(findConstraints());
        }

        <span class="keyword">try</span> {
            <span class="comment">// Start manager</span>
            Manager manager = getManager();
            <span class="keyword">if</span> (manager <span class="keyword">instanceof</span> Lifecycle) {
                ((Lifecycle) manager).start();
            }
        } <span class="keyword">catch</span>(Exception e) {
            <span class="built_in">log</span>.error(sm.getString(<span class="string">"standardContext.managerFail"</span>), e);
            ok = <span class="keyword">false</span>;
        }

        <span class="comment">// Configure and call application filters</span>
        <span class="keyword">if</span> (ok) {
            <span class="keyword">if</span> (!filterStart()) {
                <span class="built_in">log</span>.error(sm.getString(<span class="string">"standardContext.filterFail"</span>));
                ok = <span class="keyword">false</span>;
            }
        }

        <span class="comment">// Load and initialize all "load on startup" servlets</span>
        <span class="keyword">if</span> (ok) {
            <span class="keyword">if</span> (!loadOnStartup(findChildren())){
                <span class="built_in">log</span>.error(sm.getString(<span class="string">"standardContext.servletFail"</span>));
                ok = <span class="keyword">false</span>;
            }
        }

        <span class="comment">// Start ContainerBackgroundProcessor thread</span>
        <span class="keyword">super</span>.threadStart();
    } <span class="keyword">finally</span> {
        <span class="comment">// Unbinding thread</span>
        unbindThread(oldCCL);
    }

    <span class="comment">// Set available status depending upon startup success</span>
    <span class="keyword">if</span> (ok) {
        <span class="keyword">if</span> (<span class="built_in">log</span>.isDebugEnabled())
            <span class="built_in">log</span>.debug(<span class="string">"Starting completed"</span>);
    } <span class="keyword">else</span> {
        <span class="built_in">log</span>.error(sm.getString(<span class="string">"standardContext.startFailed"</span>, getName()));
    }

    startTime=System.currentTimeMillis();

    <span class="comment">// Send j2ee.state.running notification</span>
    <span class="keyword">if</span> (ok &amp;&amp; (<span class="keyword">this</span>.getObjectName() != <span class="keyword">null</span>)) {
        Notification notification =
            <span class="keyword">new</span> Notification(<span class="string">"j2ee.state.running"</span>, <span class="keyword">this</span>.getObjectName(),
                             sequenceNumber.getAndIncrement());
        broadcaster.sendNotification(notification);
    }

    <span class="comment">// The WebResources implementation caches references to JAR files. On</span>
    <span class="comment">// some platforms these references may lock the JAR files. Since web</span>
    <span class="comment">// application start is likely to have read from lots of JARs, trigger</span>
    <span class="comment">// a clean-up now.</span>
    getResources().gc();

    <span class="comment">// Reinitializing if something went wrong</span>
    <span class="keyword">if</span> (!ok) {
        setState(LifecycleState.FAILED);
    } <span class="keyword">else</span> {
        setState(LifecycleState.STARTING);
    }
}
</code></pre><p>上面代码有点长，主要是做了资源的设置，类加载器的设置，session管理的设置等。当然也启动了pipeline。但是有一点我们需要注意的是，子容器并不是在pipeline的StandardContextValve中传递执行的。那么是在哪里呢？其实就在StandardContext中的startInternal执行的。为什么要这样设计呢？我们发现，这是由于servlet在xml中的顺序决定了启动顺序。<br>接下来有人会不会有另一个疑惑，要是我在server.xml没有配置context，只是放在了webapps目录下面，那么这个context是如何加载的呢？接下来，我就讲讲这个。</p>
<h2 id="四，Context调用时机">四，Context调用时机</h2><p>context可以有2种表现形式，一种是直接写在server.xml文件中，另一种是放在tomcat的webapps目录下。<br>第一种形式已经在前面介绍过了，下面，我们介绍第二中形式。</p>
<h3 id="4-1_Host启动触发监听事件">4.1 Host启动触发监听事件</h3><p>大家还记得否，当我们每次调用LifecycleBase的start方法时，都会调用下面这句：</p>
<blockquote>
<p>setStateInternal(LifecycleState.STARTED, null, false);</p>
</blockquote>
<p>那这句话做了什么工作呢？我们看其源码实现：</p>
<pre><code>LifecycleBase
private synchronized void <span class="built_in">set</span>StateInternal(LifecycleState <span class="keyword">state</span>,
        Object data, boolean check) throws LifecycleException {

    ...//检查状态
    this.<span class="keyword">state</span> = <span class="keyword">state</span>;
    String lifecycleEvent = <span class="keyword">state</span>.getLifecycleEvent();
    if (lifecycleEvent != null) {
        fireLifecycleEvent(lifecycleEvent, data);
    }
}

protected void fireLifecycleEvent(String type, Object data) {
    LifecycleEvent event = new LifecycleEvent(this, type, data);
    LifecycleListener interested[] = listeners;
    <span class="keyword">for</span> (int i = <span class="number">0</span>; i <span class="variable">&lt; interested.length; i++) {
        interested[i].lifecycleEvent(event);
    }
}</span>
</code></pre><p>我们看到，这里会触犯监听器执行感兴趣的事件。那在StandardHost中有哪些监听器呢？</p>
<h3 id="4-2_创建Host监听">4.2 创建Host监听</h3><p>我们要跳到Digester那一块了，大家还记得Digester那块嘛？在Catalina的createStartDigester() 方法中，我们看到下面一句话：</p>
<blockquote>
<p>digester.addRuleSet(new HostRuleSet(“Server/Service/Engine/“));</p>
</blockquote>
<p>那这句话内部干了什么呢？我们看其实现：</p>
<pre><code><span class="type">Digester</span>
public void addRuleSet(<span class="type">RuleSet</span> ruleSet) {

    <span class="type">String</span> oldNamespaceURI = getRuleNamespaceURI();
    <span class="type">String</span> newNamespaceURI = ruleSet.getNamespaceURI();

    setRuleNamespaceURI(newNamespaceURI);
    ruleSet.addRuleInstances(this); <span class="comment">//我们重点看这句</span>
    setRuleNamespaceURI(oldNamespaceURI);
}

<span class="type">HostRuleSet</span>
public void addRuleInstances(<span class="type">Digester</span> digester) {

    digester.addObjectCreate(<span class="keyword">prefix</span> + <span class="string">"Host"</span>,
                             <span class="string">"org.apache.catalina.core.StandardHost"</span>,
                             <span class="string">"className"</span>);
    digester.addSetProperties(<span class="keyword">prefix</span> + <span class="string">"Host"</span>);
    digester.addRule(<span class="keyword">prefix</span> + <span class="string">"Host"</span>,
                     <span class="keyword">new</span> <span class="type">CopyParentClassLoaderRule</span>());

    <span class="comment">//这里创建了HostConfig监听器</span>
    digester.addRule(<span class="keyword">prefix</span> + <span class="string">"Host"</span>,
                     <span class="keyword">new</span> <span class="type">LifecycleListenerRule</span>
                     (<span class="string">"org.apache.catalina.startup.HostConfig"</span>,
                      <span class="string">"hostConfigClass"</span>));
    digester.addSetNext(<span class="keyword">prefix</span> + <span class="string">"Host"</span>,
                        <span class="string">"addChild"</span>,
                        <span class="string">"org.apache.catalina.Container"</span>);

    digester.addCallMethod(<span class="keyword">prefix</span> + <span class="string">"Host/Alias"</span>,
                           <span class="string">"addAlias"</span>, <span class="number">0</span>);

    <span class="comment">//Cluster configuration start</span>
    digester.addObjectCreate(<span class="keyword">prefix</span> + <span class="string">"Host/Cluster"</span>,
                             null, <span class="comment">// MUST be specified in the element</span>
                             <span class="string">"className"</span>);
    digester.addSetProperties(<span class="keyword">prefix</span> + <span class="string">"Host/Cluster"</span>);
    digester.addSetNext(<span class="keyword">prefix</span> + <span class="string">"Host/Cluster"</span>,
                        <span class="string">"setCluster"</span>,
                        <span class="string">"org.apache.catalina.Cluster"</span>);
    <span class="comment">//Cluster configuration end</span>

    digester.addObjectCreate(<span class="keyword">prefix</span> + <span class="string">"Host/Listener"</span>,
                             null, <span class="comment">// MUST be specified in the element</span>
                             <span class="string">"className"</span>);
    digester.addSetProperties(<span class="keyword">prefix</span> + <span class="string">"Host/Listener"</span>);
    digester.addSetNext(<span class="keyword">prefix</span> + <span class="string">"Host/Listener"</span>,
                        <span class="string">"addLifecycleListener"</span>,
                        <span class="string">"org.apache.catalina.LifecycleListener"</span>);

    digester.addRuleSet(<span class="keyword">new</span> <span class="type">RealmRuleSet</span>(<span class="keyword">prefix</span> + <span class="string">"Host/"</span>));

    digester.addObjectCreate(<span class="keyword">prefix</span> + <span class="string">"Host/Valve"</span>,
                             null, <span class="comment">// MUST be specified in the element</span>
                             <span class="string">"className"</span>);
    digester.addSetProperties(<span class="keyword">prefix</span> + <span class="string">"Host/Valve"</span>);
    digester.addSetNext(<span class="keyword">prefix</span> + <span class="string">"Host/Valve"</span>,
                        <span class="string">"addValve"</span>,
                        <span class="string">"org.apache.catalina.Valve"</span>);

}
</code></pre><p>好，在这里我们看到了HostConfig被添加到监听器里面了。那这个HostConfig干了什么呢？我们接下来继续看。</p>
<h3 id="4-3_触发HostConfig调用start方法">4.3 触发HostConfig调用start方法</h3><p>我们看他的lifecycleEvent方法实现：</p>
<pre><code><span class="function">HostConfig
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent <span class="keyword">event</span>)</span> </span>{

    <span class="comment">// Identify the host we are associated with</span>
    <span class="keyword">try</span> {
        host = (Host) <span class="keyword">event</span>.getLifecycle();
        <span class="keyword">if</span> (host instanceof StandardHost) {
            setCopyXML(((StandardHost) host).isCopyXML());
            setDeployXML(((StandardHost) host).isDeployXML());
            setUnpackWARs(((StandardHost) host).isUnpackWARs());
            setContextClass(((StandardHost) host).getContextClass());
        }
    } <span class="keyword">catch</span> (ClassCastException e) {
        log.error(sm.getString(<span class="string">"hostConfig.cce"</span>, <span class="keyword">event</span>.getLifecycle()), e);
        <span class="keyword">return</span>;
    }

    <span class="comment">// Process the event that has occurred</span>
    <span class="keyword">if</span> (<span class="keyword">event</span>.getType().equals(Lifecycle.PERIODIC_EVENT)) {
        check();
    } <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(<span class="keyword">event</span>.getType()</span>.<span class="title">equals</span><span class="params">(Lifecycle.START_EVENT)</span>) </span>{
        start();
    } <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(<span class="keyword">event</span>.getType()</span>.<span class="title">equals</span><span class="params">(Lifecycle.STOP_EVENT)</span>) </span>{
        stop();
    }
}
</code></pre><p>我们看到，当传递了一个Lifecycle.START_EVENT事件时，调用了HostConfig的start方法，接下来，我们继续看start方法：</p>
<pre><code><span class="type">HostConfig</span>
public void start<span class="literal">()</span> {

    <span class="keyword">if</span> (log.isDebugEnabled<span class="literal">()</span>)
        log.debug(sm.getString(<span class="string">"hostConfig.start"</span>));

    <span class="keyword">try</span> {
        <span class="type">ObjectName</span> hostON = host.getObjectName<span class="literal">()</span>;
        oname = <span class="keyword">new</span> <span class="type">ObjectName</span>
            (hostON.getDomain<span class="literal">()</span> + <span class="string">":type=Deployer,host="</span> + host.getName<span class="literal">()</span>);
        <span class="type">Registry</span>.getRegistry(null, null).registerComponent
            (this, oname, this.getClass<span class="literal">()</span>.getName<span class="literal">()</span>);
    } catch (<span class="type">Exception</span> e) {
        log.error(sm.getString(<span class="string">"hostConfig.jmx.register"</span>, oname), e);
    }

    <span class="keyword">if</span> (host.getCreateDirs<span class="literal">()</span>) {
        <span class="type">File</span><span class="literal">[]</span> dirs = <span class="keyword">new</span> <span class="type">File</span><span class="literal">[]</span> {host.getAppBaseFile<span class="literal">()</span>,host.getConfigBaseFile<span class="literal">()</span>};
        <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;dirs.length; i++) {
            <span class="keyword">if</span> (!dirs[i].mkdirs<span class="literal">()</span> &amp;&amp; !dirs[i].isDirectory<span class="literal">()</span>) {
                log.error(sm.getString(<span class="string">"hostConfig.createDirs"</span>,dirs[i]));
            }
        }
    }

    <span class="keyword">if</span> (!host.getAppBaseFile<span class="literal">()</span>.isDirectory<span class="literal">()</span>) {
        log.error(sm.getString(<span class="string">"hostConfig.appBase"</span>, host.getName<span class="literal">()</span>,
                host.getAppBaseFile<span class="literal">()</span>.getPath<span class="literal">()</span>));
        host.setDeployOnStartup(<span class="literal">false</span>);
        host.setAutoDeploy(<span class="literal">false</span>);
    }

    <span class="keyword">if</span> (host.getDeployOnStartup<span class="literal">()</span>)
        deployApps<span class="literal">()</span>;

}
</code></pre><p>start方法首先注册自己的mbean中，然后创建了一个目录，最后部署应用。</p>
<h3 id="4-3_部署应用程序">4.3 部署应用程序</h3><p>HostConfig的start方法做了很多事，前面的我们都不关心，我们只看deployApps方法：</p>
<pre><code><span class="function">HostConfig
<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deployApps</span><span class="params">()</span> </span>{
    <span class="comment">//获取应用路径，即webapps目录</span>
    File appBase = host.getAppBaseFile();
    File configBase = host.getConfigBaseFile();
    String[] filteredAppPaths = filterAppPaths(appBase.<span class="built_in">list</span>());
    <span class="comment">// Deploy XML descriptors from configBase</span>
    deployDescriptors(configBase, configBase.<span class="built_in">list</span>());
    <span class="comment">// Deploy WARs</span>
    deployWARs(appBase, filteredAppPaths);
    <span class="comment">// Deploy expanded folders</span>
    deployDirectories(appBase, filteredAppPaths);
}
</code></pre><p>前面的跟具体功能相关，就不解析了，我们只看最后一段deployDirectories：</p>
<pre><code>    <span class="keyword">protected</span> <span class="keyword">void</span> deployDirectories(File appBase, <span class="keyword">String</span>[] files) {

    <span class="keyword">if</span> (files == <span class="keyword">null</span>)
        <span class="keyword">return</span>;

    ExecutorService es = host.getStartStopExecutor();
    List&lt;Future&lt;?&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();

    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; files.length; i++) {

        <span class="keyword">if</span> (files[i].equalsIgnoreCase(<span class="string">"META-INF"</span>))
            <span class="keyword">continue</span>;
        <span class="keyword">if</span> (files[i].equalsIgnoreCase(<span class="string">"WEB-INF"</span>))
            <span class="keyword">continue</span>;
        File dir = <span class="keyword">new</span> File(appBase, files[i]);
        <span class="keyword">if</span> (dir.isDirectory()) {
            ContextName cn = <span class="keyword">new</span> ContextName(files[i], <span class="keyword">false</span>);

            <span class="keyword">if</span> (isServiced(cn.getName()) || deploymentExists(cn.getName()))
                <span class="keyword">continue</span>;

            results.<span class="built_in">add</span>(es.submit(<span class="keyword">new</span> DeployDirectory(<span class="keyword">this</span>, cn, dir)));
        }
    }

    <span class="keyword">for</span> (Future&lt;?&gt; result : results) {
        <span class="keyword">try</span> {
            result.<span class="built_in">get</span>();
        } <span class="keyword">catch</span> (Exception e) {
            <span class="built_in">log</span>.error(sm.getString(
                    <span class="string">"hostConfig.deployDir.threaded.error"</span>), e);
        }
    }
}
</code></pre><p>我们看到，这里获取到了webapps目录下的所有目录，然后使用线程池进行加载每个子目录。</p>
<h3 id="4-4_DeployDirectory内部实现">4.4 DeployDirectory内部实现</h3><p>由于使用的是线程池，我们看它的run方法：</p>
<pre><code>DeployDirectory
<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{
    config.deployDirectory(cn, dir);
}
</code></pre><p>返回来调用了HostConfig的deployDirectory方法，我们继续跟踪：</p>
<pre><code>HostConfig
<span class="keyword">protected</span> <span class="keyword">void</span> deployDirectory(ContextName cn, <span class="keyword">File</span> dir) {

    Context context = <span class="keyword">null</span>;
    <span class="keyword">File</span> xml = <span class="keyword">new</span> <span class="keyword">File</span>(dir, Constants.ApplicationContextXml);
    <span class="keyword">File</span> xmlCopy =
            <span class="keyword">new</span> <span class="keyword">File</span>(host.getConfigBaseFile(), cn.getBaseName() + <span class="string">".xml"</span>);

    DeployedApplication deployedApp;
    <span class="keyword">boolean</span> copyThisXml = copyXML;
    <span class="comment">//获取web.xml文件，并创建一个Context</span>
    <span class="keyword">try</span> {
        <span class="keyword">if</span> (deployXML &amp;&amp; xml.exists()) {
            <span class="keyword">synchronized</span> (digesterLock) {
                <span class="keyword">try</span> {
                    context = (Context) digester.parse(xml);
                } <span class="keyword">catch</span> (Exception e) {
                    context = <span class="keyword">new</span> FailedContext();
                } <span class="keyword">finally</span> {
                    <span class="keyword">if</span> (context == <span class="keyword">null</span>) {
                        context = <span class="keyword">new</span> FailedContext();
                    }
                    digester.reset();
                }
            }

            ...<span class="comment">//略</span>
        } 
         ....<span class="comment">//略</span>
        <span class="comment">//加载ContextConfig并实例化    </span>
        <span class="keyword">Class</span>&lt;?&gt; clazz = <span class="keyword">Class</span>.forName(host.getConfigClass());
        LifecycleListener listener =
            (LifecycleListener) clazz.newInstance();
        context.addLifecycleListener(listener);

        context.setName(cn.getName());
        context.setPath(cn.getPath());
        context.setWebappVersion(cn.getVersion());
        context.setDocBase(cn.getBaseName());
        <span class="comment">//将Context添加到host中。</span>
        host.addChild(context);
    } <span class="keyword">catch</span> (Throwable t) {
        ExceptionUtils.handleThrowable(t);
        log.error(sm.getString(<span class="string">"hostConfig.deployDir.error"</span>,
                dir.getAbsolutePath()), t);
    } <span class="keyword">finally</span> {
        ...<span class="comment">//略</span>
}
</code></pre><p>在这里，我们发现，创建了一个Context，并将其添加到Host中，就完成了未在server.xml中配置Context也可以启动webapps目录下的工程了。好的，container启动部分就到此结束了，下文将介绍connector启动部分。</p>
<h2 id="五，流程图">五，流程图</h2><p><img src="/img/2015/tomcat8-catalian-start1.png" alt=""><br><img src="/img/2015/tomcat8-catalian-start2.png" alt=""><br><img src="/img/2015/tomcat8-catalian-start3.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一，回顾">一，回顾</h2><p>上文介绍了Server的启动过程，但是没有详细介绍Container和Connector的详细启动流程，下面我将介绍Container的启动流程。</p>
<h2 id="二，Container的init">二，Containe]]>
    </summary>
    
      <category term="tomcat" scheme="http://sqtds.github.io/tags/tomcat/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tomcat8源码阅读(三)--启动二]]></title>
    <link href="http://sqtds.github.io/2015/08/12/2015/tomcat8-sourcecode03/"/>
    <id>http://sqtds.github.io/2015/08/12/2015/tomcat8-sourcecode03/</id>
    <published>2015-08-12T03:59:22.000Z</published>
    <updated>2015-08-15T07:47:05.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一，Catalina启动">一，Catalina启动</h2><p>接上文，BootStart启动后会启动Catalina的start方法：</p>
<pre><code> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{
    <span class="comment">//加载服务    </span>
    <span class="keyword">if</span> (getServer() == <span class="keyword">null</span>) {
        load();
    }
    <span class="comment">//启动服务</span>
    <span class="keyword">try</span> {
        getServer().start();
    } <span class="keyword">catch</span> (LifecycleException e) {
        <span class="keyword">return</span>;
    }
    <span class="comment">// 注册关闭钩子，做一些资源清理处理等。</span>
    <span class="keyword">if</span> (useShutdownHook) {
        <span class="keyword">if</span> (shutdownHook == <span class="keyword">null</span>) {
            shutdownHook = <span class="keyword">new</span> CatalinaShutdownHook();
        }
        Runtime.getRuntime().addShutdownHook(shutdownHook);
    }
    <span class="comment">//监听tomcat关闭事件</span>
    <span class="keyword">if</span> (<span class="keyword">await</span>) {
        <span class="keyword">await</span>();
        stop();
    }
}
</code></pre><p>在代码中我们看到Catalina做了4件事，分别是加载服务配置，启动服务，注册关闭钩子，监听关闭事件。下面我们重点介绍前面2个步骤。</p>
<h2 id="二，Catalina加载配置服务">二，Catalina加载配置服务</h2><p>我们查看load方法：</p>
<pre><code>Catalina
<span class="keyword">public</span> <span class="keyword">void</span> load() {
    <span class="comment">// 初始化命名</span>
    initNaming();

    <span class="comment">// 创建和执行Digester</span>
    Digester digester = createStartDigester();

    InputSource inputSource = <span class="keyword">null</span>;
    InputStream inputStream = <span class="keyword">null</span>;
    <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">null</span>;
    <span class="keyword">try</span> {
        <span class="comment">//读取conf/server.xml文件</span>
        <span class="keyword">file</span> = configFile();
        inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">file</span>);
        inputSource = <span class="keyword">new</span> InputSource(<span class="keyword">file</span>.toURI().toURL().toString());
    } <span class="keyword">catch</span> (Exception e) {
    }
    ...<span class="comment">//略，读取配置文件</span>
    <span class="keyword">try</span> {
        inputSource.setByteStream(inputStream);
        digester.<span class="keyword">push</span>(<span class="keyword">this</span>);
        digester.parse(inputSource);
    } <span class="keyword">catch</span> (SAXParseException spe) {
    } <span class="keyword">finally</span> {
        <span class="keyword">try</span> {
            inputStream.close();
        } <span class="keyword">catch</span> (IOException e) {
            <span class="comment">// Ignore</span>
        }
    }

    getServer().setCatalina(<span class="keyword">this</span>);
    getServer().setCatalinaHome(Bootstrap.getCatalinaHomeFile());
    getServer().setCatalinaBase(Bootstrap.getCatalinaBaseFile());

    <span class="comment">// 初始化server</span>
    <span class="keyword">try</span> {
        getServer().init();
    } <span class="keyword">catch</span> (LifecycleException e) {

    }
}
</code></pre><p>这里我们重点关注createStartDigester()方法，它加载了Server的配置文件。</p>
<pre><code>Catalina
<span class="keyword">protected</span> Digester createStartDigester() {
    <span class="keyword">long</span> t1=System.currentTimeMillis();
    <span class="comment">// Initialize the digester</span>
    Digester digester = <span class="keyword">new</span> Digester();
    digester.setValidating(<span class="keyword">false</span>);
    digester.setRulesValidation(<span class="keyword">true</span>);
    <span class="keyword">HashMap</span>&lt;Class&lt;?&gt;, List&lt;<span class="keyword">String</span>&gt;&gt; fakeAttributes = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();
    ArrayList&lt;<span class="keyword">String</span>&gt; attrs = <span class="keyword">new</span> ArrayList&lt;&gt;();
    attrs.<span class="built_in">add</span>(<span class="string">"className"</span>);
    fakeAttributes.put(<span class="keyword">Object</span>.class, attrs);
    digester.setFakeAttributes(fakeAttributes);
    digester.setUseContextClassLoader(<span class="keyword">true</span>);

    <span class="comment">// Configure the actions we will be using</span>
    digester.addObjectCreate(<span class="string">"Server"</span>,
                             <span class="string">"org.apache.catalina.core.StandardServer"</span>,
                             <span class="string">"className"</span>);
    digester.addSetProperties(<span class="string">"Server"</span>);
    digester.addSetNext(<span class="string">"Server"</span>,
                        <span class="string">"setServer"</span>,
                        <span class="string">"org.apache.catalina.Server"</span>);

    digester.addObjectCreate(<span class="string">"Server/GlobalNamingResources"</span>,
                             <span class="string">"org.apache.catalina.deploy.NamingResourcesImpl"</span>);
    digester.addSetProperties(<span class="string">"Server/GlobalNamingResources"</span>);
    digester.addSetNext(<span class="string">"Server/GlobalNamingResources"</span>,
                        <span class="string">"setGlobalNamingResources"</span>,
                        <span class="string">"org.apache.catalina.deploy.NamingResourcesImpl"</span>);

    digester.addObjectCreate(<span class="string">"Server/Listener"</span>,
                             <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span>
                             <span class="string">"className"</span>);
    digester.addSetProperties(<span class="string">"Server/Listener"</span>);
    digester.addSetNext(<span class="string">"Server/Listener"</span>,
                        <span class="string">"addLifecycleListener"</span>,
                        <span class="string">"org.apache.catalina.LifecycleListener"</span>);

    digester.addObjectCreate(<span class="string">"Server/Service"</span>,
                             <span class="string">"org.apache.catalina.core.StandardService"</span>,
                             <span class="string">"className"</span>);
    digester.addSetProperties(<span class="string">"Server/Service"</span>);
    digester.addSetNext(<span class="string">"Server/Service"</span>,
                        <span class="string">"addService"</span>,
                        <span class="string">"org.apache.catalina.Service"</span>);

    digester.addObjectCreate(<span class="string">"Server/Service/Listener"</span>,
                             <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span>
                             <span class="string">"className"</span>);
    digester.addSetProperties(<span class="string">"Server/Service/Listener"</span>);
    digester.addSetNext(<span class="string">"Server/Service/Listener"</span>,
                        <span class="string">"addLifecycleListener"</span>,
                        <span class="string">"org.apache.catalina.LifecycleListener"</span>);

    <span class="comment">//Executor</span>
    digester.addObjectCreate(<span class="string">"Server/Service/Executor"</span>,
                     <span class="string">"org.apache.catalina.core.StandardThreadExecutor"</span>,
                     <span class="string">"className"</span>);
    digester.addSetProperties(<span class="string">"Server/Service/Executor"</span>);

    digester.addSetNext(<span class="string">"Server/Service/Executor"</span>,
                        <span class="string">"addExecutor"</span>,
                        <span class="string">"org.apache.catalina.Executor"</span>);


    digester.addRule(<span class="string">"Server/Service/Connector"</span>,
                     <span class="keyword">new</span> ConnectorCreateRule());
    digester.addRule(<span class="string">"Server/Service/Connector"</span>,
                     <span class="keyword">new</span> SetAllPropertiesRule(<span class="keyword">new</span> <span class="keyword">String</span>[]{<span class="string">"executor"</span>, <span class="string">"sslImplementationName"</span>}));
    digester.addSetNext(<span class="string">"Server/Service/Connector"</span>,
                        <span class="string">"addConnector"</span>,
                        <span class="string">"org.apache.catalina.connector.Connector"</span>);

    digester.addObjectCreate(<span class="string">"Server/Service/Connector/SSLHostConfig"</span>,
                             <span class="string">"org.apache.tomcat.util.net.SSLHostConfig"</span>);
    digester.addSetProperties(<span class="string">"Server/Service/Connector/SSLHostConfig"</span>);
    digester.addSetNext(<span class="string">"Server/Service/Connector/SSLHostConfig"</span>,
            <span class="string">"addSslHostConfig"</span>,
            <span class="string">"org.apache.tomcat.util.net.SSLHostConfig"</span>);

    digester.addRule(<span class="string">"Server/Service/Connector/SSLHostConfig/Certificate"</span>,
                     <span class="keyword">new</span> CertificateCreateRule());
    digester.addRule(<span class="string">"Server/Service/Connector/SSLHostConfig/Certificate"</span>,
                     <span class="keyword">new</span> SetAllPropertiesRule(<span class="keyword">new</span> <span class="keyword">String</span>[]{<span class="string">"type"</span>}));
    digester.addSetNext(<span class="string">"Server/Service/Connector/SSLHostConfig/Certificate"</span>,
                        <span class="string">"addCertificate"</span>,
                        <span class="string">"org.apache.tomcat.util.net.SSLHostConfigCertificate"</span>);

    digester.addObjectCreate(<span class="string">"Server/Service/Connector/Listener"</span>,
                             <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span>
                             <span class="string">"className"</span>);
    digester.addSetProperties(<span class="string">"Server/Service/Connector/Listener"</span>);
    digester.addSetNext(<span class="string">"Server/Service/Connector/Listener"</span>,
                        <span class="string">"addLifecycleListener"</span>,
                        <span class="string">"org.apache.catalina.LifecycleListener"</span>);

    digester.addObjectCreate(<span class="string">"Server/Service/Connector/UpgradeProtocol"</span>,
                              <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span>
                              <span class="string">"className"</span>);
    digester.addSetProperties(<span class="string">"Server/Service/Connector/UpgradeProtocol"</span>);
    digester.addSetNext(<span class="string">"Server/Service/Connector/UpgradeProtocol"</span>,
                        <span class="string">"addUpgradeProtocol"</span>,
                        <span class="string">"org.apache.coyote.UpgradeProtocol"</span>);

<span class="comment">// Add RuleSets for nested elements</span>
    digester.addRuleSet(<span class="keyword">new</span> NamingRuleSet(<span class="string">"Server/GlobalNamingResources/"</span>));
    digester.addRuleSet(<span class="keyword">new</span> EngineRuleSet(<span class="string">"Server/Service/"</span>));
    digester.addRuleSet(<span class="keyword">new</span> HostRuleSet(<span class="string">"Server/Service/Engine/"</span>));
    digester.addRuleSet(<span class="keyword">new</span> ContextRuleSet(<span class="string">"Server/Service/Engine/Host/"</span>));
    addClusterRuleSet(digester, <span class="string">"Server/Service/Engine/Host/Cluster/"</span>);
    digester.addRuleSet(<span class="keyword">new</span> NamingRuleSet(<span class="string">"Server/Service/Engine/Host/Context/"</span>));

    <span class="comment">// When the 'engine' is found, set the parentClassLoader.</span>
    digester.addRule(<span class="string">"Server/Service/Engine"</span>,
                     <span class="keyword">new</span> SetParentClassLoaderRule(parentClassLoader));
    addClusterRuleSet(digester, <span class="string">"Server/Service/Engine/Cluster/"</span>);

    <span class="keyword">long</span> t2=System.currentTimeMillis();
    <span class="keyword">if</span> (<span class="built_in">log</span>.isDebugEnabled()) {
        <span class="built_in">log</span>.debug(<span class="string">"Digester for server.xml created "</span> + ( t2-t1 ));
    }
    <span class="keyword">return</span> (digester);
}
</code></pre><p>这个有点长，我们可以看到它其实就是针对Server.xml进行了实例化。它的原理是利用sax的DefaultHandler2来解析各个不同的对象。</p>
<h2 id="三，Lifecycle初始化init方法">三，Lifecycle初始化init方法</h2><p>当Server实例化之后，接下来就需要调用它的init方法了。我们看到init实现了Lifecycle的init接口。那么Lifecycle是什么呢？从字面意思来看就是生命周期。它有初始化，启动，停止，销毁等状态。容器里的Server，Service，Engine，Host，Context等都有自己的生命周期。<br>下面我们看看它的init方法。</p>
<h3 id="3-1_LifecycleBase的init">3.1 LifecycleBase的init</h3><pre><code>LifecycleBase
<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>{
    <span class="comment">//检查当前状态</span>
    <span class="keyword">if</span> (!state.equals(LifecycleState.NEW)) {
        invalidTransition(Lifecycle.BEFORE_INIT_EVENT);
    }
    <span class="comment">//生命周期的状态，设置标志位表示当前正在初始化中，状态改变的时候可能会触发监听器做一些事情</span>
    setStateInternal(LifecycleState.INITIALIZING, <span class="keyword">null</span>, <span class="keyword">false</span>);

    <span class="keyword">try</span> {
        initInternal();
    } <span class="keyword">catch</span> (Throwable t) {

    }
    <span class="comment">//生命周期的状态，设置标志位表示当前正在初始化完成</span>
    setStateInternal(LifecycleState.INITIALIZED, <span class="keyword">null</span>, <span class="keyword">false</span>);
}
</code></pre><h3 id="3-2_StandardServer的initInternal">3.2 StandardServer的initInternal</h3><p>我们看initInternal方法：</p>
<pre><code>StandardServer
<span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>{
    <span class="comment">//初始化Mbean服务并注册mbean </span>
    <span class="keyword">super</span>.initInternal();
    <span class="comment">//注册命名服务</span>
    globalNamingResources.init();
    <span class="comment">//初始化Service</span>
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) {
        services[i].init();
    }
}
</code></pre><p>我们可以看到Server接着又初始化了Service的init方法。</p>
<h3 id="3-3_StandardService的initInternal">3.3 StandardService的initInternal</h3><p>StandardService的initInternal主要做的就是初始化Connector和Container。</p>
<pre><code><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>{

    <span class="keyword">super</span>.initInternal();

    <span class="comment">//container初始化</span>
    <span class="keyword">if</span> (container != <span class="keyword">null</span>) {
        container.init();
    }

    <span class="comment">// 初始化Executors</span>
    <span class="keyword">for</span> (Executor executor : findExecutors()) {
        <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> JmxEnabled) {
            ((JmxEnabled) executor).setDomain(getDomain());
        }
        executor.init();
    }

    <span class="comment">// Initialize mapper listener</span>
    mapperListener.init();

    <span class="comment">// Initialize our defined Connectors</span>
    <span class="keyword">synchronized</span> (connectorsLock) {
        <span class="keyword">for</span> (Connector connector : connectors) {
            <span class="keyword">try</span> {
                <span class="comment">//connector初始化</span>
                connector.init();
            } <span class="keyword">catch</span> (Exception e) {
            }
        }
    }
}
</code></pre><p>我们可以看到，一个Service对于一个Container和多个Connector。<br>在server.xml文件中。有2个Connector：</p>
<pre><code> server.xml
&lt;Connector <span class="variable">port=</span><span class="string">"8080"</span> <span class="variable">protocol=</span><span class="string">"HTTP/1.1"</span>
           <span class="variable">connectionTimeout=</span><span class="string">"20000"</span>
           <span class="variable">redirectPort=</span><span class="string">"8443"</span> /&gt;

 &lt;Connector <span class="variable">port=</span><span class="string">"8009"</span> <span class="variable">protocol=</span><span class="string">"AJP/1.3"</span> <span class="variable">redirectPort=</span><span class="string">"8443"</span> /&gt;
</code></pre><p>他们分别接受Http和Ajp协议。由于Container和Connector的初始化流程太长，放到后面讲。</p>
<h2 id="六，启动服务Server">六，启动服务Server</h2><p>初始化所有的节点后，接下来就是启动Server了。我们先看Server的start方法。同样的，Server继承了LifecycleBase的start方法。</p>
<h3 id="6-1_Lifecycle的start">6.1 Lifecycle的start</h3><pre><code>LifecycleBase
public final synchronized void start() throws LifecycleException {

    if (LifecycleState.STARTING_PREP.equals(<span class="keyword">state</span>) ||
            LifecycleState.STARTING.equals(<span class="keyword">state</span>) ||
            LifecycleState.STARTED.equals(<span class="keyword">state</span>)) {

        return;
    }

    if (<span class="keyword">state</span>.equals(LifecycleState.NEW)) {
        init();
    } else if (<span class="keyword">state</span>.equals(LifecycleState.FAILED)){
        stop();
    } else if (!<span class="keyword">state</span>.equals(LifecycleState.INITIALIZED) &amp;&amp;
            !<span class="keyword">state</span>.equals(LifecycleState.STOPPED)) {
        invalidTransition(Lifecycle.BEFORE_START_EVENT);
    }

    <span class="built_in">set</span>StateInternal(LifecycleState.STARTING_PREP, null, false);

    try {
        startInternal();
    } catch (Throwable t) {

    }

    if (<span class="keyword">state</span>.equals(LifecycleState.FAILED) ||
            <span class="keyword">state</span>.equals(LifecycleState.MUST_STOP)) {
        stop();
    } else {
        // Shouldn't be necessary but acts as a check that sub-classes are
        // doing what they are supposed <span class="keyword">to</span>.
        if (!<span class="keyword">state</span>.equals(LifecycleState.STARTING)) {
            invalidTransition(Lifecycle.AFTER_START_EVENT);
        }
        <span class="built_in">set</span>StateInternal(LifecycleState.STARTED, null, false);
    }
}
</code></pre><p>我们看到start会根据当前的状态做判断，我们只看startInternal方法，由于这个方法是个抽象方法，由之类实现，所以接下来我们看Server的startInternal。</p>
<h3 id="6-2_Server的startInternal">6.2 Server的startInternal</h3><pre><code>StandardServer
<span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>{

    fireLifecycleEvent(CONFIGURE_START_EVENT, <span class="keyword">null</span>);
    setState(LifecycleState.STARTING);

    globalNamingResources.start();

    <span class="comment">// Start our defined Services</span>
    <span class="keyword">synchronized</span> (servicesLock) {
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) {
            services[i].start();
        }
    }
}
</code></pre><p>Server的startInternal方法会启动Service的start方法。同样，会触发Service的startInternal方法。</p>
<h3 id="6-3_Service的startInternal">6.3 Service的startInternal</h3><pre><code><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>{
    setState(LifecycleState.STARTING);
    <span class="comment">// Start our defined Container first</span>
    <span class="keyword">if</span> (container != <span class="keyword">null</span>) {
        <span class="keyword">synchronized</span> (container) {
            container.start();
        }
    }

    <span class="keyword">synchronized</span> (executors) {
        <span class="keyword">for</span> (Executor executor: executors) {
            executor.start();
        }
    }

    mapperListener.start();

    <span class="comment">// Start our defined Connectors second</span>
    <span class="keyword">synchronized</span> (connectorsLock) {
        <span class="keyword">for</span> (Connector connector: connectors) {
            <span class="keyword">try</span> {
                <span class="comment">// If it has already failed, don't try and start it</span>
                <span class="keyword">if</span> (connector.getState() != LifecycleState.FAILED) {
                    connector.start();
                }
            } <span class="keyword">catch</span> (Exception e) {
                log.<span class="keyword">error</span>(sm.getString(
                        <span class="string">"standardService.connector.startFailed"</span>,
                        connector), e);
            }
        }
    }
}
</code></pre><p>同样，在这段代码中，也调用了container和connector的start方法。在接下来的文章中，我将详细介绍container和connector的启动方式。</p>
<h2 id="五，流程图">五，流程图</h2><p>说了这么多，没图怎么能行呢？下面就是Boostart到Catalina加载的流程图。<br><img src="/img/2015/tomcat8-bootstarp.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一，Catalina启动">一，Catalina启动</h2><p>接上文，BootStart启动后会启动Catalina的start方法：</p>
<pre><code> <span class="function"><span class="keyword">]]>
    </summary>
    
      <category term="tomcat" scheme="http://sqtds.github.io/tags/tomcat/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tomcat8源码阅读(二)--启动一]]></title>
    <link href="http://sqtds.github.io/2015/08/12/2015/tomcat8-sourcecode02/"/>
    <id>http://sqtds.github.io/2015/08/12/2015/tomcat8-sourcecode02/</id>
    <published>2015-08-12T00:25:49.000Z</published>
    <updated>2015-08-15T06:17:18.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一，前言">一，前言</h2><p>在本文中，我将主要介绍tomcat的启动阶段，包括main方法的运行，配置文件的加载，对象的实例化关联等。</p>
<h2 id="二，Bootstrap的mian">二，Bootstrap的mian</h2><p>当我们调试tomcat的时候，是从Bootstrap的main方法开始启动的。那这个main方法主要做了哪些工作，我们看看内部实现。</p>
<pre><code><span class="keyword">Bootstrap</span>    
public static void main(String <span class="keyword">args</span>[]) {
     <span class="keyword">Bootstrap</span> <span class="keyword">bootstrap</span> = new <span class="keyword">Bootstrap</span>();
     <span class="comment">//初始化</span>
     <span class="keyword">bootstrap</span>.init();
     daemon = <span class="keyword">bootstrap</span>;

    try {
        String command = <span class="string">"start"</span>;
        <span class="keyword">if</span> (<span class="keyword">args</span>.length &gt; 0) {
            command = <span class="keyword">args</span>[<span class="keyword">args</span>.length - 1];
        }
        <span class="keyword">if</span> (command.equals(<span class="string">"startd"</span>)) {
            <span class="keyword">args</span>[<span class="keyword">args</span>.length - 1] = <span class="string">"start"</span>;
            daemon.load(<span class="keyword">args</span>);
            daemon.start();
        } <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stopd"</span>)) {
            <span class="keyword">args</span>[<span class="keyword">args</span>.length - 1] = <span class="string">"stop"</span>;
            daemon.stop();
        } <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"start"</span>)) {
            daemon.setAwait(true);
            daemon.load(<span class="keyword">args</span>);
            daemon.start();
        } <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stop"</span>)) {
            daemon.stopServer(<span class="keyword">args</span>);
        }<span class="keyword">else</span> other ...                 
    } catch (Throwable t) {
        ...<span class="comment">//异常</span>
        System.<span class="keyword">exit</span>(1);
    }

}
</code></pre><p>代码很简单，创建一个Bootstrap，然后初始化init，最后调用start方法启动。</p>
<h2 id="三，init方法">三，init方法</h2><p>那么初始化方法做了什么呢？我们接下来看看：</p>
<pre><code><span class="type">Bootstrap</span>
public <span class="type">void</span> init() throws <span class="type">Exception</span> {
    //初始化类加载器
    initClassLoaders();
    //设置当前上下文类加载器为catalinaLoader
    <span class="type">Thread</span>.currentThread().setContextClassLoader(catalinaLoader);

    ...//略
    <span class="type">Class</span>&lt;?&gt; startupClass =
        catalinaLoader.loadClass
        (<span class="string">"org.apache.catalina.startup.Catalina"</span>);
    //加载类<span class="type">Catalina</span>，并实例化
    <span class="type">Object</span> startupInstance = startupClass.newInstance();
    <span class="type">String</span> methodName = <span class="string">"setParentClassLoader"</span>;
    <span class="type">Class</span>&lt;?&gt; paramTypes[] = new <span class="type">Class</span>[<span class="number">1</span>];
    paramTypes[<span class="number">0</span>] = <span class="type">Class</span>.forName(<span class="string">"java.lang.ClassLoader"</span>);
    <span class="type">Object</span> paramValues[] = new <span class="type">Object</span>[<span class="number">1</span>];
    paramValues[<span class="number">0</span>] = sharedLoader;
    <span class="type">Method</span> <span class="keyword">method</span> =
        startupInstance.getClass().getMethod(methodName, paramTypes);
    //调用<span class="type">Catalina</span>的setParentClassLoader方法设置父类加载器为catalinaLoader
    <span class="keyword">method</span>.invoke(startupInstance, paramValues);

    catalinaDaemon = startupInstance;
}
</code></pre><p>初始化做了2件事，第一件事是初始化类加载器，并设置了线程上下文类加载器。第二件事是初始化Catalina，并设置它的父类加载器为当前线程上下文类加载器。</p>
<h3 id="3-1，初始化类加载器">3.1，初始化类加载器</h3><p>接下来我们就看看类加载器是如何初始化的。</p>
<pre><code>Bootstrap
<span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initClassLoaders</span><span class="params">()</span> </span>{
    <span class="keyword">try</span> {
        commonLoader = createClassLoader(<span class="string">"common"</span>, <span class="keyword">null</span>);
        <span class="keyword">if</span>( commonLoader == <span class="keyword">null</span> ) {
            commonLoader=<span class="keyword">this</span>.getClass().getClassLoader();
        }
        catalinaLoader = createClassLoader(<span class="string">"server"</span>, commonLoader);
        sharedLoader = createClassLoader(<span class="string">"shared"</span>, commonLoader);
    } <span class="keyword">catch</span> (Throwable t) {
        <span class="comment">//....异常</span>
        System.exit(<span class="number">1</span>);
    }
}
</code></pre><p>上面代码创建了3个类加载器，至于这3个的用处，以后再说，我们看是如何实现的。</p>
<pre><code><span class="keyword">private</span> ClassLoader createClassLoader(<span class="keyword">String</span> name, ClassLoader parent)
    <span class="keyword">throws</span> Exception {

    <span class="keyword">String</span> value = CatalinaProperties.getProperty(name + <span class="string">".loader"</span>);<span class="comment">//第一处</span>
    <span class="keyword">if</span> ((value == <span class="keyword">null</span>) || (value.equals(<span class="string">""</span>)))
        <span class="keyword">return</span> parent;

    value = replace(value);

    List&lt;Repository&gt; repositories = <span class="keyword">new</span> ArrayList&lt;&gt;();

    <span class="keyword">String</span>[] repositoryPaths = getPaths(value);

    <span class="keyword">for</span> (<span class="keyword">String</span> repository : repositoryPaths) {
        <span class="comment">// Check for a JAR URL repository</span>
        <span class="keyword">try</span> {
            @SuppressWarnings(<span class="string">"unused"</span>)
            URL url = <span class="keyword">new</span> URL(repository);
            repositories.<span class="built_in">add</span>(
                    <span class="keyword">new</span> Repository(repository, RepositoryType.URL));
            <span class="keyword">continue</span>;
        } <span class="keyword">catch</span> (MalformedURLException e) {
            <span class="comment">// Ignore</span>
        }

        <span class="comment">// Local repository</span>
        <span class="keyword">if</span> (repository.endsWith(<span class="string">"*.jar"</span>)) {
            repository = repository.substring
                (<span class="number">0</span>, repository.length() - <span class="string">"*.jar"</span>.length());
            repositories.<span class="built_in">add</span>(
                    <span class="keyword">new</span> Repository(repository, RepositoryType.GLOB));
        } <span class="keyword">else</span> <span class="keyword">if</span> (repository.endsWith(<span class="string">".jar"</span>)) {
            repositories.<span class="built_in">add</span>(
                    <span class="keyword">new</span> Repository(repository, RepositoryType.JAR));
        } <span class="keyword">else</span> {
            repositories.<span class="built_in">add</span>(
                    <span class="keyword">new</span> Repository(repository, RepositoryType.DIR));
        }
    }

    <span class="keyword">return</span> ClassLoaderFactory.createClassLoader(repositories, parent);
}
</code></pre><p>我们看上面代码第一处，从属性文件中获取值。<br>我们打开conf/catalina.properties文件，发现</p>
<pre><code>catalina.properties
common.<span class="variable">loader=</span><span class="string">"<span class="subst">${catalina.base}</span>/lib"</span>,<span class="string">"<span class="subst">${catalina.base}</span>/lib/*.jar"</span>,<span class="string">"<span class="subst">${catalina.home}</span>/lib"</span>,<span class="string">"<span class="subst">${catalina.home}</span>/lib/*.jar"</span>
server.<span class="variable">loader=</span>
shared.<span class="variable">loader=</span>
</code></pre><p>只有common.loader才有值，表示加载的是tomcatlib目录下的jar包。由于server.loader和shared.loader为空，catalinaLoader和sharedLoader都会引用的commonLoader。<br>最后我们看具体的创建过程，即ClassLoaderFactory.createClassLoader（repositories, parent）方法。</p>
<pre><code>    <span class="keyword">public</span> <span class="keyword">static</span> ClassLoader createClassLoader(List&lt;Repository&gt; repositories,
                                            <span class="keyword">final</span> ClassLoader parent)
    <span class="keyword">throws</span> Exception {
    Set&lt;URL&gt; <span class="built_in">set</span> = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();
    <span class="keyword">if</span> (repositories != <span class="keyword">null</span>) {
        <span class="keyword">for</span> (Repository repository : repositories)  {
            ...<span class="comment">//略去其他类型</span>
            File directory = <span class="keyword">new</span> File(repository.getLocation());
            directory = directory.getCanonicalFile();
            <span class="keyword">if</span> (!validateFile(directory, RepositoryType.DIR)) {
                <span class="keyword">continue</span>;
            }
            URL url = directory.toURI().toURL();
            <span class="keyword">if</span> (<span class="built_in">log</span>.isDebugEnabled())
                <span class="built_in">log</span>.debug(<span class="string">"  Including directory "</span> + url);
            <span class="built_in">set</span>.<span class="built_in">add</span>(url);
        }
    }

    <span class="comment">// Construct the class loader itself</span>
    <span class="keyword">final</span> URL[] array = <span class="built_in">set</span>.toArray(<span class="keyword">new</span> URL[<span class="built_in">set</span>.<span class="built_in">size</span>()]);

    <span class="keyword">return</span> AccessController.doPrivileged(
            <span class="keyword">new</span> PrivilegedAction&lt;URLClassLoader&gt;() {
                @Override
                <span class="keyword">public</span> URLClassLoader run() {
                    <span class="keyword">if</span> (parent == <span class="keyword">null</span>)
                        <span class="keyword">return</span> <span class="keyword">new</span> URLClassLoader(array);
                    <span class="keyword">else</span>
                        <span class="keyword">return</span> <span class="keyword">new</span> URLClassLoader(array, parent);
                }
            });
}
</code></pre><p>最后我们从代码中可以看到，生成了一个URLClassLoader加载器。记得tomcat6的时候这里生成的StandardClassLoader，看来StandardClassLoader没啥作用，在后面的tomcat中移除了。</p>
<h2 id="3-2，初始化Catalina">3.2，初始化Catalina</h2><p>初始化Catalina用反射即可，不多说了。</p>
<h2 id="四，start启动">四，start启动</h2><p>初始化完成之后，就可以启动了。我们看看启动start方法。</p>
<pre><code><span class="type">Bootstrap</span>
//设置等待标志，为关闭做准备，暂时不关注
daemon.setAwait(<span class="literal">true</span>);
//加载参数，无参数，暂时不关注
daemon.load(args);
//启动
daemon.start();

public <span class="type">void</span> start()
    throws <span class="type">Exception</span> {
    <span class="keyword">if</span>( catalinaDaemon==null ) init();
    <span class="type">Method</span> <span class="keyword">method</span> = catalinaDaemon.getClass().getMethod(<span class="string">"start"</span>, (<span class="type">Class</span> [] )null);
    <span class="keyword">method</span>.invoke(catalinaDaemon, (<span class="type">Object</span> [])null);
}
</code></pre><p>start方法很简单，利用反射调用了catalina的start方法。<br>Catalina的start方法做了哪些事情呢？我们下文继续。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一，前言">一，前言</h2><p>在本文中，我将主要介绍tomcat的启动阶段，包括main方法的运行，配置文件的加载，对象的实例化关联等。</p>
<h2 id="二，Bootstrap的mian">二，Bootstrap的mian</h2><p>当我们调试t]]>
    </summary>
    
      <category term="tomcat" scheme="http://sqtds.github.io/tags/tomcat/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tomcat8源码阅读(一)--准备]]></title>
    <link href="http://sqtds.github.io/2015/08/11/2015/tomcat8-sourcecode01/"/>
    <id>http://sqtds.github.io/2015/08/11/2015/tomcat8-sourcecode01/</id>
    <published>2015-08-11T07:51:00.000Z</published>
    <updated>2015-08-12T00:27:31.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一，前言">一，前言</h2><p>以前看过《how tomcat works》，那时候是以tomcat5.0为基础进行讲解的。现在有必要进行巩固下，更深入的了解tomcat的运行机制，也了解下tomcat6的nio方式,及最新的tomcat变化。本来最开始想研究的是tomcat7，看到市面上有很多人已经研究了，那索性来看看8。</p>
<h2 id="二，搭建源码包">二，搭建源码包</h2><p>其实tomcat7和tomcat8搭建方式都差不多，2者本质上并无太大差异。<br>我们可以参考<a href="http://developer.51cto.com/art/201207/346156.htm" target="_blank" rel="external">Tomcat7调试运行环境搭建与源代码分析入门</a>的方法进行tomcat8的搭建。<br>搭建比较简单，我也备份了一份到github上<a href="https://github.com/sqtds/tomcat8。" target="_blank" rel="external">https://github.com/sqtds/tomcat8。</a> 如果觉得搭建麻烦，可以直接下载使用我的即可。</p>
<h2 id="三，tomcat8整体架构">三，tomcat8整体架构</h2><p>参考我的wiki页面<a href="https://github.com/sqtds/tomcat8/wiki，这里不不多说了。" target="_blank" rel="external">https://github.com/sqtds/tomcat8/wiki，这里不不多说了。</a><br>本文主要研究的是tomcat的catalina架构，其他有时间再进行研究。</p>
<h2 id="四，参考指南">四，参考指南</h2><ul>
<li>how tomcat works ——不说了，大名鼎鼎的，读源码都是从它开始</li>
<li><a href="http://tyrion.iteye.com/category/285081" target="_blank" rel="external">Tomcat7源码分析</a>——分析的挺多，还不错</li>
<li><a href="http://www.infoq.com/cn/articles/zh-tomcat-http-request-1/" target="_blank" rel="external">Tomcat处理HTTP请求源码分析（上）</a>，<a href="http://www.infoq.com/cn/articles/zh-tomcat-http-request-2/" target="_blank" rel="external">Tomcat处理HTTP请求源码分析（下）</a>——分析了http的请求</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一，前言">一，前言</h2><p>以前看过《how tomcat works》，那时候是以tomcat5.0为基础进行讲解的。现在有必要进行巩固下，更深入的了解tomcat的运行机制，也了解下tomcat6的nio方式,及最新的tomcat变化。本来最开始想研究]]>
    </summary>
    
      <category term="tomcat" scheme="http://sqtds.github.io/tags/tomcat/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hessian协议解析--hessian反序列化]]></title>
    <link href="http://sqtds.github.io/2015/08/10/2015/hessian-2/"/>
    <id>http://sqtds.github.io/2015/08/10/2015/hessian-2/</id>
    <published>2015-08-10T13:31:16.000Z</published>
    <updated>2015-08-10T14:25:18.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一，前言">一，前言</h2><p>上篇文章我们介绍了hessian的序列化机制，那么，它是怎么反序列化的呢，我们接下来看看。</p>
<h2 id="二，常规反序列化">二，常规反序列化</h2><p>反序列化比较简单，在上一文的最后，hessian已经定义了第一个字节不同的数字代表的不同的含义。那么，我们根据这些数字进行反解即可。例如，我们遇到第一个字节为’N’的，即表示空。在x00 - x1f之间，表示长度在32之内的字符串。在x80 - xbf表示-x10到x3f之间的整数等等。好了，不多说了，直接上代码。<a id="more"></a></p>
<pre><code>Hessian2Input
<span class="keyword">public</span> <span class="function">Object <span class="title">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{
    <span class="keyword">int</span> tag = _offset &lt; _length ? (_buffer[_offset++] &amp; <span class="number">0xff</span>) : read();

    <span class="keyword">switch</span> (tag) {
    <span class="keyword">case</span> <span class="string">'N'</span>:
        <span class="keyword">return</span> <span class="keyword">null</span>;

    <span class="keyword">case</span> <span class="string">'T'</span>:
        <span class="keyword">return</span> Boolean.valueOf(<span class="keyword">true</span>);

    <span class="keyword">case</span> <span class="string">'F'</span>:
        <span class="keyword">return</span> Boolean.valueOf(<span class="keyword">false</span>);

        <span class="comment">// direct integer</span>
    <span class="keyword">case</span> <span class="number">0x80</span>:
    ....//略
    <span class="keyword">case</span> 0xbf:
        <span class="keyword">return</span> Integer.valueOf(tag - BC_INT_ZERO);

        <span class="comment">/* byte int */</span>
    <span class="keyword">case</span> <span class="number">0xc0</span>:
    ....//略
    <span class="keyword">case</span> 0xcf:
        <span class="keyword">return</span> Integer.valueOf(((tag - BC_INT_BYTE_ZERO) &lt;&lt; 8) + read());

        <span class="comment">/* short int */</span>
    <span class="keyword">case</span> <span class="number">0xd0</span>:
    <span class="keyword">case</span> 0xd1:
    <span class="keyword">case</span> 0xd2:
    <span class="keyword">case</span> 0xd3:
    <span class="keyword">case</span> 0xd4:
    <span class="keyword">case</span> 0xd5:
    <span class="keyword">case</span> 0xd6:
    <span class="keyword">case</span> 0xd7:
        <span class="keyword">return</span> Integer.valueOf(((tag - BC_INT_SHORT_ZERO) &lt;&lt; 16) + 256
                * read() + read());

    <span class="keyword">case</span> <span class="string">'I'</span>:
        <span class="keyword">return</span> Integer.valueOf(parseInt());

        <span class="comment">// direct long</span>
    <span class="keyword">case</span> <span class="number">0xd8</span>:
    ...//略
    <span class="keyword">case</span> 0xef:
        <span class="keyword">return</span> Long.valueOf(tag - BC_LONG_ZERO);

        <span class="comment">/* byte long */</span>
    <span class="keyword">case</span> <span class="number">0xf0</span>:
    ...//略
    <span class="keyword">case</span> 0xff:
        <span class="keyword">return</span> Long.valueOf(((tag - BC_LONG_BYTE_ZERO) &lt;&lt; 8) + read());

        <span class="comment">/* short long */</span>
    <span class="keyword">case</span> <span class="number">0x38</span>:
    <span class="keyword">case</span> 0x39:
    <span class="keyword">case</span> 0x3a:
    <span class="keyword">case</span> 0x3b:
    <span class="keyword">case</span> 0x3c:
    <span class="keyword">case</span> 0x3d:
    <span class="keyword">case</span> 0x3e:
    <span class="keyword">case</span> 0x3f:
        <span class="keyword">return</span> Long.valueOf(((tag - BC_LONG_SHORT_ZERO) &lt;&lt; 16) + 256
                * read() + read());

    <span class="keyword">case</span> BC_LONG_INT:
        <span class="keyword">return</span> Long.valueOf(parseInt());

    <span class="keyword">case</span> <span class="string">'L'</span>:
        <span class="keyword">return</span> Long.valueOf(parseLong());

    <span class="keyword">case</span> BC_DOUBLE_ZERO:
        <span class="keyword">return</span> Double.valueOf(0);

    <span class="keyword">case</span> BC_DOUBLE_ONE:
        <span class="keyword">return</span> Double.valueOf(1);

    <span class="keyword">case</span> BC_DOUBLE_BYTE:
        <span class="keyword">return</span> Double.valueOf((<span class="keyword">byte</span>) read());

    <span class="keyword">case</span> BC_DOUBLE_SHORT:
        <span class="keyword">return</span> Double.valueOf((<span class="keyword">short</span>) (256 * read() + read()));

    <span class="keyword">case</span> BC_DOUBLE_MILL: {
        <span class="keyword">int</span> mills = parseInt();

        <span class="function"><span class="keyword">return</span> Double.<span class="title">valueOf</span><span class="params">(<span class="number">0.001</span> * mills)</span></span>;
    }

    <span class="keyword">case</span> <span class="string">'D'</span>:
        <span class="keyword">return</span> Double.valueOf(parseDouble());

    <span class="keyword">case</span> BC_DATE:
        <span class="keyword">return</span> <span class="keyword">new</span> Date(parseLong());

    <span class="keyword">case</span> BC_DATE_MINUTE:
        <span class="keyword">return</span> <span class="keyword">new</span> Date(parseInt() * 60000L);

    <span class="keyword">case</span> BC_STRING_CHUNK:
    <span class="keyword">case</span> 'S': {
        _isLastChunk = tag == <span class="string">'S'</span>;
        _chunkLength = (read() &lt;&lt; <span class="number">8</span>) + read();

        <span class="keyword">int</span> data;
        _sbuf.setLength(<span class="number">0</span>);

        <span class="keyword">while</span> ((data = parseChar()) &gt;= <span class="number">0</span>)
            _sbuf.append((<span class="keyword">char</span>) data);

        <span class="function"><span class="keyword">return</span> _sbuf.<span class="title">toString</span><span class="params">()</span></span>;
    }

    <span class="keyword">case</span> <span class="number">0x00</span>:
    ...//略
    <span class="keyword">case</span> 0x1f: {
        _isLastChunk = <span class="keyword">true</span>;
        _chunkLength = tag - <span class="number">0x00</span>;

        <span class="keyword">int</span> data;
        _sbuf.setLength(<span class="number">0</span>);

        <span class="keyword">while</span> ((data = parseChar()) &gt;= <span class="number">0</span>)
            _sbuf.append((<span class="keyword">char</span>) data);

        <span class="function"><span class="keyword">return</span> _sbuf.<span class="title">toString</span><span class="params">()</span></span>;
    }

    <span class="keyword">case</span> <span class="number">0x30</span>:
    <span class="keyword">case</span> 0x31:
    <span class="keyword">case</span> 0x32:
    <span class="keyword">case</span> 0x33: {
        _isLastChunk = <span class="keyword">true</span>;
        _chunkLength = (tag - <span class="number">0x30</span>) * <span class="number">256</span> + read();

        _sbuf.setLength(<span class="number">0</span>);

        <span class="keyword">int</span> ch;
        <span class="keyword">while</span> ((ch = parseChar()) &gt;= <span class="number">0</span>)
            _sbuf.append((<span class="keyword">char</span>) ch);

        <span class="function"><span class="keyword">return</span> _sbuf.<span class="title">toString</span><span class="params">()</span></span>;
    }

    <span class="keyword">case</span> BC_BINARY_CHUNK:
    <span class="keyword">case</span> 'B': {
        _isLastChunk = tag == <span class="string">'B'</span>;
        _chunkLength = (read() &lt;&lt; <span class="number">8</span>) + read();

        <span class="keyword">int</span> data;
        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();

        <span class="keyword">while</span> ((data = parseByte()) &gt;= <span class="number">0</span>)
            bos.write(data);

        <span class="function"><span class="keyword">return</span> bos.<span class="title">toByteArray</span><span class="params">()</span></span>;
    }

    <span class="keyword">case</span> <span class="number">0x20</span>:
    ...//略
    <span class="keyword">case</span> 0x2f: {
        _isLastChunk = <span class="keyword">true</span>;
        <span class="keyword">int</span> len = tag - <span class="number">0x20</span>;
        _chunkLength = <span class="number">0</span>;

        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[len];

        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)
            data[i] = (<span class="keyword">byte</span>) read();

        <span class="keyword">return</span> data;
    }

    <span class="keyword">case</span> <span class="number">0x34</span>:
    <span class="keyword">case</span> 0x35:
    <span class="keyword">case</span> 0x36:
    <span class="keyword">case</span> 0x37: {
        _isLastChunk = <span class="keyword">true</span>;
        <span class="keyword">int</span> len = (tag - <span class="number">0x34</span>) * <span class="number">256</span> + read();
        _chunkLength = <span class="number">0</span>;

        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[len];

        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {
            buffer[i] = (<span class="keyword">byte</span>) read();
        }

        <span class="keyword">return</span> buffer;
    }

    <span class="keyword">case</span> BC_LIST_VARIABLE: {
        <span class="comment">// variable length list</span>
        String type = readType();

        <span class="keyword">return</span> findSerializerFactory().readList(<span class="keyword">this</span>, -<span class="number">1</span>, type);
    }

    <span class="keyword">case</span> BC_LIST_VARIABLE_UNTYPED: {
        <span class="keyword">return</span> findSerializerFactory().readList(<span class="keyword">this</span>, -<span class="number">1</span>, <span class="keyword">null</span>);
    }

    <span class="keyword">case</span> BC_LIST_FIXED: {
        <span class="comment">// fixed length lists</span>
        String type = readType();
        <span class="keyword">int</span> length = readInt();

        Deserializer reader;
        reader = findSerializerFactory().getListDeserializer(type, <span class="keyword">null</span>);

        <span class="function"><span class="keyword">return</span> reader.<span class="title">readLengthList</span><span class="params">(<span class="keyword">this</span>, length)</span></span>;
    }

    <span class="keyword">case</span> BC_LIST_FIXED_UNTYPED: {
        <span class="comment">// fixed length lists</span>
        <span class="keyword">int</span> length = readInt();

        Deserializer reader;
        reader = findSerializerFactory().getListDeserializer(<span class="keyword">null</span>, <span class="keyword">null</span>);

        <span class="function"><span class="keyword">return</span> reader.<span class="title">readLengthList</span><span class="params">(<span class="keyword">this</span>, length)</span></span>;
    }

        <span class="comment">// compact fixed list</span>
    <span class="keyword">case</span> <span class="number">0x70</span>:
    <span class="keyword">case</span> 0x71:
    <span class="keyword">case</span> 0x72:
    <span class="keyword">case</span> 0x73:
    <span class="keyword">case</span> 0x74:
    <span class="keyword">case</span> 0x75:
    <span class="keyword">case</span> 0x76:
    <span class="keyword">case</span> 0x77: {
        <span class="comment">// fixed length lists</span>
        String type = readType();
        <span class="keyword">int</span> length = tag - <span class="number">0x70</span>;

        Deserializer reader;
        reader = findSerializerFactory().getListDeserializer(type, <span class="keyword">null</span>);

        <span class="function"><span class="keyword">return</span> reader.<span class="title">readLengthList</span><span class="params">(<span class="keyword">this</span>, length)</span></span>;
    }

        <span class="comment">// compact fixed untyped list</span>
    <span class="keyword">case</span> <span class="number">0x78</span>:
    <span class="keyword">case</span> 0x79:
    <span class="keyword">case</span> 0x7a:
    <span class="keyword">case</span> 0x7b:
    <span class="keyword">case</span> 0x7c:
    <span class="keyword">case</span> 0x7d:
    <span class="keyword">case</span> 0x7e:
    <span class="keyword">case</span> 0x7f: {
        <span class="comment">// fixed length lists</span>
        <span class="keyword">int</span> length = tag - <span class="number">0x78</span>;

        Deserializer reader;
        reader = findSerializerFactory().getListDeserializer(<span class="keyword">null</span>, <span class="keyword">null</span>);

        <span class="function"><span class="keyword">return</span> reader.<span class="title">readLengthList</span><span class="params">(<span class="keyword">this</span>, length)</span></span>;
    }

    <span class="keyword">case</span> <span class="string">'H'</span>: {
      String type = GenericTypeUtil.getCurrentGenericType()==<span class="keyword">null</span>?<span class="keyword">null</span>:GenericTypeUtil.getCurrentGenericType().getName();<span class="comment">//added by lG 2010-5-9</span>
      <span class="keyword">return</span> findSerializerFactory().readMap(<span class="keyword">this</span>, type);
</code></pre><p>//          return findSerializerFactory().readMap(this,null);<br>        }</p>
<pre><code>    <span class="keyword">case</span> 'M': {
        <span class="type">String</span> <span class="keyword">type</span> = readType();

        <span class="keyword">return</span> findSerializerFactory().readMap(this, <span class="keyword">type</span>);
    }

    <span class="keyword">case</span> 'C': {
        readObjectDefinition(null);

        <span class="keyword">return</span> readObject();
    }

    <span class="keyword">case</span> <span class="number">0x60</span>:
    ...//略
    <span class="keyword">case</span> <span class="number">0x6f</span>: {
        <span class="type">int</span> <span class="keyword">ref</span> = tag - <span class="number">0x60</span>;

        <span class="keyword">if</span> (_classDefs.size() &lt;= <span class="keyword">ref</span>)
            throw error(<span class="string">"No classes defined at reference '"</span>
                    + <span class="type">Integer</span>.toHexString(tag) + <span class="string">"'"</span>);

        <span class="type">ObjectDefinition</span> def = _classDefs.get(<span class="keyword">ref</span>);

        <span class="keyword">return</span> readObjectInstance(null, def);
    }

    <span class="keyword">case</span> 'O': {
        <span class="type">int</span> <span class="keyword">ref</span> = readInt();

        <span class="keyword">if</span> (_classDefs.size() &lt;= <span class="keyword">ref</span>)
            throw error(<span class="string">"Illegal object reference #"</span> + <span class="keyword">ref</span>);

        <span class="type">ObjectDefinition</span> def = _classDefs.get(<span class="keyword">ref</span>);

        <span class="keyword">return</span> readObjectInstance(null, def);
    }

    <span class="keyword">case</span> <span class="type">BC_REF</span>: {
        <span class="type">int</span> <span class="keyword">ref</span> = readInt();

        <span class="keyword">return</span> _refs.get(<span class="keyword">ref</span>);
    }

    default:
        <span class="keyword">if</span> (tag &lt; <span class="number">0</span>)
            throw new <span class="type">EOFException</span>(<span class="string">"readObject: unexpected end of file"</span>);
        <span class="keyword">else</span>
            throw error(<span class="string">"readObject: unknown code "</span> + codeName(tag));
    }
}
</code></pre><h2 id="引用反序列化">引用反序列化</h2><p>在上篇文章中，我们是否记得，当我们遇到相同的引用对象时，直接写入了x51+引用对象所在的位置。<br>那么，我们如何在反序列化的时候找到所对应的引用呢？</p>
<p>我们看序列化时的引用处理逻辑：</p>
<pre><code>public boolean addRef(<span class="type">Object</span> <span class="keyword">object</span>)
  throws <span class="type">IOException</span>
{ //拿到引用map的大小，即新对象放在map中的value
  <span class="type">int</span> newRef = _refs.size();
  //将<span class="keyword">object</span>放到引用map中，如果不存在，则新增，返回新增的value，
  //否者，将返回与<span class="keyword">object</span>相同引用的value
  <span class="type">int</span> <span class="keyword">ref</span> = _refs.put(<span class="keyword">object</span>, newRef, <span class="literal">false</span>);
  //如果引用值不相等，则表示查找到引用
  <span class="keyword">if</span> (<span class="keyword">ref</span> != newRef) {
    //写引用标记
    writeRef(<span class="keyword">ref</span>);
    <span class="keyword">return</span> <span class="literal">true</span>;
  }
  <span class="keyword">else</span> {
    <span class="keyword">return</span> <span class="literal">false</span>;
  }
}
</code></pre><p>即每次生成一个对象时，它在map中映射的值都会加1，除非遇到相同的引用对象。<br>然后我们再看看反序列化的时候如何处理：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">Object</span> readRef() <span class="keyword">throws</span> IOException {
    <span class="keyword">return</span> _refs.<span class="built_in">get</span>(parseInt());
}
</code></pre><p>很简单的一句话，根据当前的引用列表_refs获取对应的引用对象。那这个_refs是怎么生成的呢，我们接着UnsafeDeserializer中查看：</p>
<pre><code> <span class="type">UnsafeDeserializer</span>
 public <span class="type">Object</span> readObject(<span class="type">AbstractHessianInput</span> <span class="keyword">in</span>,
                           <span class="type">Object</span> obj,
                           <span class="type">FieldDeserializer</span> []fields)
    throws <span class="type">IOException</span>
  {
    <span class="keyword">try</span> {
      //先将实例化对象添加到引用中
      <span class="type">int</span> <span class="keyword">ref</span> = <span class="keyword">in</span>.addRef(obj);
      //反序列化对象的字段
      <span class="keyword">for</span> (<span class="type">FieldDeserializer</span> reader : fields) {
        reader.deserialize(<span class="keyword">in</span>, obj);
      }
      //调用readResolve方法
      <span class="type">Object</span> resolve = resolve(<span class="keyword">in</span>, obj);
       //最后设置到引用中
      <span class="keyword">if</span> (obj != resolve)
        <span class="keyword">in</span>.setRef(<span class="keyword">ref</span>, resolve);

      <span class="keyword">return</span> resolve;
    } catch (<span class="type">IOException</span> e) {
      throw e;
    } catch (<span class="type">Exception</span> e) {
      throw new <span class="type">IOExceptionWrapper</span>(obj.getClass().getName() + <span class="string">":"</span> + e, e);
    }
  }

//<span class="type">Hessian2Input</span>  添加一个引用
public <span class="type">int</span> addRef(<span class="type">Object</span> <span class="keyword">ref</span>) {
    _refs.add(<span class="keyword">ref</span>);
    <span class="keyword">return</span> _refs.size() - <span class="number">1</span>;
}
</code></pre><p>我们可以看到，假设有如下对象</p>
<pre><code><span class="class"><span class="keyword">Class</span> <span class="title">A</span>{</span>
  <span class="class"><span class="keyword">Class</span> <span class="title">B</span>;</span>
  <span class="class"><span class="keyword">Class</span> <span class="title">C</span>;</span>
}
<span class="class"><span class="keyword">Class</span> <span class="title">B</span>{</span>
   <span class="class"><span class="keyword">Class</span> <span class="title">A</span>;</span>
} 
C c = <span class="keyword">new</span> C();
B b = <span class="keyword">new</span> B();
A a = <span class="keyword">new</span> A(b,c);
b.setA(a);
</code></pre><p>序列化a时，首先map中添加a:0,接着b:1,然后在流中添加‘Q’+0（引用标志位于引用位置）,接着c:2。<br>反序列化的时候，首先添加list中添加a,然后添加b,将b设置到a上,接着获取引用a，然后添加c，将c设置到a上，最后判断是否有readResolve方法，如果有，替换引用对象。<br>不知道大家发现这里会有一个bug产生没？当readResolve存在的时候，当外围存在一个d引用a时，b设置的引用跟c设置的引用会存在不一致的情况。</p>
<h2 id="三，总结">三，总结</h2><p>总体来说，hessian序列化机制还是非常巧妙的，用前8位(一个字节)表示了不同的含义，然后再分情况解析。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一，前言">一，前言</h2><p>上篇文章我们介绍了hessian的序列化机制，那么，它是怎么反序列化的呢，我们接下来看看。</p>
<h2 id="二，常规反序列化">二，常规反序列化</h2><p>反序列化比较简单，在上一文的最后，hessian已经定义了第一个字节不同的数字代表的不同的含义。那么，我们根据这些数字进行反解即可。例如，我们遇到第一个字节为’N’的，即表示空。在x00 - x1f之间，表示长度在32之内的字符串。在x80 - xbf表示-x10到x3f之间的整数等等。好了，不多说了，直接上代码。]]>
    
    </summary>
    
      <category term="java" scheme="http://sqtds.github.io/tags/java/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hessian协议解析--hessian序列化]]></title>
    <link href="http://sqtds.github.io/2015/08/08/2015/hessian-1/"/>
    <id>http://sqtds.github.io/2015/08/08/2015/hessian-1/</id>
    <published>2015-08-08T03:12:08.000Z</published>
    <updated>2015-08-10T13:35:25.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一，前言">一，前言</h2><p>本文主要介绍hessian的解析协议，通过理解hessian协议以便于知道它的优劣，从而更好的运用它。Hessian序列化的协议可以在官方文档上找到 <a href="http://hessian.caucho.com/doc/hessian-serialization.html" target="_blank" rel="external">Hessian 2.0 Serialization Protocol</a></p>
<h2 id="二，基本类型序列化">二，基本类型序列化</h2><p>我们先从最简单的看起，int是如何序列化的。首先我们看官方文档定义。</p>
<pre><code>           <span class="comment"># 32-bit signed integer</span>
int        <span class="type-annotation">::</span>= <span class="char">'I'</span> b3 b2 b1 b0
           <span class="type-annotation">::</span>= [x80-xbf]             <span class="comment"># -x10 to x3f  -16到63之间</span>
           <span class="type-annotation">::</span>= [xc0-xcf] b0          <span class="comment"># -x800 to x7ff  -2048到2047之间</span>
           <span class="type-annotation">::</span>= [xd0-xd7] b1 b0       <span class="comment"># -x40000 to x3ffff  -262144到262143之间</span>
</code></pre><p>其实有了定义之后就容易实现了，我们看代码实现：</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="type">Hessian2Output</span>
public void writeInt<span class="container">(<span class="title">int</span> <span class="title">value</span>)</span>
  throws <span class="type">IOException</span>
{
  int offset = _offset;
  byte []buffer = _buffer;
  //扩容
  if <span class="container">(<span class="type">SIZE</span> &lt;= <span class="title">offset</span> + 16)</span> {
    flushBuffer<span class="container">()</span>;
    offset = _offset;
  }
  if <span class="container">(<span class="type">INT_DIRECT_MIN</span> &lt;= <span class="title">value</span> &amp;&amp; <span class="title">value</span> &lt;= <span class="type">INT_DIRECT_MAX</span>)</span>
  //值在-x10到x3f之间，加上<span class="type">BC_INT_ZERO</span>（0x90），就在区间[x80-xbf]上了。
    buffer[offset++] = <span class="container">(<span class="title">byte</span>)</span> <span class="container">(<span class="title">value</span> + <span class="type">BC_INT_ZERO</span>)</span>;
  else if <span class="container">(<span class="type">INT_BYTE_MIN</span> &lt;= <span class="title">value</span> &amp;&amp; <span class="title">value</span> &lt;= <span class="type">INT_BYTE_MAX</span>)</span> {
  //值在-0x800到0x7ff之间，左移8位加上<span class="type">BC_INT_BYTE_ZERO</span>（0xc8），第一个字节就在区间[xc0-xcf]上了。
    buffer[offset++] = <span class="container">(<span class="title">byte</span>)</span> <span class="container">(<span class="type">BC_INT_BYTE_ZERO</span> + (<span class="title">value</span> &gt;&gt; 8)</span>);
    buffer[offset++] = <span class="container">(<span class="title">byte</span>)</span> <span class="container">(<span class="title">value</span>)</span>;
  }
  else if <span class="container">(<span class="type">INT_SHORT_MIN</span> &lt;= <span class="title">value</span> &amp;&amp; <span class="title">value</span> &lt;= <span class="type">INT_SHORT_MAX</span>)</span> {
  //值在-x40000到x3ffff之间，左移16位加上<span class="type">BC_INT_SHORT_ZERO</span>（0xd4），第一个字节就在区间[xd0-xd7]上了。
    buffer[offset++] = <span class="container">(<span class="title">byte</span>)</span> <span class="container">(<span class="type">BC_INT_SHORT_ZERO</span> + (<span class="title">value</span> &gt;&gt; 16)</span>);
    buffer[offset++] = <span class="container">(<span class="title">byte</span>)</span> <span class="container">(<span class="title">value</span> &gt;&gt; 8)</span>;
    buffer[offset++] = <span class="container">(<span class="title">byte</span>)</span> <span class="container">(<span class="title">value</span>)</span>;
  }
  else {
    buffer[offset++] = <span class="container">(<span class="title">byte</span>)</span> <span class="container">('<span class="type">I</span>')</span>;
    buffer[offset++] = <span class="container">(<span class="title">byte</span>)</span> <span class="container">(<span class="title">value</span> &gt;&gt; 24)</span>;
    buffer[offset++] = <span class="container">(<span class="title">byte</span>)</span> <span class="container">(<span class="title">value</span> &gt;&gt; 16)</span>;
    buffer[offset++] = <span class="container">(<span class="title">byte</span>)</span> <span class="container">(<span class="title">value</span> &gt;&gt; 8)</span>;
    buffer[offset++] = <span class="container">(<span class="title">byte</span>)</span> <span class="container">(<span class="title">value</span>)</span>;
  }

  _offset = offset;
}</span>
</code></pre><p>同理，Long和Double也是如此，就不一一解释了。Boolean类型用’T’’F’来表示。</p>
<h2 id="三，对象序列化">三，对象序列化</h2><h3 id="3,1_String序列化">3,1 String序列化</h3><p>String是我们最常用的对象，下面我们看看它的结构定义。</p>
<pre><code>           <span class="comment"># UTF-8 encoded character string split into 64k chunks</span>
string     <span class="type-annotation">::</span>= x52 b1 b0 &lt;utf8-data&gt; string  <span class="comment"># non-final chunk</span>
           <span class="type-annotation">::</span>= <span class="char">'S'</span> b1 b0 &lt;utf8-data&gt;         <span class="comment"># string of length</span>
                                             <span class="comment">#  0-65535</span>
           <span class="type-annotation">::</span>= [x00-x1f] &lt;utf8-data&gt;         <span class="comment"># string of length</span>
                                             <span class="comment">#  0-31</span>
           <span class="type-annotation">::</span>= [x30-x34] &lt;utf8-data&gt;         <span class="comment"># string of length</span>
                                             <span class="comment">#  0-1023</span>
</code></pre><p>从上面我们看到，当字符串小于65535的时候，会生成一个结束数据块，否者，一直遍历循环截取String，生成一个大小为65535的。<br>下面我们看源码实现：</p>
<pre><code><span class="keyword">class</span> Hessian2Output
<span class="keyword">public</span> <span class="keyword">void</span> writeString(String value)
   <span class="keyword">throws</span> IOException
 {
   ....<span class="comment">//略     扩容</span>
   <span class="keyword">if</span> (value == <span class="keyword">null</span>) {
     buffer[offset++] = (<span class="keyword">byte</span>) <span class="string">'N'</span>;
     _offset = offset;
   } <span class="keyword">else</span> {
     <span class="keyword">int</span> length = value.length();
     <span class="keyword">int</span> strOffset = <span class="number">0</span>;

     <span class="keyword">while</span> (length &gt; <span class="number">0</span>x8000) {
       <span class="keyword">int</span> sublen = <span class="number">0</span>x8000; <span class="comment">//长度为32768，这里是由于一个unicode字符为2byte</span>
       ...<span class="comment">//略 扩容</span>

       <span class="comment">// chunk can't end in high surrogate</span>
       <span class="keyword">char</span> tail = value.charAt(strOffset + sublen - <span class="number">1</span>);
       <span class="comment">//块不能以高位结尾</span>
       <span class="keyword">if</span> (<span class="number">0</span>xd800 &lt;= tail &amp;&amp; tail &lt;= <span class="number">0</span>xdbff)
         sublen--;
       buffer[offset + <span class="number">0</span>] = (<span class="keyword">byte</span>) BC_STRING_CHUNK;
       buffer[offset + <span class="number">1</span>] = (<span class="keyword">byte</span>) (sublen &gt;&gt; <span class="number">8</span>);
       buffer[offset + <span class="number">2</span>] = (<span class="keyword">byte</span>) (sublen);
       <span class="comment">//3个字节，R字符串长度</span>
       _offset = offset + <span class="number">3</span>;
       printString(value, strOffset, sublen);
       length -= sublen;
       strOffset += sublen;
     }
     ...<span class="comment">//略 扩容，这里代码太不规范，一直重复</span>
     <span class="keyword">if</span> (length &lt;= STRING_DIRECT_MAX) {
       <span class="comment">//直接写入字符串长度</span>
       buffer[offset++] = (<span class="keyword">byte</span>) (BC_STRING_DIRECT + length);
     }
     <span class="keyword">else</span> <span class="keyword">if</span> (length &lt;= STRING_SHORT_MAX) {
       <span class="comment">//高位与0x30相加，地位取length的低位</span>
       buffer[offset++] = (<span class="keyword">byte</span>) (BC_STRING_SHORT + (length &gt;&gt; <span class="number">8</span>));
       buffer[offset++] = (<span class="keyword">byte</span>) (length);
     }
     <span class="keyword">else</span> {
       buffer[offset++] = (<span class="keyword">byte</span>) (<span class="string">'S'</span>);
       buffer[offset++] = (<span class="keyword">byte</span>) (length &gt;&gt; <span class="number">8</span>);
       buffer[offset++] = (<span class="keyword">byte</span>) (length);
     }

     _offset = offset;

     printString(value, strOffset, length);
   }
 }
</code></pre><h3 id="3,2_date序列化">3,2 date序列化</h3><p>其实日期也是个相对时间，相对1970年的差值而已，也就是序列化的为整形而已。</p>
<pre><code>           <span class="comment"># time in UTC encoded as 64-bit long milliseconds since</span>
           <span class="comment">#  epoch</span>
date       <span class="type-annotation">::</span>= x4a b7 b6 b5 b4 b3 b2 b1 b0
           <span class="type-annotation">::</span>= x4b b3 b2 b1 b0       <span class="comment"># minutes since epoch</span>
</code></pre><p>我们看到，0x4a开头的日期是带秒的，0x4b开头的日期是不带秒的。接下来看代码实现：</p>
<pre><code>    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">writeUTCDate</span><span class="params">(<span class="keyword">long</span> time)</span>
  <span class="keyword">throws</span> IOException
</span>{
  <span class="keyword">if</span> (SIZE &lt; _offset + <span class="number">32</span>)
    flushBuffer();

  <span class="keyword">int</span> offset = _offset;
  <span class="keyword">byte</span> []buffer = _buffer;
  <span class="comment">//除以60000秒</span>
  <span class="keyword">if</span> (time % <span class="number">60000</span>L == <span class="number">0</span>) {
    <span class="comment">// compact date ::= x65 b3 b2 b1 b0</span>

    <span class="keyword">long</span> minutes = time / <span class="number">60000</span>L;

    <span class="keyword">if</span> ((minutes &gt;&gt; <span class="number">31</span>) == <span class="number">0</span> || (minutes &gt;&gt; <span class="number">31</span>) == -<span class="number">1</span>) {
      buffer[offset++] = (<span class="keyword">byte</span>) BC_DATE_MINUTE;
      buffer[offset++] = ((<span class="keyword">byte</span>) (minutes &gt;&gt; <span class="number">24</span>));
      buffer[offset++] = ((<span class="keyword">byte</span>) (minutes &gt;&gt; <span class="number">16</span>));
      buffer[offset++] = ((<span class="keyword">byte</span>) (minutes &gt;&gt; <span class="number">8</span>));
      buffer[offset++] = ((<span class="keyword">byte</span>) (minutes &gt;&gt; <span class="number">0</span>));

      _offset = offset;
      <span class="keyword">return</span>;
    }
  }

  buffer[offset++] = (<span class="keyword">byte</span>) BC_DATE;
  buffer[offset++] = ((<span class="keyword">byte</span>) (time &gt;&gt; <span class="number">56</span>));
  buffer[offset++] = ((<span class="keyword">byte</span>) (time &gt;&gt; <span class="number">48</span>));
  buffer[offset++] = ((<span class="keyword">byte</span>) (time &gt;&gt; <span class="number">40</span>));
  buffer[offset++] = ((<span class="keyword">byte</span>) (time &gt;&gt; <span class="number">32</span>));
  buffer[offset++] = ((<span class="keyword">byte</span>) (time &gt;&gt; <span class="number">24</span>));
  buffer[offset++] = ((<span class="keyword">byte</span>) (time &gt;&gt; <span class="number">16</span>));
  buffer[offset++] = ((<span class="keyword">byte</span>) (time &gt;&gt; <span class="number">8</span>));
  buffer[offset++] = ((<span class="keyword">byte</span>) (time));

  _offset = offset;
}
</code></pre><h3 id="3-3自定义类定义序列化">3.3自定义类定义序列化</h3><p>序列化类规则：”C”+类名+字段长度+字段名。<br>对象规则：”O”+类定义引用+字段值 或者  类定义引用值小于16，(0x60+引用值)+字段值。</p>
<pre><code><span class="keyword">class</span>-def  ::= <span class="char">'C'</span> <span class="built_in">string</span> <span class="built_in">int</span> <span class="built_in">string</span>*

<span class="keyword">object</span>     ::= <span class="char">'O'</span> <span class="built_in">int</span> <span class="keyword">value</span>*
           ::= [x60-x6f] <span class="keyword">value</span>*
</code></pre><p>对象序列化需要注意，如果以前已经序列化过了，再次序列化时，会添加一个引用标志，如下：</p>
<pre><code><span class="keyword">ref</span> ::= x51 <span class="type">int</span>
</code></pre><p>引用仅仅引用list，map和对象。</p>
<pre><code>public <span class="type">void</span> writeObject(<span class="type">Object</span> obj, <span class="type">AbstractHessianOutput</span> <span class="keyword">out</span>)
    throws <span class="type">IOException</span>
  {
    //对象引用
    <span class="keyword">if</span> (<span class="keyword">out</span>.addRef(obj)) {
      <span class="keyword">return</span>;
    }
    <span class="type">Class</span>&lt;?&gt; cl = obj.getClass();

    //'C'和类名
    <span class="type">int</span> <span class="keyword">ref</span> = <span class="keyword">out</span>.writeObjectBegin(cl.getName());

    //类名引用
    <span class="keyword">if</span> (<span class="keyword">ref</span> &gt;= <span class="number">0</span>) {
      writeInstance(obj, <span class="keyword">out</span>);
    }
    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">ref</span> == -<span class="number">1</span>) {
      //字段长度，字段名
      writeDefinition20(<span class="keyword">out</span>);
      <span class="keyword">out</span>.writeObjectBegin(cl.getName());
      //字段序列化
      writeInstance(obj, <span class="keyword">out</span>);
    }
    <span class="keyword">else</span> {
      writeObject10(obj, <span class="keyword">out</span>);
    }
  }
</code></pre><p>参考hessian序列化的例子：</p>
<pre><code><span class="keyword">class</span> <span class="title">Car</span> {
  String color;
  String model;
}

<span class="keyword">out</span>.writeObject(<span class="keyword">new</span> Car(<span class="string">"red"</span>, <span class="string">"corvette"</span>));
<span class="keyword">out</span>.writeObject(<span class="keyword">new</span> Car(<span class="string">"green"</span>, <span class="string">"civic"</span>));

---

C                        <span class="preprocessor"># object definition (#0)</span>
  x0b example.Car        <span class="preprocessor"># type is example.Car</span>
  x92                    <span class="preprocessor"># two fields</span>
  x05 color              <span class="preprocessor"># color field name</span>
  x05 model              <span class="preprocessor"># model field name</span>

O                        <span class="preprocessor"># object def (long form)</span>
  x90                    <span class="preprocessor"># object definition #0</span>
  x03 red                <span class="preprocessor"># color field value</span>
  x08 corvette           <span class="preprocessor"># model field value</span>

x60                      <span class="preprocessor"># object def #0 (short form)</span>
  x05 green              <span class="preprocessor"># color field value</span>
  x05 civic              <span class="preprocessor"># model field value</span>
</code></pre><h2 id="四，集合序列化">四，集合序列化</h2><h3 id="4-1_数组序列化">4.1 数组序列化</h3><p>我们看它的协议：</p>
<pre><code>list <span class="type-annotation">::</span>= x55 <span class="keyword">type</span> value* <span class="char">'Z'</span>   <span class="comment"># variable-length list</span>
     <span class="type-annotation">::</span>= <span class="char">'V'</span> <span class="keyword">type</span> int value*   <span class="comment"># fixed-length list</span>
     <span class="type-annotation">::</span>= x57 value* <span class="char">'Z'</span>        <span class="comment"># variable-length untyped list</span>
     <span class="type-annotation">::</span>= x58 int value*        <span class="comment"># fixed-length untyped list</span>
     <span class="type-annotation">::</span>= [x70-<span class="number">77</span>] <span class="keyword">type</span> value*  <span class="comment"># fixed-length typed list</span>
     <span class="type-annotation">::</span>= [x78-<span class="number">7</span>f] value*       <span class="comment"># fixed-length untyped list</span>
</code></pre><p>协议本身很简单：总共分为6种情况。<br>   变长list<br>   固定长度list<br>   变长无类型list<br>   固定长度无类型list<br>   固定长度（小于等于7）有类型list<br>   固定长度（小于等于7）无类型list</p>
<p>下面我看看int[]的解析：</p>
<pre><code>V                    <span class="preprocessor"># fixed length, typed list</span>
  x04 [<span class="keyword">int</span>           <span class="preprocessor"># encoding of int[] type</span>
  x92                <span class="preprocessor"># length = 2</span>
  x90                <span class="preprocessor"># integer 0</span>
  x91                <span class="preprocessor"># integer 1</span>
BasicSerializer
<span class="keyword">case</span> INTEGER_ARRAY:
{
  <span class="keyword">if</span> (<span class="keyword">out</span>.addRef(obj))
    <span class="keyword">return</span>;

  <span class="keyword">int</span> []data = (<span class="keyword">int</span> []) obj;
  <span class="comment">//写对象头</span>
  boolean hasEnd = <span class="keyword">out</span>.writeListBegin(data.length, <span class="string">"[int"</span>);
  <span class="comment">//写数据</span>
  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++)
    <span class="keyword">out</span>.writeInt(data[i]);
  <span class="comment">//写结尾</span>
  <span class="keyword">if</span> (hasEnd)
<span class="keyword">out</span>.writeListEnd();

  <span class="keyword">break</span>;
}
</code></pre><h3 id="4-2_Map序列化">4.2 Map序列化</h3><p>我们看它的协议：</p>
<pre><code>map        ::= M <span class="keyword">type</span> (<span class="keyword">value</span> <span class="keyword">value</span>)* Z
</code></pre><p>这个就更简单了，M开头，接着是类型，然后是值，最后以Z结尾。代码如下：</p>
<pre><code>MapSerializer
<span class="keyword">public</span> void writeObject(Object obj, AbstractHessianOutput <span class="type">out</span>)
throws IOException
  {
    <span class="keyword">if</span> (<span class="type">out</span>.addRef(obj))
      <span class="keyword">return</span>;

    Map map = (Map) obj;

    <span class="keyword">Class</span> cl = obj.getClass();

    <span class="keyword">if</span> (cl.equals(HashMap.<span class="keyword">class</span>)
    || <span class="comment">! _isSendJavaType</span>
    || <span class="comment">! (obj instanceof java.io.Serializable))</span>
      <span class="type">out</span>.writeMapBegin(null);
    <span class="keyword">else</span>
      <span class="type">out</span>.writeMapBegin(obj.getClass().getName());

    Iterator iter = map.entrySet().iterator();
    <span class="keyword">while</span> (iter.hasNext()) {
      Map.<span class="built_in">Entry</span> <span class="built_in">entry</span> = (Map.<span class="built_in">Entry</span>) iter.next();

      <span class="type">out</span>.writeObject(<span class="built_in">entry</span>.getKey());
      <span class="type">out</span>.writeObject(<span class="built_in">entry</span>.getValue());
    }
    <span class="type">out</span>.writeMapEnd();
  }
</code></pre><h2 id="五，结尾">五，结尾</h2><p>hessian序列化以开头一个字节做映射，根据不同的编号映射到不同的类型定义,下面是总体规则：</p>
<pre><code>x00 - x1f    <span class="array"># utf</span>-<span class="number">8</span> string length <span class="number">0</span>-<span class="number">32</span>
x20 - x2f    <span class="array"># binary data length </span><span class="number">0</span>-<span class="number">16</span>
x30 - x33    <span class="array"># utf</span>-<span class="number">8</span> string length <span class="number">0</span>-<span class="number">1023</span>
x34 - x37    <span class="array"># binary data length </span><span class="number">0</span>-<span class="number">1023</span>
x38 - x3f    <span class="array"># three</span>-octet compact long (-x40000 to x3ffff)
x40          <span class="array"># reserved </span>(expansion/escape)
x41          <span class="array"># </span><span class="number">8</span>-bit binary data non-final chunk (<span class="string">'A'</span>)
x42          <span class="array"># </span><span class="number">8</span>-bit binary data final chunk (<span class="string">'B'</span>)
x43          <span class="array"># object type definition </span>(<span class="string">'C'</span>)
x44          <span class="array"># </span><span class="number">64</span>-bit IEEE encoded double (<span class="string">'D'</span>)
x45          <span class="array"># reserved</span>
x46          <span class="array"># boolean false </span>(<span class="string">'F'</span>)
x47          <span class="array"># reserved</span>
x48          <span class="array"># untyped map </span>(<span class="string">'H'</span>)
x49          <span class="array"># </span><span class="number">32</span>-bit signed integer (<span class="string">'I'</span>)
x4a          <span class="array"># </span><span class="number">64</span>-bit UTC millisecond date
x4b          <span class="array"># </span><span class="number">32</span>-bit UTC minute date
x4c          <span class="array"># </span><span class="number">64</span>-bit signed long integer (<span class="string">'L'</span>)
x4d          <span class="array"># map with type </span>(<span class="string">'M'</span>)
x4e          <span class="array"># null </span>(<span class="string">'N'</span>)
x4f          <span class="array"># object instance </span>(<span class="string">'O'</span>)
x50          <span class="array"># reserved</span>
x51          <span class="array"># reference to map</span>/list/object - integer (<span class="string">'Q'</span>)
x52          <span class="array"># utf</span>-<span class="number">8</span> string non-final chunk (<span class="string">'R'</span>)
x53          <span class="array"># utf</span>-<span class="number">8</span> string final chunk (<span class="string">'S'</span>)
x54          <span class="array"># boolean true </span>(<span class="string">'T'</span>)
x55          <span class="array"># variable</span>-length list/vector (<span class="string">'U'</span>)
x56          <span class="array"># fixed</span>-length list/vector (<span class="string">'V'</span>)
x57          <span class="array"># variable</span>-length untyped list/vector (<span class="string">'W'</span>)
x58          <span class="array"># fixed</span>-length untyped list/vector (<span class="string">'X'</span>)
x59          <span class="array"># long encoded as </span><span class="number">32</span>-bit int (<span class="string">'Y'</span>)
x5a          <span class="array"># list</span>/map terminator (<span class="string">'Z'</span>)
x5b          <span class="array"># double </span><span class="number">0.0</span>
x5c          <span class="array"># double </span><span class="number">1.0</span>
x5d          <span class="array"># double represented as byte </span>(-<span class="number">128.0</span> to <span class="number">127.0</span>)
x5e          <span class="array"># double represented as short </span>(-<span class="number">32768.0</span> to <span class="number">327676.0</span>)
x5f          <span class="array"># double represented as float</span>
x60 - x6f    <span class="array"># object with direct type</span>
x70 - x77    <span class="array"># fixed list with direct length</span>
x78 - x7f    <span class="array"># fixed untyped list with direct length</span>
x80 - xbf    <span class="array"># one</span>-octet compact int (-x10 to x3f, x90 is <span class="number">0</span>)
xc0 - xcf    <span class="array"># two</span>-octet compact int (-x800 to x7ff)
xd0 - xd7    <span class="array"># three</span>-octet compact int (-x40000 to x3ffff)
xd8 - xef    <span class="array"># one</span>-octet compact long (-x8 to xf, xe0 is <span class="number">0</span>)
xf0 - xff    <span class="array"># two</span>-octet compact long (-x800 to x7ff, xf8 is <span class="number">0</span>)
</code></pre><p>本文介绍了hessian的序列化机制，而反序列化是如何实现的呢，下文见。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一，前言">一，前言</h2><p>本文主要介绍hessian的解析协议，通过理解hessian协议以便于知道它的优劣，从而更好的运用它。Hessian序列化的协议可以在官方文档上找到 <a href="http://hessian.caucho.com/doc/]]>
    </summary>
    
      <category term="java" scheme="http://sqtds.github.io/tags/java/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GC调优总结]]></title>
    <link href="http://sqtds.github.io/2015/08/01/2015/GC-turing/"/>
    <id>http://sqtds.github.io/2015/08/01/2015/GC-turing/</id>
    <published>2015-08-01T12:42:41.000Z</published>
    <updated>2015-08-01T09:31:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/2015/GC调优.png" alt=""></p>
<h2 id="一，概述">一，概述</h2><p>twitter的一位工程师说过一句话，“Biggest threat  to responsiveness in the JVM is the garbage collector”，可见垃圾收集器的重要性。下面，我将总结一下GC调优的方方面面，希望以后在这里能少走弯路。</p>
<h2 id="二，监控命令">二，监控命令</h2><h3 id="1，jdk命令">1，jdk命令</h3><h4 id="1-1_jps_进程状态信息">1.1 jps 进程状态信息</h4><pre><code>jps [options] [hostid]
-<span class="ruby">q 不输出类名、<span class="constant">Jar</span>名和传入main方法的参数
</span>-<span class="ruby">m 输出传入main方法的参数
</span>-<span class="ruby">l 输出main类或<span class="constant">Jar</span>的全限名
</span>-<span class="ruby">v 输出传入<span class="constant">JVM</span>的参数</span>
</code></pre><h4 id="1-2_jstack_线程堆栈信息">1.2 jstack 线程堆栈信息</h4><pre><code>jstack [option] pid
-<span class="ruby">l long listings，会打印出额外的锁信息，在发生死锁时可以用jstack -l pid来观察锁持有情况
</span>-<span class="ruby">m mixed mode，不仅会输出<span class="constant">Java</span>堆栈信息，还会输出<span class="constant">C</span>/<span class="constant">C</span>++堆栈信息（比如<span class="constant">Native</span>方法）</span>
</code></pre><h4 id="1-3_jmap_堆内存使用状况">1.3 jmap 堆内存使用状况</h4><pre><code>jmap [option] <span class="keyword">pid</span>

jmap -permstat <span class="keyword">pid</span>
打印进程的类加载器和类加载器加载的持久代对象信息，输出：类加载器名称、对象是否存活（不可靠）、对象地址、父类加载器、已加载的类大小等信息

jmap -heap <span class="keyword">pid</span>
查看进程堆内存使用情况，包括使用的GC算法、堆配置参数和各代中堆内存使用情况。

jmap -histo[:live] <span class="keyword">pid</span> 
查看堆内存中的对象数目、大小统计直方图，如果带上live则只统计活对象 （注意：执行此语句会造成Full GC）

jmap -dump:<span class="keyword">format</span>=b,<span class="keyword">file</span>=dumpFile <span class="keyword">pid</span>
</code></pre><h4 id="1-4_jstat_统计监测工具">1.4 jstat 统计监测工具</h4><pre><code><span class="atom">jstat</span> [ <span class="atom">generalOption</span> | <span class="atom">outputOptions</span> <span class="atom">vmid</span> [<span class="atom">interval</span>[<span class="atom">s</span>|<span class="atom">ms</span>] [<span class="atom">count</span>]] ]
<span class="atom">vmid</span>是<span class="name">Java</span>虚拟机<span class="name">ID</span>，在<span class="name">Linux</span>/<span class="name">Unix</span>系统上一般就是进程<span class="name">ID</span>。<span class="atom">interval</span>是采样时间间隔。<span class="atom">count</span>是采样数目。
<span class="atom">root</span>@<span class="atom">ubuntu</span>:/# <span class="atom">jstat</span> -<span class="atom">gc</span> <span class="number">21711</span> <span class="number">250</span> <span class="number">4</span>
 <span class="name">S0C</span>    <span class="name">S1C</span>    <span class="name">S0U</span>    <span class="name">S1U</span>      <span class="name">EC</span>       <span class="name">EU</span>        <span class="name">OC</span>         <span class="name">OU</span>       <span class="name">PC</span>     <span class="name">PU</span>    <span class="name">YGC</span>     <span class="name">YGCT</span>    <span class="name">FGC</span>    <span class="name">FGCT</span>     <span class="name">GCT</span>   
<span class="number">192.0</span>  <span class="number">192.0</span>   <span class="number">64.0</span>   <span class="number">0.0</span>    <span class="number">6144.0</span>   <span class="number">1854.9</span>   <span class="number">32000.0</span>     <span class="number">4111.6</span>   <span class="number">55296.0</span> <span class="number">25472.7</span>    <span class="number">702</span>    <span class="number">0.431</span>   <span class="number">3</span>      <span class="number">0.218</span>    <span class="number">0.649</span>
<span class="number">192.0</span>  <span class="number">192.0</span>   <span class="number">64.0</span>   <span class="number">0.0</span>    <span class="number">6144.0</span>   <span class="number">1972.2</span>   <span class="number">32000.0</span>     <span class="number">4111.6</span>   <span class="number">55296.0</span> <span class="number">25472.7</span>    <span class="number">702</span>    <span class="number">0.431</span>   <span class="number">3</span>      <span class="number">0.218</span>    <span class="number">0.649</span>
<span class="number">192.0</span>  <span class="number">192.0</span>   <span class="number">64.0</span>   <span class="number">0.0</span>    <span class="number">6144.0</span>   <span class="number">1972.2</span>   <span class="number">32000.0</span>     <span class="number">4111.6</span>   <span class="number">55296.0</span> <span class="number">25472.7</span>    <span class="number">702</span>    <span class="number">0.431</span>   <span class="number">3</span>      <span class="number">0.218</span>    <span class="number">0.649</span>
<span class="number">192.0</span>  <span class="number">192.0</span>   <span class="number">64.0</span>   <span class="number">0.0</span>    <span class="number">6144.0</span>   <span class="number">2109.7</span>   <span class="number">32000.0</span>     <span class="number">4111.6</span>   <span class="number">55296.0</span> <span class="number">25472.7</span>    <span class="number">702</span>    <span class="number">0.431</span>   <span class="number">3</span>      <span class="number">0.218</span>    <span class="number">0.649</span>
</code></pre><blockquote>
<p>S0C、S1C、S0U、S1U：Survivor 0/1区容量（Capacity）和使用量（Used）<br>EC、EU：Eden区容量和使用量<br>OC、OU：年老代容量和使用量<br>PC、PU：永久代容量和使用量<br>YGC、YGT：年轻代GC次数和GC耗时<br>FGC、FGCT：Full GC次数和Full GC耗时<br>GCT：GC总耗时</p>
</blockquote>
<h3 id="2,_系统命令">2, 系统命令</h3><h4 id="2-1_top">2.1 top</h4><pre><code>参数： 
H <span class="operator"><span class="keyword">Show</span> <span class="keyword">all</span> threads <span class="keyword">by</span> process
<span class="number">1</span> 显示各个CPU的运行情况</span>
</code></pre><p>关键指标：</p>
<ol>
<li>us%<br> 用户进程CPU使用(us)消耗：正常 65%-70%<br>  过高，表示应用消耗了大部分的CPU。原因通常是大量计算或GC导致。</li>
<li>sy%：<br> 内核CPU使用(sy)消耗:正常 30%-35%<br> 过高，表示OS花费了大量时间在进行线程切换. 原因通常是线程启动过多，并都处于不断阻塞状态或线程状态不断在变化。</li>
</ol>
<p>top命令可以和jstack结合用</p>
<pre><code>top -H –p javaid 
查看某个进程的线程，找到最用cpu最高的线程后，
<span class="built_in">printf</span> <span class="string">'0x%x\n'</span> tid  
转换线程id为<span class="number">16</span>进制
jstack <span class="operator">-l</span> javaid | grep <span class="number">16</span>进制tid    
</code></pre><h4 id="2-2_vmstat">2.2 vmstat</h4><p><img src="/img/2015/gc-turing-vmstat.png" alt=""><br>关键指标: </p>
<ul>
<li>r(等待和正在运行队列的进程数) 数大于CPU个数， 则有可能出现CPU瓶颈</li>
<li>b(等待IO的进程数) 经常过高， 则io(网络IO/文件IO)消耗严重。</li>
<li>通过应当结合CPU利用率和CPU Load average来判断性能问题。</li>
<li>如果每个CPU的平均load值大于5(load/cpu count)则存在严重的性能问题(无论CPU利用率如何)。</li>
</ul>
<h4 id="2-3_iostat">2.3 iostat</h4><p>查看各硬盘IO负载信息<br><img src="/img/2015/gc-turing-iostat.png" alt=""><br>确定 IO瓶颈重要指标在于 r/s、 w/s 及 rkB/s、 wkB/s，前者为 tps, 后者为吞吐量。<br>IO 操作对时间消耗可从 util% 看出，如将近100%表示 io 请求(tps)过多。<br>await 远远大于 svctm， 说明等待的系统IO处理的队列太长， 则会导致响应时间变慢。</p>
<h4 id="2-4_pidstat">2.4 pidstat</h4><p>各进程/线程对CPU利用率</p>
<h2 id="三，JDK配置参数">三，JDK配置参数</h2><h3 id="1，内存参数">1，内存参数</h3><p><img src="/img/2015/gc-turing-memory.png" alt=""><br><img src="/img/2015/gc-turing-heap.png" alt=""><br>-Xms –Xmx -XX:PermSize -XX:MaxPermSize 最好设置成一样，防止“堆震荡”<br>-XX:SurvivorRatio :设置年轻代中Eden区与Survivor区的大小比值</p>
<h3 id="2，日志参数">2，日志参数</h3><h2 id="四，性能诊断">四，性能诊断</h2><h3 id="OOM">OOM</h3><p>对象未释放</p>
<ul>
<li>查看大对象</li>
</ul>
<h3 id="Full_GC频繁">Full GC频繁</h3><p>对象占用时间太长</p>
<ul>
<li>查看大对象</li>
</ul>
<h3 id="CMS">CMS</h3><p>promotion failed，concurrent mode failure</p>
<ul>
<li>如为内存用完的情况，则dump内存分析；</li>
<li>如为cms gc碎片问题，暂时只能定时执行下jmap –histo:live；</li>
</ul>
<h3 id="StackOverFlow">StackOverFlow</h3><p>打印线程栈</p>
<h3 id="CPU高负荷">CPU高负荷</h3><ul>
<li>查看线程争用，上下文切换</li>
<li>查看线程死锁</li>
</ul>
<h2 id="五，分析工具">五，分析工具</h2><h2 id="六，参考资料">六，参考资料</h2><h3 id="1,http://bluedavy-me/-淘宝林昊对GC调优的分享">1,<a href="http://bluedavy.me/--淘宝林昊对GC调优的分享" target="_blank" rel="external">http://bluedavy.me/--淘宝林昊对GC调优的分享</a></h3><h3 id="2,JVM性能调优监控工具jps、jstack、jmap、jhat、jstat、hprof使用详解">2,<a href="http://my.oschina.net/feichexia/blog/196575" target="_blank" rel="external">JVM性能调优监控工具jps、jstack、jmap、jhat、jstat、hprof使用详解</a></h3>]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/2015/GC调优.png" alt=""></p>
<h2 id="一，概述">一，概述</h2><p>twitter的一位工程师说过一句话，“Biggest threat  to responsiveness in the JVM is t]]>
    </summary>
    
      <category term="java核心系列" scheme="http://sqtds.github.io/tags/java%E6%A0%B8%E5%BF%83%E7%B3%BB%E5%88%97/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[thread tips]]></title>
    <link href="http://sqtds.github.io/2015/08/01/thread-tips/"/>
    <id>http://sqtds.github.io/2015/08/01/thread-tips/</id>
    <published>2015-08-01T01:19:03.000Z</published>
    <updated>2015-08-01T01:19:03.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[netty研究]]></title>
    <link href="http://sqtds.github.io/2015/07/22/netty-study1/"/>
    <id>http://sqtds.github.io/2015/07/22/netty-study1/</id>
    <published>2015-07-22T10:42:51.000Z</published>
    <updated>2015-07-22T10:43:17.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[记一次netty异常处理]]></title>
    <link href="http://sqtds.github.io/2015/07/19/2015/netty-exception/"/>
    <id>http://sqtds.github.io/2015/07/19/2015/netty-exception/</id>
    <published>2015-07-19T08:45:27.000Z</published>
    <updated>2015-07-19T10:10:03.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在用netty的时候，大家都遇到了哪些坑呢？又是如何解决的呢？</p>
<p>下面，我给大家讲讲这段时间我们在遇到的问题，也算是给自己个总结和教训吧。</p>
<h2 id="背景">背景</h2><p>在3月底的时候，我们跟合作方开发了一个程序，他们是服务端，我们是客户端。</p>
<p>我们之间有2个接口，按照不同的方式进行通讯：</p>
<ul>
<li><p>接口1：服务端每隔5秒钟发送一次数据，客户端（我们）只接收数据</p>
</li>
<li><p>接口2：服务端第一次发全量数据，我们收到数据后返回给他们当前数据的id码，他们收到id码后等待数据发生变化再返给我们数据，然后我们接到数据后再发给他们id码，一直循环。</p>
</li>
</ul>
<h2 id="第一个坑">第一个坑</h2><p>当时接口2运行一段时间后，大概几天吧，就收到串包的数据了。然后我们就找合作方，他们查看了日志后说他们那边发送没问题。</p>
<p>当时老大就说，既然他们说没问题。我们就要自证清白。于是我们就加了几行代码，将接口2接收到的每个报文的数据都写到文件中去了。</p>
<p>过了几天，问题又复现了，我们将问题反馈给合作方。他们看了他们的日志后依然说没问题，并且发给我们了。我看了一眼他们的日志，发现了问题。原来是多个线程同时向一个通道中写入数据…</p>
<h2 id="第二个坑">第二个坑</h2><p>第一个坑改好后，我们优化了代码，接受速率比以前有了很大的提升。<br>但是没过多久，又出问题了，我们发现隔一端时间（也是几天吧）之后，接口1又每收到数据了。检查了我们的代码后，本着怀疑他人的态度，我们认为是合作方的问题。注：当时程序在现场，跑一次要花半天时间，没有用wireshark查看数据包是否发过来。 反馈给合作方之后，他们也没查出所以然来。</p>
<p>于是我们就出了个解决方案。当在5分钟之内没收到数据的时候，链接自动断开重连。就这样，这个问题就算暂时告一段落了。</p>
<h2 id="第三个坑">第三个坑</h2><p>过了段时间，我们优化了代码程序，使得数据接收频率更快了。<br>但是，程序只跑了一天，CPU就到了100%了。于是现场的技术人员给我们发堆栈信息，分析了后，发现存在大量的Nio Worker线程。如图：<br><img src="/img/2015/netty-worker-exception.jpg" alt=""><br>于是我们判断重连有问题，仔细检查了代码后，并没有发现问题。于是将ClientBootstrap改成仅第一次连接初始化，以后重连的时候不初始化。<br>程序运行一天后，CPU没有出现100%了，但是数据又接收不到了。</p>
<p>当时左思又想不得其解。模拟Nio Worker线程变多的情况也模拟不出来。<br>后来又看了一眼堆栈信息。突然忘记了一件重要的事情，线程都阻塞在了</p>
<pre><code>at org<span class="class">.jboss</span><span class="class">.netty</span><span class="class">.buffer</span><span class="class">.DynamicChannelBuffer</span><span class="class">.ensureWritableBytes</span>(DynamicChannelBuffer<span class="class">.java</span>:<span class="number">81</span>)
</code></pre><p>这一行，这是为啥？于是打开源码，一探究竟：</p>
<pre><code><span class="number">79</span> <span class="built_in">int</span> minNewCapacity = writerIndex<span class="literal">()</span> + minWritableBytes;
<span class="number">80</span> <span class="keyword">while</span> (newCapacity &lt; minNewCapacity) {
<span class="number">81</span>     newCapacity &lt;&lt;= <span class="number">1</span>;
<span class="number">82</span> }
</code></pre><p>原来这里有个死循环，当minNewCapacity为int的最大值时，newCapacity是无论如何也不会比它大了。参考Netty BUG <a href="https://github.com/netty/netty/issues/258。" target="_blank" rel="external">https://github.com/netty/netty/issues/258。</a></p>
<p>当ClientBootstrap每次都初始化时，由于handler引用的是同一个，所以每个现场都会被halt在死循环上，线程运行多了，自然CPU100%了。</p>
<h2 id="第四个坑">第四个坑</h2><p>这个坑是同事找到的，当时同事不理解netty的deocde方法的执行时机。于是问我，我就回答了netty每次收到消息后都会触发一次decode方法。 他就问我，deocde方法每次只处理一次消息实体是不是不对，要是decode里面传递了多个消息实体，那后面的怎么办。我一看，果然会存在这样的问题，这都是前人留下的坑…虽然我们的消息实体一般很长，但也会存在短的，这个在一般情况下不会发生。</p>
<h2 id="最后">最后</h2><p>这次遇到了这么些问题，感觉自己在分析问题上还是没有完全掌控。这跟现场太远，不好跟踪bug，也跟自己对netty的掌握程度有关。所以还需要好好理解netty的机制。<br>还有就是，不要完全相信以前的代码。。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>在用netty的时候，大家都遇到了哪些坑呢？又是如何解决的呢？</p>
<p>下面，我给大家讲讲这段时间我们在遇到的问题，也算是给自己个总结和教训吧。</p>
<h2 id="背景">背景</h2><p>在3月底的时候，我们跟合作方开发]]>
    </summary>
    
      <category term="netty" scheme="http://sqtds.github.io/tags/netty/"/>
    
      <category term="exception" scheme="http://sqtds.github.io/categories/exception/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算机网络协议(3)-传输层]]></title>
    <link href="http://sqtds.github.io/2015/06/22/2015/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    <id>http://sqtds.github.io/2015/06/22/2015/网络协议-传输层/</id>
    <published>2015-06-22T08:50:26.000Z</published>
    <updated>2015-06-22T05:01:33.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/2015/传输层.png" alt=""></p>
<h2 id="TCP">TCP</h2><h3 id="一，报文结构">一，报文结构</h3><p><img src="/img/2015/tcp_header.jpeg" alt=""></p>
<ul>
<li>TCP的包是没有IP地址的，那是IP层上的。但是有源端口和目标端口。</li>
<li>Window又叫Advertised-Window，也就是滑动窗口（Sliding Window）</li>
<li><p>TCP Flag ，也就是包的类型，主要是用于操控TCP的状态机的。</p>
<pre><code><span class="title">SYN</span> 同步序号
FIN 发送方完成数据发送
RST 复位连接
PSH 尽可能的将数据送往接收进程
</code></pre></li>
</ul>
<h3 id="二，建立与关闭连接">二，建立与关闭连接</h3><p><img src="/img/2015/tcpfsm.png" alt=""><br><img src="/img/2015/tcp_open_close.jpeg" alt=""></p>
<ul>
<li><p>关于建连接时SYN超时<br>在Linux下，默认重试次数为5次，重试的间隔时间从1s开始每次都翻售，5次的重试时间间隔为1s, 2s, 4s, 8s, 16s，总共31s，第5次发出后还要等32s都知道第5次也超时了，所以，总共需要 1s + 2s + 4s+ 8s+ 16s + 32s = 2^6 -1 = 63s，TCP才会把断开这个连接。</p>
</li>
<li><p>TIME_WAIT<br>TIME_WAIT状态也称2MSL（报文段最大生存时间）等待状态。<br>从TIME_WAIT状态到CLOSED状态，有一个超时设置，这个超时设置是 2*MSL（RFC793定义了MSL为2分钟，Linux设置成了30s）</p>
</li>
</ul>
<h3 id="三，可靠数据传输">三，可靠数据传输</h3><h4 id="1,MSS">1,MSS</h4><p>最大报文段长度表示TCP传往另一端的最大数据库的长度。当一个连接建立的时候，连接的双发都要告知各自的MSS。</p>
<p>报文段越大允许每个报文段传送的数据就越多，相对IP和TCP首部就有更高的利用率。</p>
<h4 id="2，序号">2，序号</h4><p>用来解决网络包乱序（reordering）问题</p>
<h4 id="3，确认号">3，确认号</h4><p>用来解决不丢包的问题</p>
<h4 id="4，滑动窗口">4，滑动窗口</h4><p>TCP头里有一个字段叫Window，又叫Advertised-Window，这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来。</p>
<h4 id="5,超时重传">5,超时重传</h4><p>根据RTT（Round Trip Time）设置RTO（Retransmission TimeOut）。</p>
<h4 id="6，快速重传">6，快速重传</h4><p>如果发送方连续收到3次相同的ack，就立即重传。</p>
<h4 id="7，Nagle算法">7，Nagle算法</h4><p>延迟小分组的发送</p>
<h3 id="四，拥塞控制">四，拥塞控制</h3><h3 id="1,慢启动">1,慢启动</h3><ol>
<li>连接建好的开始先初始化cwnd = 1，表明可以传一个MSS大小的数据。</li>
<li>每当收到一个ACK，cwnd++; 呈线性上升</li>
<li>每当过了一个RTT，cwnd = cwnd*2; 呈指数让升</li>
<li>还有一个ssthresh（slow start threshold），是一个上限，当cwnd &gt;= ssthresh时，就会进入“拥塞避免算法”</li>
</ol>
<h3 id="2,拥塞避免">2,拥塞避免</h3><p>一般来说ssthresh的值是65535，单位是字节，当cwnd达到这个值时后</p>
<ol>
<li>收到一个ACK时，cwnd = cwnd + 1/cwnd</li>
<li>当每过一个RTT时，cwnd = cwnd + 1</li>
</ol>
<h3 id="3,快速恢复">3,快速恢复</h3><p>3个重复的Ack会进入快速恢复算法，进入Fast Recovery之前，cwnd 和 sshthresh已被更新：</p>
<ul>
<li>cwnd = cwnd /2</li>
<li>sshthresh = cwnd</li>
</ul>
<p>算法描述：</p>
<ol>
<li>cwnd = sshthresh  + 3 * MSS （3的意思是确认有3个数据包被收到了）</li>
<li>重传Duplicated ACKs指定的数据包</li>
<li>如果再收到 duplicated Acks，那么cwnd = cwnd +1</li>
<li>如果收到了新的Ack，那么，cwnd = sshthresh ，然后就进入了拥塞避免的算法了。</li>
</ol>
<p><img src="/img/2015/拥塞控制.jpeg" alt=""></p>
<h2 id="UDP">UDP</h2><h3 id="1，报文结构">1，报文结构</h3><p><img src="/img/2015/UDP报文.jpg" alt=""></p>
<h3 id="2，优势">2，优势</h3><ul>
<li>实时发送，由应用程序精确控制发送时间</li>
<li>无需连接建立，发送效率高</li>
<li>无连接状态，连接开销下，可创建更多连接</li>
<li>分组首部开销小，tcp首部20字节，udp只需8字节</li>
</ul>
<h2 id="参考资料">参考资料</h2><ul>
<li><a href="TCP 的那些事儿（上）" title="http://coolshell.cn/articles/11564.html">TCP 的那些事儿（上）</a></li>
<li><a href="http://coolshell.cn/articles/11609.html" target="_blank" rel="external">TCP 的那些事儿（下）</a></li>
<li>《TCP/IP 详解 卷1：协议》</li>
<li>《计算机网络-自顶向下方法》—陈鸣译</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/2015/传输层.png" alt=""></p>
<h2 id="TCP">TCP</h2><h3 id="一，报文结构">一，报文结构</h3><p><img src="/img/2015/tcp_header.jpeg" alt=""><]]>
    </summary>
    
      <category term="计算机原理" scheme="http://sqtds.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
      <category term="计算机原理" scheme="http://sqtds.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算机网络协议(2)-应用层]]></title>
    <link href="http://sqtds.github.io/2015/06/21/2015/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <id>http://sqtds.github.io/2015/06/21/2015/网络协议-应用层/</id>
    <published>2015-06-21T08:49:37.000Z</published>
    <updated>2015-06-22T05:31:07.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/2015/应用层.png" alt=""></p>
<h2 id="待续">待续</h2>]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/2015/应用层.png" alt=""></p>
<h2 id="待续">待续</h2>]]>
    </summary>
    
      <category term="计算机原理" scheme="http://sqtds.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
      <category term="计算机原理" scheme="http://sqtds.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算机网络协议(1)-概览]]></title>
    <link href="http://sqtds.github.io/2015/06/21/2015/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    <id>http://sqtds.github.io/2015/06/21/2015/网络协议/</id>
    <published>2015-06-21T08:34:18.000Z</published>
    <updated>2015-06-21T08:49:06.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/2015/英特网协议栈.png" alt=""><br>本文介绍时将采用5层因特网协议。</p>
<h2 id="一，应用层">一，应用层</h2><p>应用层是网络应用程序及他们的应用层协议存留的地方。位于应用层信息分组称为报文(message)。</p>
<h2 id="二，传输层">二，传输层</h2><p>因特网的传输层在应用程序之间传送应用报文。传输层分组成为报文段(segment)。</p>
<h2 id="三，网络层">三，网络层</h2><p>因特网的网络层负责将成为数据报的网络层分组从一台主机移动到另一台主机。网络层分组称为包(packet)。</p>
<h2 id="四，链路层">四，链路层</h2><p>因特网的网络层通过源和目的地之间的一系列路由器路由数据报。链路层分组称为帧(frame)。</p>
<h2 id="五，物理层">五，物理层</h2><h2 id="参考资料">参考资料</h2><ul>
<li>《计算机网络-自顶向下方法》—陈鸣译</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/2015/英特网协议栈.png" alt=""><br>本文介绍时将采用5层因特网协议。</p>
<h2 id="一，应用层">一，应用层</h2><p>应用层是网络应用程序及他们的应用层协议存留的地方。位于应用层信息分组称为报文(messag]]>
    </summary>
    
      <category term="计算机原理" scheme="http://sqtds.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
      <category term="计算机原理" scheme="http://sqtds.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SQL问题 找出连续日期]]></title>
    <link href="http://sqtds.github.io/2015/06/17/2015/sql%20%E8%BF%9E%E7%BB%AD%E6%80%A7/"/>
    <id>http://sqtds.github.io/2015/06/17/2015/sql 连续性/</id>
    <published>2015-06-17T12:42:41.000Z</published>
    <updated>2015-06-17T11:03:23.000Z</updated>
    <content type="html"><![CDATA[<p>今天在公司遇到一个有趣的sql问题，觉得挺有趣的，那就分享下。</p>
<h2 id="问题">问题</h2><p>有如下数据，找出其中日期(rq字段)连续性大于等于3的日期。<br><img src="/img/2015/sql连续1.png" alt="图片1"></p>
<p>即，结果为如下图所示：<br><img src="/img/2015/sql连续2.png" alt="图片2"></p>
<h2 id="思考">思考</h2><p>最开始的时候，我想这至少得写存储过程吧，先排序这个表，然后再从前向后取，当遇到连续性大于2的就保留下来，以此类推，直到读取完毕。</p>
<p>后来，百度了下，发现了一个更好的方法—-<a href="http://tech.it168.com/a2012/1229/1441/000001441981_all.shtml" target="_blank" rel="external">“关于数字的经典SQL编程：连续范围问题”</a>。</p>
<h2 id="思路">思路</h2><p>在那篇文章中，题主用的是整形，我们可以类推下，整形和时间其实差不多。</p>
<h3 id="第一步，查找每行的与rownum的差值">第一步，查找每行的与rownum的差值</h3><p>在这里我们用系统时间来确定相差的天数，保证了每个时间都有唯一的对标，然后减去rownum。</p>
<pre><code><span class="operator"><span class="keyword">select</span> rq, <span class="keyword">floor</span>(rq - <span class="keyword">sysdate</span>) - rownum  <span class="keyword">as</span> diff ,rownum <span class="keyword">from</span> tmptable</span>
</code></pre><p>执行结果如下图所示，我们发现，只要时间是连续的，那么他们的差值(diff字段)一定相等。<br><img src="/img/2015/sql连续3.png" alt="图片3"></p>
<h3 id="第二步，根据分组查找大于等于3的差值">第二步，根据分组查找大于等于3的差值</h3><p>这个简单，使用havaing搞定，贴sql就行了，不多说了。</p>
<pre><code><span class="operator"><span class="keyword">select</span> diff
  <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">floor</span>(rq - <span class="keyword">sysdate</span>) - rownum <span class="keyword">as</span> diff <span class="keyword">from</span> tmptable t) aa
<span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">2</span>
 <span class="keyword">group</span> <span class="keyword">by</span> diff</span>
</code></pre><p><img src="/img/2015/sql连续4.png" alt="图片3"></p>
<h3 id="第三步，根据差值查找出所有的行">第三步，根据差值查找出所有的行</h3><p>差值都有了，这就好办啦，我们直接使用第一步的sql和第二步的sql进行关联查询，结果就出来啦。</p>
<pre><code><span class="operator"><span class="keyword">select</span> t.rq
  <span class="keyword">from</span> 
  <span class="comment">-- 查找每行的与rownum的差值</span>
        (<span class="keyword">select</span> rq, <span class="keyword">floor</span>(rq - <span class="keyword">sysdate</span>) - rownum <span class="keyword">as</span> diff <span class="keyword">from</span> tmptable) t,
  <span class="comment">-- 根据分组查找大于等于3的差值</span>
       (<span class="keyword">select</span> diff
          <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">floor</span>(rq - <span class="keyword">sysdate</span>) - rownum <span class="keyword">as</span> diff <span class="keyword">from</span> tmptable t) aa
        <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">2</span>
         <span class="keyword">group</span> <span class="keyword">by</span> diff) cg
 <span class="keyword">where</span> t.diff = cg.diff
 <span class="keyword">order</span> <span class="keyword">by</span> t.rq ;</span>
</code></pre><p>好了，结果就是最开始要求的数据。</p>
<h2 id="总结">总结</h2><p>在连续性这个问题上，只要我们找到了与连续性相关的字段（rownum），然后在这个字段上进行处理，就可以得到我们想要的结果了。</p>
<p>从这里我们可以看到，如果需要做某件事的时候，先找是否有与它相关联的东西，如果有，那么我们可以先从相关联的的东西上入手，然后再用死方法一步一步来。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在公司遇到一个有趣的sql问题，觉得挺有趣的，那就分享下。</p>
<h2 id="问题">问题</h2><p>有如下数据，找出其中日期(rq字段)连续性大于等于3的日期。<br><img src="/img/2015/sql连续1.png" alt="图片1"></p]]>
    </summary>
    
      <category term="数据库" scheme="http://sqtds.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="数据库" scheme="http://sqtds.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java核心系列（十三）—java并发编程]]></title>
    <link href="http://sqtds.github.io/2015/05/24/2015/java-concurrent/"/>
    <id>http://sqtds.github.io/2015/05/24/2015/java-concurrent/</id>
    <published>2015-05-24T08:13:15.000Z</published>
    <updated>2015-05-24T07:21:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="并发编程概览">并发编程概览</h2><p><img src="/img/2015/并发编程.png" alt="并发编程"></p>
<h3 id="1,容器">1,容器</h3><p>略</p>
<h3 id="2，协作">2，协作</h3><p>略</p>
<h3 id="3，变量同步">3，变量同步</h3><p>略</p>
<h3 id="4，内存模型">4，内存模型</h3><p>略</p>
<h3 id="5，参考资料">5，参考资料</h3><ul>
<li>《java 并发编程实践》</li>
<li><a href="http://www.infoq.com/cn/articles/java-memory-model-1?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk" target="_blank" rel="external">深入理解Java内存模型（一）——基础</a></li>
<li><a href="http://www.infoq.com/cn/articles/java-memory-model-2?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk" target="_blank" rel="external">深入理解Java内存模型（二）——重排序</a></li>
<li><a href="http://www.infoq.com/cn/articles/java-memory-model-3?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk" target="_blank" rel="external">深入理解Java内存模型（三）——顺序一致性</a></li>
<li><a href="http://www.infoq.com/cn/articles/ftf-java-volatile?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk" target="_blank" rel="external">聊聊并发（一）——深入分析Volatile的实现原理</a></li>
<li><a href="http://www.infoq.com/cn/articles/java-se-16-synchronized" target="_blank" rel="external">聊聊并发（二）——Java SE1.6中的Synchronized</a></li>
<li><a href="http://www.infoq.com/cn/articles/java-threadPool" target="_blank" rel="external">聊聊并发（三）——JAVA线程池的分析和使用</a></li>
<li><a href="http://www.infoq.com/cn/articles/ConcurrentHashMap?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk" target="_blank" rel="external">聊聊并发（四）——深入分析ConcurrentHashMap</a></li>
<li><a href="http://www.infoq.com/cn/articles/atomic-operation?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk" target="_blank" rel="external">聊聊并发（五）——原子操作的实现原理</a></li>
<li><a href="http://www.infoq.com/cn/articles/ConcurrentLinkedQueue?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk" target="_blank" rel="external">聊聊并发（六）——ConcurrentLinkedQueue的实现原理分析</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="并发编程概览">并发编程概览</h2><p><img src="/img/2015/并发编程.png" alt="并发编程"></p>
<h3 id="1,容器">1,容器</h3><p>略</p>
<h3 id="2，协作">2，协作</h3><p>略</p>
]]>
    </summary>
    
      <category term="java核心系列" scheme="http://sqtds.github.io/tags/java%E6%A0%B8%E5%BF%83%E7%B3%BB%E5%88%97/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GPU基础知识普及]]></title>
    <link href="http://sqtds.github.io/2015/05/24/2015/gpu-base-konwledge/"/>
    <id>http://sqtds.github.io/2015/05/24/2015/gpu-base-konwledge/</id>
    <published>2015-05-24T07:35:38.000Z</published>
    <updated>2015-05-24T07:47:50.000Z</updated>
    <content type="html"><![CDATA[<p><a href="/info/从显卡历史说起.pptx">从显卡历史说起.pptx</a><br>本ppt用于部门内部的演讲，主要讲述了显卡的渲染机制，由于本人水平有限，难免存在瑕疵，有需要的同学可以拿去看看。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="/info/从显卡历史说起.pptx">从显卡历史说起.pptx</a><br>本ppt用于部门内部的演讲，主要讲述了显卡的渲染机制，由于本人水平有限，难免存在瑕疵，有需要的同学可以拿去看看。</p>
]]>
    </summary>
    
      <category term="计算机原理" scheme="http://sqtds.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
      <category term="计算机原理" scheme="http://sqtds.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>