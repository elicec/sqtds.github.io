<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[蜻蜓点水]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://sqtds.github.io/"/>
  <updated>2015-08-01T09:31:35.000Z</updated>
  <id>http://sqtds.github.io/</id>
  
  <author>
    <name><![CDATA[sqtds]]></name>
    <email><![CDATA[858569159@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[GC调优总结]]></title>
    <link href="http://sqtds.github.io/2015/08/01/GC-turing/"/>
    <id>http://sqtds.github.io/2015/08/01/GC-turing/</id>
    <published>2015-08-01T12:42:41.000Z</published>
    <updated>2015-08-01T09:31:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/2015/GC调优.png" alt=""></p>
<h2 id="一，概述">一，概述</h2><p>twitter的一位工程师说过一句话，“Biggest threat  to responsiveness in the JVM is the garbage collector”，可见垃圾收集器的重要性。下面，我将总结一下GC调优的方方面面，希望以后在这里能少走弯路。</p>
<h2 id="二，监控命令">二，监控命令</h2><h3 id="1，jdk命令">1，jdk命令</h3><h4 id="1-1_jps_进程状态信息">1.1 jps 进程状态信息</h4><pre><code>jps [options] [hostid]
-<span class="ruby">q 不输出类名、<span class="constant">Jar</span>名和传入main方法的参数
</span>-<span class="ruby">m 输出传入main方法的参数
</span>-<span class="ruby">l 输出main类或<span class="constant">Jar</span>的全限名
</span>-<span class="ruby">v 输出传入<span class="constant">JVM</span>的参数</span>
</code></pre><h4 id="1-2_jstack_线程堆栈信息">1.2 jstack 线程堆栈信息</h4><pre><code>jstack [option] pid
-<span class="ruby">l long listings，会打印出额外的锁信息，在发生死锁时可以用jstack -l pid来观察锁持有情况
</span>-<span class="ruby">m mixed mode，不仅会输出<span class="constant">Java</span>堆栈信息，还会输出<span class="constant">C</span>/<span class="constant">C</span>++堆栈信息（比如<span class="constant">Native</span>方法）</span>
</code></pre><h4 id="1-3_jmap_堆内存使用状况">1.3 jmap 堆内存使用状况</h4><pre><code>jmap [option] <span class="keyword">pid</span>

jmap -permstat <span class="keyword">pid</span>
打印进程的类加载器和类加载器加载的持久代对象信息，输出：类加载器名称、对象是否存活（不可靠）、对象地址、父类加载器、已加载的类大小等信息

jmap -heap <span class="keyword">pid</span>
查看进程堆内存使用情况，包括使用的GC算法、堆配置参数和各代中堆内存使用情况。

jmap -histo[:live] <span class="keyword">pid</span> 
查看堆内存中的对象数目、大小统计直方图，如果带上live则只统计活对象 （注意：执行此语句会造成Full GC）

jmap -dump:<span class="keyword">format</span>=b,<span class="keyword">file</span>=dumpFile <span class="keyword">pid</span>
</code></pre><h4 id="1-4_jstat_统计监测工具">1.4 jstat 统计监测工具</h4><pre><code><span class="atom">jstat</span> [ <span class="atom">generalOption</span> | <span class="atom">outputOptions</span> <span class="atom">vmid</span> [<span class="atom">interval</span>[<span class="atom">s</span>|<span class="atom">ms</span>] [<span class="atom">count</span>]] ]
<span class="atom">vmid</span>是<span class="name">Java</span>虚拟机<span class="name">ID</span>，在<span class="name">Linux</span>/<span class="name">Unix</span>系统上一般就是进程<span class="name">ID</span>。<span class="atom">interval</span>是采样时间间隔。<span class="atom">count</span>是采样数目。
<span class="atom">root</span>@<span class="atom">ubuntu</span>:/# <span class="atom">jstat</span> -<span class="atom">gc</span> <span class="number">21711</span> <span class="number">250</span> <span class="number">4</span>
 <span class="name">S0C</span>    <span class="name">S1C</span>    <span class="name">S0U</span>    <span class="name">S1U</span>      <span class="name">EC</span>       <span class="name">EU</span>        <span class="name">OC</span>         <span class="name">OU</span>       <span class="name">PC</span>     <span class="name">PU</span>    <span class="name">YGC</span>     <span class="name">YGCT</span>    <span class="name">FGC</span>    <span class="name">FGCT</span>     <span class="name">GCT</span>   
<span class="number">192.0</span>  <span class="number">192.0</span>   <span class="number">64.0</span>   <span class="number">0.0</span>    <span class="number">6144.0</span>   <span class="number">1854.9</span>   <span class="number">32000.0</span>     <span class="number">4111.6</span>   <span class="number">55296.0</span> <span class="number">25472.7</span>    <span class="number">702</span>    <span class="number">0.431</span>   <span class="number">3</span>      <span class="number">0.218</span>    <span class="number">0.649</span>
<span class="number">192.0</span>  <span class="number">192.0</span>   <span class="number">64.0</span>   <span class="number">0.0</span>    <span class="number">6144.0</span>   <span class="number">1972.2</span>   <span class="number">32000.0</span>     <span class="number">4111.6</span>   <span class="number">55296.0</span> <span class="number">25472.7</span>    <span class="number">702</span>    <span class="number">0.431</span>   <span class="number">3</span>      <span class="number">0.218</span>    <span class="number">0.649</span>
<span class="number">192.0</span>  <span class="number">192.0</span>   <span class="number">64.0</span>   <span class="number">0.0</span>    <span class="number">6144.0</span>   <span class="number">1972.2</span>   <span class="number">32000.0</span>     <span class="number">4111.6</span>   <span class="number">55296.0</span> <span class="number">25472.7</span>    <span class="number">702</span>    <span class="number">0.431</span>   <span class="number">3</span>      <span class="number">0.218</span>    <span class="number">0.649</span>
<span class="number">192.0</span>  <span class="number">192.0</span>   <span class="number">64.0</span>   <span class="number">0.0</span>    <span class="number">6144.0</span>   <span class="number">2109.7</span>   <span class="number">32000.0</span>     <span class="number">4111.6</span>   <span class="number">55296.0</span> <span class="number">25472.7</span>    <span class="number">702</span>    <span class="number">0.431</span>   <span class="number">3</span>      <span class="number">0.218</span>    <span class="number">0.649</span>
</code></pre><blockquote>
<p>S0C、S1C、S0U、S1U：Survivor 0/1区容量（Capacity）和使用量（Used）<br>EC、EU：Eden区容量和使用量<br>OC、OU：年老代容量和使用量<br>PC、PU：永久代容量和使用量<br>YGC、YGT：年轻代GC次数和GC耗时<br>FGC、FGCT：Full GC次数和Full GC耗时<br>GCT：GC总耗时</p>
</blockquote>
<h3 id="2,_系统命令">2, 系统命令</h3><h4 id="2-1_top">2.1 top</h4><pre><code>参数： 
H <span class="operator"><span class="keyword">Show</span> <span class="keyword">all</span> threads <span class="keyword">by</span> process
<span class="number">1</span> 显示各个CPU的运行情况</span>
</code></pre><p>关键指标：</p>
<ol>
<li>us%<br> 用户进程CPU使用(us)消耗：正常 65%-70%<br>  过高，表示应用消耗了大部分的CPU。原因通常是大量计算或GC导致。</li>
<li>sy%：<br> 内核CPU使用(sy)消耗:正常 30%-35%<br> 过高，表示OS花费了大量时间在进行线程切换. 原因通常是线程启动过多，并都处于不断阻塞状态或线程状态不断在变化。</li>
</ol>
<p>top命令可以和jstack结合用</p>
<pre><code>top -H –p javaid 
查看某个进程的线程，找到最用cpu最高的线程后，
<span class="built_in">printf</span> <span class="string">'0x%x\n'</span> tid  
转换线程id为<span class="number">16</span>进制
jstack <span class="operator">-l</span> javaid | grep <span class="number">16</span>进制tid    
</code></pre><h4 id="2-2_vmstat">2.2 vmstat</h4><p><img src="/img/2015/gc-turing-vmstat.png" alt=""><br>关键指标: </p>
<ul>
<li>r(等待和正在运行队列的进程数) 数大于CPU个数， 则有可能出现CPU瓶颈</li>
<li>b(等待IO的进程数) 经常过高， 则io(网络IO/文件IO)消耗严重。</li>
<li>通过应当结合CPU利用率和CPU Load average来判断性能问题。</li>
<li>如果每个CPU的平均load值大于5(load/cpu count)则存在严重的性能问题(无论CPU利用率如何)。</li>
</ul>
<h4 id="2-3_iostat">2.3 iostat</h4><p>查看各硬盘IO负载信息<br><img src="/img/2015/gc-turing-iostat.png" alt=""><br>确定 IO瓶颈重要指标在于 r/s、 w/s 及 rkB/s、 wkB/s，前者为 tps, 后者为吞吐量。<br>IO 操作对时间消耗可从 util% 看出，如将近100%表示 io 请求(tps)过多。<br>await 远远大于 svctm， 说明等待的系统IO处理的队列太长， 则会导致响应时间变慢。</p>
<h4 id="2-4_pidstat">2.4 pidstat</h4><p>各进程/线程对CPU利用率</p>
<h2 id="三，JDK配置参数">三，JDK配置参数</h2><h3 id="1，内存参数">1，内存参数</h3><p><img src="/img/2015/gc-turing-memory.png" alt=""><br><img src="/img/2015/gc-turing-heap.png" alt=""><br>-Xms –Xmx -XX:PermSize -XX:MaxPermSize 最好设置成一样，防止“堆震荡”<br>-XX:SurvivorRatio :设置年轻代中Eden区与Survivor区的大小比值</p>
<h3 id="2，日志参数">2，日志参数</h3><h2 id="四，性能诊断">四，性能诊断</h2><h3 id="OOM">OOM</h3><p>对象未释放</p>
<ul>
<li>查看大对象</li>
</ul>
<h3 id="Full_GC频繁">Full GC频繁</h3><p>对象占用时间太长</p>
<ul>
<li>查看大对象</li>
</ul>
<h3 id="CMS">CMS</h3><p>promotion failed，concurrent mode failure</p>
<ul>
<li>如为内存用完的情况，则dump内存分析；</li>
<li>如为cms gc碎片问题，暂时只能定时执行下jmap –histo:live；</li>
</ul>
<h3 id="StackOverFlow">StackOverFlow</h3><p>打印线程栈</p>
<h3 id="CPU高负荷">CPU高负荷</h3><ul>
<li>查看线程争用，上下文切换</li>
<li>查看线程死锁</li>
</ul>
<h2 id="五，分析工具">五，分析工具</h2><h2 id="六，参考资料">六，参考资料</h2><h3 id="1,http://bluedavy-me/-淘宝林昊对GC调优的分享">1,<a href="http://bluedavy.me/--淘宝林昊对GC调优的分享" target="_blank" rel="external">http://bluedavy.me/--淘宝林昊对GC调优的分享</a></h3><h3 id="2,JVM性能调优监控工具jps、jstack、jmap、jhat、jstat、hprof使用详解">2,<a href="http://my.oschina.net/feichexia/blog/196575" target="_blank" rel="external">JVM性能调优监控工具jps、jstack、jmap、jhat、jstat、hprof使用详解</a></h3>]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/2015/GC调优.png" alt=""></p>
<h2 id="一，概述">一，概述</h2><p>twitter的一位工程师说过一句话，“Biggest threat  to responsiveness in the JVM is t]]>
    </summary>
    
      <category term="java核心系列" scheme="http://sqtds.github.io/tags/java%E6%A0%B8%E5%BF%83%E7%B3%BB%E5%88%97/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[thread tips]]></title>
    <link href="http://sqtds.github.io/2015/08/01/thread-tips/"/>
    <id>http://sqtds.github.io/2015/08/01/thread-tips/</id>
    <published>2015-08-01T01:19:03.000Z</published>
    <updated>2015-08-01T01:19:03.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[netty研究]]></title>
    <link href="http://sqtds.github.io/2015/07/22/netty-study1/"/>
    <id>http://sqtds.github.io/2015/07/22/netty-study1/</id>
    <published>2015-07-22T10:42:51.000Z</published>
    <updated>2015-07-22T10:43:17.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[记一次netty异常处理]]></title>
    <link href="http://sqtds.github.io/2015/07/19/2015/netty-exception/"/>
    <id>http://sqtds.github.io/2015/07/19/2015/netty-exception/</id>
    <published>2015-07-19T08:45:27.000Z</published>
    <updated>2015-07-19T10:10:03.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在用netty的时候，大家都遇到了哪些坑呢？又是如何解决的呢？</p>
<p>下面，我给大家讲讲这段时间我们在遇到的问题，也算是给自己个总结和教训吧。</p>
<h2 id="背景">背景</h2><p>在3月底的时候，我们跟合作方开发了一个程序，他们是服务端，我们是客户端。</p>
<p>我们之间有2个接口，按照不同的方式进行通讯：</p>
<ul>
<li><p>接口1：服务端每隔5秒钟发送一次数据，客户端（我们）只接收数据</p>
</li>
<li><p>接口2：服务端第一次发全量数据，我们收到数据后返回给他们当前数据的id码，他们收到id码后等待数据发生变化再返给我们数据，然后我们接到数据后再发给他们id码，一直循环。</p>
</li>
</ul>
<h2 id="第一个坑">第一个坑</h2><p>当时接口2运行一段时间后，大概几天吧，就收到串包的数据了。然后我们就找合作方，他们查看了日志后说他们那边发送没问题。</p>
<p>当时老大就说，既然他们说没问题。我们就要自证清白。于是我们就加了几行代码，将接口2接收到的每个报文的数据都写到文件中去了。</p>
<p>过了几天，问题又复现了，我们将问题反馈给合作方。他们看了他们的日志后依然说没问题，并且发给我们了。我看了一眼他们的日志，发现了问题。原来是多个线程同时向一个通道中写入数据…</p>
<h2 id="第二个坑">第二个坑</h2><p>第一个坑改好后，我们优化了代码，接受速率比以前有了很大的提升。<br>但是没过多久，又出问题了，我们发现隔一端时间（也是几天吧）之后，接口1又每收到数据了。检查了我们的代码后，本着怀疑他人的态度，我们认为是合作方的问题。注：当时程序在现场，跑一次要花半天时间，没有用wireshark查看数据包是否发过来。 反馈给合作方之后，他们也没查出所以然来。</p>
<p>于是我们就出了个解决方案。当在5分钟之内没收到数据的时候，链接自动断开重连。就这样，这个问题就算暂时告一段落了。</p>
<h2 id="第三个坑">第三个坑</h2><p>过了段时间，我们优化了代码程序，使得数据接收频率更快了。<br>但是，程序只跑了一天，CPU就到了100%了。于是现场的技术人员给我们发堆栈信息，分析了后，发现存在大量的Nio Worker线程。如图：<br><img src="/img/2015/netty-worker-exception.jpg" alt=""><br>于是我们判断重连有问题，仔细检查了代码后，并没有发现问题。于是将ClientBootstrap改成仅第一次连接初始化，以后重连的时候不初始化。<br>程序运行一天后，CPU没有出现100%了，但是数据又接收不到了。</p>
<p>当时左思又想不得其解。模拟Nio Worker线程变多的情况也模拟不出来。<br>后来又看了一眼堆栈信息。突然忘记了一件重要的事情，线程都阻塞在了</p>
<pre><code>at org<span class="class">.jboss</span><span class="class">.netty</span><span class="class">.buffer</span><span class="class">.DynamicChannelBuffer</span><span class="class">.ensureWritableBytes</span>(DynamicChannelBuffer<span class="class">.java</span>:<span class="number">81</span>)
</code></pre><p>这一行，这是为啥？于是打开源码，一探究竟：</p>
<pre><code><span class="number">79</span> <span class="built_in">int</span> minNewCapacity = writerIndex<span class="literal">()</span> + minWritableBytes;
<span class="number">80</span> <span class="keyword">while</span> (newCapacity &lt; minNewCapacity) {
<span class="number">81</span>     newCapacity &lt;&lt;= <span class="number">1</span>;
<span class="number">82</span> }
</code></pre><p>原来这里有个死循环，当minNewCapacity为int的最大值时，newCapacity是无论如何也不会比它大了。参考Netty BUG <a href="https://github.com/netty/netty/issues/258。" target="_blank" rel="external">https://github.com/netty/netty/issues/258。</a></p>
<p>当ClientBootstrap每次都初始化时，由于handler引用的是同一个，所以每个现场都会被halt在死循环上，线程运行多了，自然CPU100%了。</p>
<h2 id="第四个坑">第四个坑</h2><p>这个坑是同事找到的，当时同事不理解netty的deocde方法的执行时机。于是问我，我就回答了netty每次收到消息后都会触发一次decode方法。 他就问我，deocde方法每次只处理一次消息实体是不是不对，要是decode里面传递了多个消息实体，那后面的怎么办。我一看，果然会存在这样的问题，这都是前人留下的坑…虽然我们的消息实体一般很长，但也会存在短的，这个在一般情况下不会发生。</p>
<h2 id="最后">最后</h2><p>这次遇到了这么些问题，感觉自己在分析问题上还是没有完全掌控。这跟现场太远，不好跟踪bug，也跟自己对netty的掌握程度有关。所以还需要好好理解netty的机制。<br>还有就是，不要完全相信以前的代码。。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>在用netty的时候，大家都遇到了哪些坑呢？又是如何解决的呢？</p>
<p>下面，我给大家讲讲这段时间我们在遇到的问题，也算是给自己个总结和教训吧。</p>
<h2 id="背景">背景</h2><p>在3月底的时候，我们跟合作方开发]]>
    </summary>
    
      <category term="netty" scheme="http://sqtds.github.io/tags/netty/"/>
    
      <category term="exception" scheme="http://sqtds.github.io/categories/exception/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算机网络协议(3)-传输层]]></title>
    <link href="http://sqtds.github.io/2015/06/22/2015/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    <id>http://sqtds.github.io/2015/06/22/2015/网络协议-传输层/</id>
    <published>2015-06-22T08:50:26.000Z</published>
    <updated>2015-06-22T05:01:33.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/2015/传输层.png" alt=""></p>
<h2 id="TCP">TCP</h2><h3 id="一，报文结构">一，报文结构</h3><p><img src="/img/2015/tcp_header.jpeg" alt=""></p>
<ul>
<li>TCP的包是没有IP地址的，那是IP层上的。但是有源端口和目标端口。</li>
<li>Window又叫Advertised-Window，也就是滑动窗口（Sliding Window）</li>
<li><p>TCP Flag ，也就是包的类型，主要是用于操控TCP的状态机的。</p>
<pre><code><span class="title">SYN</span> 同步序号
FIN 发送方完成数据发送
RST 复位连接
PSH 尽可能的将数据送往接收进程
</code></pre></li>
</ul>
<h3 id="二，建立与关闭连接">二，建立与关闭连接</h3><p><img src="/img/2015/tcpfsm.png" alt=""><br><img src="/img/2015/tcp_open_close.jpeg" alt=""></p>
<ul>
<li><p>关于建连接时SYN超时<br>在Linux下，默认重试次数为5次，重试的间隔时间从1s开始每次都翻售，5次的重试时间间隔为1s, 2s, 4s, 8s, 16s，总共31s，第5次发出后还要等32s都知道第5次也超时了，所以，总共需要 1s + 2s + 4s+ 8s+ 16s + 32s = 2^6 -1 = 63s，TCP才会把断开这个连接。</p>
</li>
<li><p>TIME_WAIT<br>TIME_WAIT状态也称2MSL（报文段最大生存时间）等待状态。<br>从TIME_WAIT状态到CLOSED状态，有一个超时设置，这个超时设置是 2*MSL（RFC793定义了MSL为2分钟，Linux设置成了30s）</p>
</li>
</ul>
<h3 id="三，可靠数据传输">三，可靠数据传输</h3><h4 id="1,MSS">1,MSS</h4><p>最大报文段长度表示TCP传往另一端的最大数据库的长度。当一个连接建立的时候，连接的双发都要告知各自的MSS。</p>
<p>报文段越大允许每个报文段传送的数据就越多，相对IP和TCP首部就有更高的利用率。</p>
<h4 id="2，序号">2，序号</h4><p>用来解决网络包乱序（reordering）问题</p>
<h4 id="3，确认号">3，确认号</h4><p>用来解决不丢包的问题</p>
<h4 id="4，滑动窗口">4，滑动窗口</h4><p>TCP头里有一个字段叫Window，又叫Advertised-Window，这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来。</p>
<h4 id="5,超时重传">5,超时重传</h4><p>根据RTT（Round Trip Time）设置RTO（Retransmission TimeOut）。</p>
<h4 id="6，快速重传">6，快速重传</h4><p>如果发送方连续收到3次相同的ack，就立即重传。</p>
<h4 id="7，Nagle算法">7，Nagle算法</h4><p>延迟小分组的发送</p>
<h3 id="四，拥塞控制">四，拥塞控制</h3><h3 id="1,慢启动">1,慢启动</h3><ol>
<li>连接建好的开始先初始化cwnd = 1，表明可以传一个MSS大小的数据。</li>
<li>每当收到一个ACK，cwnd++; 呈线性上升</li>
<li>每当过了一个RTT，cwnd = cwnd*2; 呈指数让升</li>
<li>还有一个ssthresh（slow start threshold），是一个上限，当cwnd &gt;= ssthresh时，就会进入“拥塞避免算法”</li>
</ol>
<h3 id="2,拥塞避免">2,拥塞避免</h3><p>一般来说ssthresh的值是65535，单位是字节，当cwnd达到这个值时后</p>
<ol>
<li>收到一个ACK时，cwnd = cwnd + 1/cwnd</li>
<li>当每过一个RTT时，cwnd = cwnd + 1</li>
</ol>
<h3 id="3,快速恢复">3,快速恢复</h3><p>3个重复的Ack会进入快速恢复算法，进入Fast Recovery之前，cwnd 和 sshthresh已被更新：</p>
<ul>
<li>cwnd = cwnd /2</li>
<li>sshthresh = cwnd</li>
</ul>
<p>算法描述：</p>
<ol>
<li>cwnd = sshthresh  + 3 * MSS （3的意思是确认有3个数据包被收到了）</li>
<li>重传Duplicated ACKs指定的数据包</li>
<li>如果再收到 duplicated Acks，那么cwnd = cwnd +1</li>
<li>如果收到了新的Ack，那么，cwnd = sshthresh ，然后就进入了拥塞避免的算法了。</li>
</ol>
<p><img src="/img/2015/拥塞控制.jpeg" alt=""></p>
<h2 id="UDP">UDP</h2><h3 id="1，报文结构">1，报文结构</h3><p><img src="/img/2015/UDP报文.jpg" alt=""></p>
<h3 id="2，优势">2，优势</h3><ul>
<li>实时发送，由应用程序精确控制发送时间</li>
<li>无需连接建立，发送效率高</li>
<li>无连接状态，连接开销下，可创建更多连接</li>
<li>分组首部开销小，tcp首部20字节，udp只需8字节</li>
</ul>
<h2 id="参考资料">参考资料</h2><ul>
<li><a href="TCP 的那些事儿（上）" title="http://coolshell.cn/articles/11564.html">TCP 的那些事儿（上）</a></li>
<li><a href="http://coolshell.cn/articles/11609.html" target="_blank" rel="external">TCP 的那些事儿（下）</a></li>
<li>《TCP/IP 详解 卷1：协议》</li>
<li>《计算机网络-自顶向下方法》—陈鸣译</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/2015/传输层.png" alt=""></p>
<h2 id="TCP">TCP</h2><h3 id="一，报文结构">一，报文结构</h3><p><img src="/img/2015/tcp_header.jpeg" alt=""><]]>
    </summary>
    
      <category term="计算机原理" scheme="http://sqtds.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
      <category term="计算机原理" scheme="http://sqtds.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算机网络协议(2)-应用层]]></title>
    <link href="http://sqtds.github.io/2015/06/21/2015/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <id>http://sqtds.github.io/2015/06/21/2015/网络协议-应用层/</id>
    <published>2015-06-21T08:49:37.000Z</published>
    <updated>2015-06-22T05:31:07.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/2015/应用层.png" alt=""></p>
<h2 id="待续">待续</h2>]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/2015/应用层.png" alt=""></p>
<h2 id="待续">待续</h2>]]>
    </summary>
    
      <category term="计算机原理" scheme="http://sqtds.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
      <category term="计算机原理" scheme="http://sqtds.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算机网络协议(1)-概览]]></title>
    <link href="http://sqtds.github.io/2015/06/21/2015/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    <id>http://sqtds.github.io/2015/06/21/2015/网络协议/</id>
    <published>2015-06-21T08:34:18.000Z</published>
    <updated>2015-06-21T08:49:06.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/2015/英特网协议栈.png" alt=""><br>本文介绍时将采用5层因特网协议。</p>
<h2 id="一，应用层">一，应用层</h2><p>应用层是网络应用程序及他们的应用层协议存留的地方。位于应用层信息分组称为报文(message)。</p>
<h2 id="二，传输层">二，传输层</h2><p>因特网的传输层在应用程序之间传送应用报文。传输层分组成为报文段(segment)。</p>
<h2 id="三，网络层">三，网络层</h2><p>因特网的网络层负责将成为数据报的网络层分组从一台主机移动到另一台主机。网络层分组称为包(packet)。</p>
<h2 id="四，链路层">四，链路层</h2><p>因特网的网络层通过源和目的地之间的一系列路由器路由数据报。链路层分组称为帧(frame)。</p>
<h2 id="五，物理层">五，物理层</h2><h2 id="参考资料">参考资料</h2><ul>
<li>《计算机网络-自顶向下方法》—陈鸣译</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/2015/英特网协议栈.png" alt=""><br>本文介绍时将采用5层因特网协议。</p>
<h2 id="一，应用层">一，应用层</h2><p>应用层是网络应用程序及他们的应用层协议存留的地方。位于应用层信息分组称为报文(messag]]>
    </summary>
    
      <category term="计算机原理" scheme="http://sqtds.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
      <category term="计算机原理" scheme="http://sqtds.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SQL问题 找出连续日期]]></title>
    <link href="http://sqtds.github.io/2015/06/17/2015/sql%20%E8%BF%9E%E7%BB%AD%E6%80%A7/"/>
    <id>http://sqtds.github.io/2015/06/17/2015/sql 连续性/</id>
    <published>2015-06-17T12:42:41.000Z</published>
    <updated>2015-06-17T11:03:23.000Z</updated>
    <content type="html"><![CDATA[<p>今天在公司遇到一个有趣的sql问题，觉得挺有趣的，那就分享下。</p>
<h2 id="问题">问题</h2><p>有如下数据，找出其中日期(rq字段)连续性大于等于3的日期。<br><img src="/img/2015/sql连续1.png" alt="图片1"></p>
<p>即，结果为如下图所示：<br><img src="/img/2015/sql连续2.png" alt="图片2"></p>
<h2 id="思考">思考</h2><p>最开始的时候，我想这至少得写存储过程吧，先排序这个表，然后再从前向后取，当遇到连续性大于2的就保留下来，以此类推，直到读取完毕。</p>
<p>后来，百度了下，发现了一个更好的方法—-<a href="http://tech.it168.com/a2012/1229/1441/000001441981_all.shtml" target="_blank" rel="external">“关于数字的经典SQL编程：连续范围问题”</a>。</p>
<h2 id="思路">思路</h2><p>在那篇文章中，题主用的是整形，我们可以类推下，整形和时间其实差不多。</p>
<h3 id="第一步，查找每行的与rownum的差值">第一步，查找每行的与rownum的差值</h3><p>在这里我们用系统时间来确定相差的天数，保证了每个时间都有唯一的对标，然后减去rownum。</p>
<pre><code><span class="operator"><span class="keyword">select</span> rq, <span class="keyword">floor</span>(rq - <span class="keyword">sysdate</span>) - rownum  <span class="keyword">as</span> diff ,rownum <span class="keyword">from</span> tmptable</span>
</code></pre><p>执行结果如下图所示，我们发现，只要时间是连续的，那么他们的差值(diff字段)一定相等。<br><img src="/img/2015/sql连续3.png" alt="图片3"></p>
<h3 id="第二步，根据分组查找大于等于3的差值">第二步，根据分组查找大于等于3的差值</h3><p>这个简单，使用havaing搞定，贴sql就行了，不多说了。</p>
<pre><code><span class="operator"><span class="keyword">select</span> diff
  <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">floor</span>(rq - <span class="keyword">sysdate</span>) - rownum <span class="keyword">as</span> diff <span class="keyword">from</span> tmptable t) aa
<span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">2</span>
 <span class="keyword">group</span> <span class="keyword">by</span> diff</span>
</code></pre><p><img src="/img/2015/sql连续4.png" alt="图片3"></p>
<h3 id="第三步，根据差值查找出所有的行">第三步，根据差值查找出所有的行</h3><p>差值都有了，这就好办啦，我们直接使用第一步的sql和第二步的sql进行关联查询，结果就出来啦。</p>
<pre><code><span class="operator"><span class="keyword">select</span> t.rq
  <span class="keyword">from</span> 
  <span class="comment">-- 查找每行的与rownum的差值</span>
        (<span class="keyword">select</span> rq, <span class="keyword">floor</span>(rq - <span class="keyword">sysdate</span>) - rownum <span class="keyword">as</span> diff <span class="keyword">from</span> tmptable) t,
  <span class="comment">-- 根据分组查找大于等于3的差值</span>
       (<span class="keyword">select</span> diff
          <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">floor</span>(rq - <span class="keyword">sysdate</span>) - rownum <span class="keyword">as</span> diff <span class="keyword">from</span> tmptable t) aa
        <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">2</span>
         <span class="keyword">group</span> <span class="keyword">by</span> diff) cg
 <span class="keyword">where</span> t.diff = cg.diff
 <span class="keyword">order</span> <span class="keyword">by</span> t.rq ;</span>
</code></pre><p>好了，结果就是最开始要求的数据。</p>
<h2 id="总结">总结</h2><p>在连续性这个问题上，只要我们找到了与连续性相关的字段（rownum），然后在这个字段上进行处理，就可以得到我们想要的结果了。</p>
<p>从这里我们可以看到，如果需要做某件事的时候，先找是否有与它相关联的东西，如果有，那么我们可以先从相关联的的东西上入手，然后再用死方法一步一步来。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在公司遇到一个有趣的sql问题，觉得挺有趣的，那就分享下。</p>
<h2 id="问题">问题</h2><p>有如下数据，找出其中日期(rq字段)连续性大于等于3的日期。<br><img src="/img/2015/sql连续1.png" alt="图片1"></p]]>
    </summary>
    
      <category term="数据库" scheme="http://sqtds.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="数据库" scheme="http://sqtds.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java核心系列（十三）—java并发编程]]></title>
    <link href="http://sqtds.github.io/2015/05/24/2015/java-concurrent/"/>
    <id>http://sqtds.github.io/2015/05/24/2015/java-concurrent/</id>
    <published>2015-05-24T08:13:15.000Z</published>
    <updated>2015-05-24T07:21:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="并发编程概览">并发编程概览</h2><p><img src="/img/2015/并发编程.png" alt="并发编程"></p>
<h3 id="1,容器">1,容器</h3><p>略</p>
<h3 id="2，协作">2，协作</h3><p>略</p>
<h3 id="3，变量同步">3，变量同步</h3><p>略</p>
<h3 id="4，内存模型">4，内存模型</h3><p>略</p>
<h3 id="5，参考资料">5，参考资料</h3><ul>
<li>《java 并发编程实践》</li>
<li><a href="http://www.infoq.com/cn/articles/java-memory-model-1?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk" target="_blank" rel="external">深入理解Java内存模型（一）——基础</a></li>
<li><a href="http://www.infoq.com/cn/articles/java-memory-model-2?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk" target="_blank" rel="external">深入理解Java内存模型（二）——重排序</a></li>
<li><a href="http://www.infoq.com/cn/articles/java-memory-model-3?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk" target="_blank" rel="external">深入理解Java内存模型（三）——顺序一致性</a></li>
<li><a href="http://www.infoq.com/cn/articles/ftf-java-volatile?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk" target="_blank" rel="external">聊聊并发（一）——深入分析Volatile的实现原理</a></li>
<li><a href="http://www.infoq.com/cn/articles/java-se-16-synchronized" target="_blank" rel="external">聊聊并发（二）——Java SE1.6中的Synchronized</a></li>
<li><a href="http://www.infoq.com/cn/articles/java-threadPool" target="_blank" rel="external">聊聊并发（三）——JAVA线程池的分析和使用</a></li>
<li><a href="http://www.infoq.com/cn/articles/ConcurrentHashMap?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk" target="_blank" rel="external">聊聊并发（四）——深入分析ConcurrentHashMap</a></li>
<li><a href="http://www.infoq.com/cn/articles/atomic-operation?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk" target="_blank" rel="external">聊聊并发（五）——原子操作的实现原理</a></li>
<li><a href="http://www.infoq.com/cn/articles/ConcurrentLinkedQueue?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk" target="_blank" rel="external">聊聊并发（六）——ConcurrentLinkedQueue的实现原理分析</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="并发编程概览">并发编程概览</h2><p><img src="/img/2015/并发编程.png" alt="并发编程"></p>
<h3 id="1,容器">1,容器</h3><p>略</p>
<h3 id="2，协作">2，协作</h3><p>略</p>
]]>
    </summary>
    
      <category term="java核心系列" scheme="http://sqtds.github.io/tags/java%E6%A0%B8%E5%BF%83%E7%B3%BB%E5%88%97/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GPU基础知识普及]]></title>
    <link href="http://sqtds.github.io/2015/05/24/2015/gpu-base-konwledge/"/>
    <id>http://sqtds.github.io/2015/05/24/2015/gpu-base-konwledge/</id>
    <published>2015-05-24T07:35:38.000Z</published>
    <updated>2015-05-24T07:47:50.000Z</updated>
    <content type="html"><![CDATA[<p><a href="/info/从显卡历史说起.pptx">从显卡历史说起.pptx</a><br>本ppt用于部门内部的演讲，主要讲述了显卡的渲染机制，由于本人水平有限，难免存在瑕疵，有需要的同学可以拿去看看。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="/info/从显卡历史说起.pptx">从显卡历史说起.pptx</a><br>本ppt用于部门内部的演讲，主要讲述了显卡的渲染机制，由于本人水平有限，难免存在瑕疵，有需要的同学可以拿去看看。</p>
]]>
    </summary>
    
      <category term="计算机原理" scheme="http://sqtds.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
      <category term="计算机原理" scheme="http://sqtds.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java核心系列（十二）-java对象大小]]></title>
    <link href="http://sqtds.github.io/2015/05/23/2015/java-object-size/"/>
    <id>http://sqtds.github.io/2015/05/23/2015/java-object-size/</id>
    <published>2015-05-23T12:57:27.000Z</published>
    <updated>2015-05-24T07:20:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="对象大小">对象大小</h2><p><img src="/img/2015/java_object_size.png" alt=""></p>
<h3 id="1，64位系统">1，64位系统</h3><p>new java.lang.Object() 占用了 16 bytes<br>new byte[0] 占用了 24 bytes</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"> <span class="keyword">byte</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"> <span class="keyword">byte</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>new A() 占用了 24 bytes<br>new B() 占用了 32 bytes= 24+pad A(8)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line"> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>new C() takes 40 bytes= obj+obj ref +C = 16+8+16</p>
<h3 id="2，参考资料">2，参考资料</h3><ul>
<li><a href="http://www.importnew.com/14948.html" target="_blank" rel="external">一个Java对象到底占多大内存？</a></li>
<li><a href="http://www.infoq.com/presentations/JVM-Performance-Tuning-twitter" target="_blank" rel="external">everything-i-ever-learned-about-jvm-performance-tuning-twitter</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="对象大小">对象大小</h2><p><img src="/img/2015/java_object_size.png" alt=""></p>
<h3 id="1，64位系统">1，64位系统</h3><p>new java.lang.Object() 占用了 1]]>
    </summary>
    
      <category term="java核心系列" scheme="http://sqtds.github.io/tags/java%E6%A0%B8%E5%BF%83%E7%B3%BB%E5%88%97/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[分布式一致性协议]]></title>
    <link href="http://sqtds.github.io/2015/05/23/2015/%E5%88%86%E5%B8%83%E5%BC%8F-%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE/"/>
    <id>http://sqtds.github.io/2015/05/23/2015/分布式-一致性协议/</id>
    <published>2015-05-23T08:38:14.000Z</published>
    <updated>2015-05-24T07:08:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一，概述">一，概述</h2><p>为了解决分布式一致性问题，出现了大量的一致性协议和算法，本文主要介绍2pc，3pc，paxos和zab算法。</p>
<h2 id="二，二阶段提交（2pc）">二，二阶段提交（2pc）</h2><p>参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情报决定各参与者是否要提交操作还是中止操作。</p>
<h3 id="2-1_基本算法">2.1 基本算法</h3><ul>
<li><p>a,第一阶段(请求阶段)<br>在请求阶段，协调者通知事务参与者准备提交或者取消事务，然后进入表决过程。在表决过程中，参与者将报告协调者自己的决策：同意或者取消。</p>
</li>
<li><p>b,第二阶段(提交阶段)<br>在提交阶段，协调者将基于第一个阶段的投票进行决策：提交或取消。当所有的参与者同意提交事务时，协调者才通知所有的参与者提交事务，否者通知所有的参与者取消事务。</p>
</li>
</ul>
<h3 id="2-2缺点">2.2缺点</h3><ul>
<li>同步阻塞，所有参与该事务的逻辑都将进入阻塞状态</li>
<li>单点问题，协调者故障</li>
<li>数据不一致，网络原因只有部分参与者收到commit请求</li>
</ul>
<h2 id="三，三阶段提交(3pc)">三，三阶段提交(3pc)</h2><p>2pc的改进版本，将请求阶段一分为二，形成能否提交，预提交，提交三个阶段。</p>
<h3 id="3-1基本算法">3.1基本算法</h3><ul>
<li><p>a,第一阶段（能否提交阶段）<br>协调者询问参与者事务能否执行，参与者在正常情况下返回Yes状态，否者返回No。</p>
</li>
<li><p>b,第二阶段（预提交阶段）<br>协调者根据反馈情况选择执行的预提交操作。</p>
</li>
<li><p>c,第三阶段（提交阶段）<br>协调者发送提交请求，通知所有的参与者进行提交或者回滚。</p>
</li>
</ul>
<h3 id="3-2_改进">3.2 改进</h3><p>3pc相对与2pc最大的优点就是减少了参与者的阻塞范围。</p>
<h2 id="四，Paxos协议">四，Paxos协议</h2><p>paxos用于解决多个节点间的一致性问题。2pc与3pc用于保证属于多个数据分片上的操作的原子性。</p>
<h3 id="4-1_基本算法">4.1 基本算法</h3><h4 id="4-1-1情况一">4.1.1情况一</h4><p>在大多数情况下，proposer只有一个,它的步骤如下：</p>
<ol>
<li>批准(accpet):Proposer发送accept消息要求所有其他节点接受某个提议值，acceptor可以接受或者拒绝。</li>
<li>确认（acknowledge）：如果超过一半的acceptor接受，意味着提议值已经生效，proposer发送acknowledge消息通知所有的acceptor提议生效。</li>
</ol>
<h4 id="4-2-1情况二">4.2.1情况二</h4><p>如果系统中出现了多个proposer的时候，他们各自发送不同的提议。如果proposer第一次发起的accept请求没有被acceptor中的多数派批准，那么，需要进行一轮完整的paxos协议：</p>
<ol>
<li>准备（prepare）: proposer首先选择一个提议号n给其他的acceptor节点发送prepare消息。acceptor接受消息后，如果提议号大于它已经回复的所有prepare消息，则acceptor将自己的上次接受的提议回复给proposer，并且不再回复小与n的提议。</li>
<li>批准（accept）：Proposer收到了acceptor中的多数派对prepare的回复后，就进入批准阶段。如果之前的prepare阶段acceptor回复了上次接受的提议，那么，proposer选择其中一个最大的提议值发给acceptor批准：否者，proposer生成一个新的提议值发给acceptor批准。acceptor在不违背它之前prepare阶段的承诺下，接受这个请求。</li>
<li>确认（acknowledge）： 如果超过一半的acceptor接受，提议值生效。proposer发送acknowledge消息通知给所有的acceptor。</li>
</ol>
<h3 id="4-2缺点">4.2缺点</h3><p>当有多个 proposer交错提交时，有可能互相排斥导致没有一个proposer能提交成功。</p>
<h2 id="五，ZAP协议">五，ZAP协议</h2><p>构建高可用的分布式主备系统。</p>
<h3 id="5-1_基本算法">5.1 基本算法</h3><ol>
<li>选举Leader<br> a,Leader要具有最高的zxid<br> b,集群中大多数的机器得到响应并follow选出的Leader</li>
<li>同步数据<br> a,发送数据同步指令<br> b,follow事务回退</li>
<li>广播</li>
</ol>
<h2 id="六，参考资料">六，参考资料</h2><ol>
<li>《从Paxos到Zookeeper-分布式一致性原理与实践》-倪超</li>
<li>《大规模分布式存储系统-原理解析与架构实践》-杨传辉</li>
<li><a href="http://zh.wikipedia.org/zh-cn/Paxos%E7%AE%97%E6%B3%95" target="_blank" rel="external">Paxos算法</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一，概述">一，概述</h2><p>为了解决分布式一致性问题，出现了大量的一致性协议和算法，本文主要介绍2pc，3pc，paxos和zab算法。</p>
<h2 id="二，二阶段提交（2pc）">二，二阶段提交（2pc）</h2><p>参与者将操作成败通知协调者]]>
    </summary>
    
      <category term="分布式" scheme="http://sqtds.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="分布式" scheme="http://sqtds.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java核心系列（十一）-java内存模型]]></title>
    <link href="http://sqtds.github.io/2015/05/23/2015/java-jmm/"/>
    <id>http://sqtds.github.io/2015/05/23/2015/java-jmm/</id>
    <published>2015-05-23T00:10:03.000Z</published>
    <updated>2015-05-24T07:20:42.000Z</updated>
    <content type="html"><![CDATA[<h2 id="JMM内存概览">JMM内存概览</h2><p><img src="/img/2015/JMM.png" alt=""></p>
<h3 id="参考资料">参考资料</h3><ul>
<li><a href="http://www.importnew.com/1993.html" target="_blank" rel="external">成为JavaGC专家Part I — 深入浅出Java垃圾回收机制</a></li>
<li><a href="&quot;http://www.importnew.com/2057.html&quot;">成为JavaGC专家Part II — 如何监控Java垃圾回收机制 </a></li>
<li><a href="http://www.importnew.com/3146.html" target="_blank" rel="external">成为Java GC专家系列Part III–如何优化Java垃圾回收机制 </a></li>
<li><a href="http://www.importnew.com/3151.html" target="_blank" rel="external">成为Java GC专家（4）—Apache的MaxClients参数详解及其在Tomcat执行FullGC时的影响</a></li>
<li><a href="http://www.importnew.com/13954.html" target="_blank" rel="external">成为Java GC专家（5）—Java性能调优原则</a></li>
<li><a href="http://ju.outofmemory.cn/entry/65368" target="_blank" rel="external">G1垃圾收集器</a></li>
<li><a href="http://ifeve.com/jvm-permgen-where-art-thou/" target="_blank" rel="external">JVM的持久代——何去何从？</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="JMM内存概览">JMM内存概览</h2><p><img src="/img/2015/JMM.png" alt=""></p>
<h3 id="参考资料">参考资料</h3><ul>
<li><a href="http://www.importnew.com/1]]>
    </summary>
    
      <category term="java核心系列" scheme="http://sqtds.github.io/tags/java%E6%A0%B8%E5%BF%83%E7%B3%BB%E5%88%97/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux搜索命令]]></title>
    <link href="http://sqtds.github.io/2015/05/18/2015/linux-search/"/>
    <id>http://sqtds.github.io/2015/05/18/2015/linux-search/</id>
    <published>2015-05-18T01:55:16.000Z</published>
    <updated>2015-05-24T07:05:18.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一，grep">一，grep</h2><blockquote>
<p>Syntax: grep [options] pattern [files]</p>
</blockquote>
<pre><code>搜索在文件中包含pattern的所有的行    
<span class="id">#grep</span> John /etc/passwd
搜索在文件中不包含pattern的所有的行    
<span class="id">#grep</span> -v John /etc/passwd
搜索在文件中包含pattern的行数
<span class="id">#grep</span> -c John /etc/passwd
忽略大小写
<span class="id">#grep</span> -<span class="tag">i</span> John /etc/passwd
搜索子目录,展现文件名和行
<span class="id">#grep</span> -ri john /home/users
搜索子目录,只展现文件名
<span class="id">#grep</span> -ril john /home/users
</code></pre><h2 id="二，grep与正则的配合">二，grep与正则的配合</h2><pre><code>行的开始^
grpe <span class="string">"^aa"</span> message<span class="class">.logs</span>
行的结尾$
grpe <span class="string">"aa$"</span> message<span class="class">.logs</span>
计算空行数
grep -c <span class="string">"^$"</span> message.logs
</code></pre><h2 id="三，find">三，find</h2><blockquote>
<p>Syntax: find [pathnames] [conditions]</p>
</blockquote>
<pre><code>查找文件名包含特定的字符
<span class="preprocessor"># find /etc -name "*mail*"</span>
查找文件大小大于<span class="number">100</span>M
<span class="preprocessor">#find / -type f -size +100M</span>
查找文件在最近的<span class="number">60</span>天未被修改
<span class="preprocessor"># find . -mtime +60</span>
查找文件在最近的<span class="number">2</span>天内被修改的
<span class="preprocessor"># find . –mtime -2</span>
查看以.tar.gz并且大于<span class="number">100</span>M的文件，并且删除
<span class="preprocessor"># find / -type f -name *.tar.gz -size +100M -exec ls -l {}</span>
\;
<span class="preprocessor"># find / -type f -name *.tar.gz -size +100M -exec rm -f {}</span>
\;
</code></pre><h2 id="四，sed">四，sed</h2><blockquote>
<p>Syntax: #sed ‘ADDRESSs/REGEXP/REPLACEMENT/FLAGS’ filename<br>Syntax: #sed ‘PATTERNs/REGEXP/REPLACEMENT/FLAGS’ filename</p>
</blockquote>
<ul>
<li>s is substitute command</li>
<li>/ is a delimiter</li>
<li>REGEXP is regular expression to match</li>
<li>REPLACEMENT is a value to replace</li>
</ul>
<p>FLAGS选项:</p>
<ul>
<li>g 用REPLACEMENT代替所有的 REGEXP  </li>
<li>n 可以是任意数字,用REPLACEMENT代替REGEXP的第n个实例。</li>
<li>p 打印匹配后的行</li>
<li>i 忽略大小写</li>
<li>w 将匹配后的行写入到文件中</li>
</ul>
<p>我们也可以用( one of @ % ; : )的其中一个代替/</p>
<pre><code>使用Linux-Unix替代Linux，只替代第一次
$ sed <span class="string">'s/Linux/Linux-Unix/'</span> thegeekstuff<span class="class">.txt</span>
使用Linux-Unix替代Linux，替代所有的
$ sed <span class="string">'s/Linux/Linux-Unix/g'</span> thegeekstuff<span class="class">.txt</span>
使用Linux-Unix替代Linux，替代第<span class="number">2</span>次
$ sed <span class="string">'s/Linux/Linux-Unix/2'</span> thegeekstuff<span class="class">.txt</span>
将替换后的行输出并打印 ，-n 表示取消默认输出
$ sed -n <span class="string">'s/Linux/Linux-Unix/gpw output'</span> thegeekstuff<span class="class">.txt</span>
删除所有的以#开头的行  -e 表示在文本中编辑
$ sed -e <span class="string">'s/#.*//'</span> thegeekstuff.txt
</code></pre><h2 id="五，cut">五，cut</h2><p>Cut命令用于展现文本中的特定列。</p>
<blockquote>
<p>Syntax: cut  [-bn] [file] 或 cut [-c] [file]  或  cut [-df] [file]</p>
</blockquote>
<ul>
<li>-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</li>
<li>-c ：以字符为单位进行分割。</li>
<li>-d ：自定义分隔符，默认为制表符。</li>
<li>-f  ：与-d一起使用，指定显示哪个区域。</li>
<li><p>-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的范围之内，该字符将被写出；否则，该字符将被排除。</p>
<p>  从冒号(:)分隔文件中展现第一个字段.<br>  $ cut -d: -f 1 names.txt<br>  从冒号(:)分隔文件中展现第一到三个字段.<br>  $ cut -d: -f 1,3 names.txt<br>  展现每行的前8个字符<br>  $ cut -c 1-8 names.txt<br>  展现可用内存<br>  free | tr -s ‘ ‘ | sed ‘/^Mem/!d’ | cut -d” “ -f2 </p>
</li>
</ul>
<h2 id="六，awk">六，awk</h2><blockquote>
<p>Syntax:awk ‘/search pattern1/ {Actions}<br>          /search pattern2/ {Actions}’ file</p>
</blockquote>
<ul>
<li>search pattern is a regular expression.</li>
<li>Actions – statement(s) to be performed.</li>
<li>several patterns and actions are possible in Awk.</li>
<li>file – Input file.</li>
<li>Single quotes around program is to avoid shell not to interpret any of its special characters</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一，grep">一，grep</h2><blockquote>
<p>Syntax: grep [options] pattern [files]</p>
</blockquote>
<pre><code>搜索在文件中包含pattern的所有的行    
<spa]]>
    </summary>
    
      <category term="linux命令" scheme="http://sqtds.github.io/tags/linux%E5%91%BD%E4%BB%A4/"/>
    
      <category term="linux" scheme="http://sqtds.github.io/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux常用技巧]]></title>
    <link href="http://sqtds.github.io/2015/05/17/2014/linux-tips/"/>
    <id>http://sqtds.github.io/2015/05/17/2014/linux-tips/</id>
    <published>2015-05-17T11:02:11.000Z</published>
    <updated>2015-05-18T05:53:58.000Z</updated>
    <content type="html"><![CDATA[<h3 id="一，TOP命令">一，TOP命令</h3><p>对于多核CPU，显示的是多个CPU的所占的百分比的总和，如需要查看每个核的情况，进入top视图后按1，就会按核来显示消耗情况。<br>默认情况下，TOP视图中显示的是进程的CPU消耗情况，在TOP视图中，按shift+h后，可按线程查看CPU的消耗情况。</p>
<h3 id="二，进程启动">二，进程启动</h3><ol>
<li><strong>&amp;</strong> 在后台启动进程，如果关闭会话，进程也会终止</li>
<li><strong>nohup</strong> 在后台启动进程，如果关闭会话，进程不会终止</li>
<li><strong>at</strong> 定时启动命令   <code>$ at -f backup.sh 10 am tomorrow</code></li>
<li><strong>watch</strong> 间隔启动   <code>$ watch df -h</code></li>
</ol>
<h3 id="三，">三，</h3>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一，TOP命令">一，TOP命令</h3><p>对于多核CPU，显示的是多个CPU的所占的百分比的总和，如需要查看每个核的情况，进入top视图后按1，就会按核来显示消耗情况。<br>默认情况下，TOP视图中显示的是进程的CPU消耗情况，在TOP视图中，按shift]]>
    </summary>
    
      <category term="linux" scheme="http://sqtds.github.io/tags/linux/"/>
    
      <category term="linux" scheme="http://sqtds.github.io/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java核心系列（九）—java异常]]></title>
    <link href="http://sqtds.github.io/2015/05/17/2015/java-exception/"/>
    <id>http://sqtds.github.io/2015/05/17/2015/java-exception/</id>
    <published>2015-05-17T04:32:38.000Z</published>
    <updated>2015-05-24T07:20:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一，概述">一，概述</h2><p><img src="/img/2015/异常.png" alt="异常"></p>
<h2 id="二，参考资料">二，参考资料</h2><ol>
<li>《effective java》</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一，概述">一，概述</h2><p><img src="/img/2015/异常.png" alt="异常"></p>
<h2 id="二，参考资料">二，参考资料</h2><ol>
<li>《effective java》</li>
</ol>
]]>
    </summary>
    
      <category term="java核心系列" scheme="http://sqtds.github.io/tags/java%E6%A0%B8%E5%BF%83%E7%B3%BB%E5%88%97/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java核心系列（十）-java新特性]]></title>
    <link href="http://sqtds.github.io/2015/05/17/2015/java-new-features/"/>
    <id>http://sqtds.github.io/2015/05/17/2015/java-new-features/</id>
    <published>2015-05-17T03:41:32.000Z</published>
    <updated>2015-05-24T07:20:27.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一，概述">一，概述</h2><p><img src="/img/2015/新特性.png" alt=""></p>
<h2 id="二，泛型">二，泛型</h2><h3 id="2-1_协变">2.1 协变</h3><p>数组是协变的，因为 Integer 是 Number 的子类型，数组类型 Integer[] 是 Number[] 的子类型，因此在任何需要 Number[] 值的地方都可以提供一个 Integer[] 值。另一方面，泛型不是协变的， List<integer> 不是 List<number> 的子类型，试图在要求 List<number> 的位置提供 List<integer> 是一个类型错误。这不算很严重的问题 — 也不是所有人都认为的错误 — 但泛型和数组的不同行为的确引起了许多混乱。</integer></number></number></integer></p>
<h3 id="2-2_类型推断">2.2 类型推断</h3><p>当解析一个泛型方法的调用时，编译器将设法推断类型参数它能达到的最具体类型。 例如，对于下面这个泛型方法：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; <span class="function">T <span class="title">identity</span><span class="params">(T arg)</span> </span>&#123; <span class="keyword">return</span> arg &#125;;</span><br></pre></td></tr></table></figure></p>
<p>和它的调用：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> i = <span class="number">3</span>;</span><br><span class="line">System.<span class="type">out</span>.println(identity(i));</span><br></pre></td></tr></table></figure></p>
<p>编译器能够推断 T 是 Integer、Number、 Serializable 或 Object，但它选择 Integer 作为满足约束的最具体类型。</p>
<h2 id="三，注解">三，注解</h2><p>注解早在J2SE1.5就被引入到Java中，主要提供一种机制，这种机制允许程序员在编写代码的同时可以直接编写元数据。<br>注解基本上可以在Java程序的每一个元素上使用：类，域，方法，包，变量，等等。</p>
<h3 id="3-1_@Retention">3.1 @Retention</h3><p>这个注解注在其他注解上，并用来说明如何存储已被标记的注解。这是一种元注解，用来标记注解并提供注解的信息。可能的值是：</p>
<ul>
<li>SOURCE：表明这个注解会被编译器忽略，并只会保留在源代码中。</li>
<li>CLASS:表明这个注解会通过编译驻留在CLASS文件，但会被JVM在运行时忽略,正因为如此,其在运行时不可见。</li>
<li>RUNTIME：表示这个注解会被JVM获取，并在运行时通过反射获取。</li>
</ul>
<h3 id="3-2_@Target">3.2 @Target</h3><p>这个注解用于限制某个元素可以被注解的类型。例如：</p>
<ul>
<li>ANNOTATION_TYPE 表示该注解可以应用到其他注解上</li>
<li>CONSTRUCTOR 表示可以使用到构造器上</li>
<li>FIELD 表示可以使用到域或属性上</li>
<li>LOCAL_VARIABLE表示可以使用到局部变量上。</li>
<li>METHOD可以使用到方法级别的注解上。</li>
<li>PACKAGE可以使用到包声明上。</li>
<li>PARAMETER可以使用到方法的参数上</li>
<li>TYPE可以使用到一个类的任何元素上。</li>
</ul>
<h3 id="3-3_@Documented">3.3 @Documented</h3><p>被注解的元素将会作为Javadoc产生的文档中的内容。注解都默认不会成为成为文档中的内容。这个注解可以对其它注解使用。</p>
<h3 id="3-4_@Inherited">3.4 @Inherited</h3><p>在默认情况下，注解不会被子类继承。被此注解标记的注解会被所有子类继承。这个注解可以对类使用。</p>
<h3 id="3-5_@Repeatable">3.5 @Repeatable</h3><p>说明该注解标识的注解可以多次使用到同一个元素的声明上。</p>
<h3 id="3-6_@FunctionalInterface">3.6 @FunctionalInterface</h3><p>这个注解表示一个函数式接口元素。函数式接口是一种只有一个抽象方法（非默认）的接口。编译器会检查被注解元素，如果不符，就会产生错误。</p>
<h2 id="四，lambada表达式">四，lambada表达式</h2><h2 id="五，参考资料">五，参考资料</h2><ol>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-jtp04298.html" target="_blank" rel="external">Java 理论与实践: 使用通配符简化泛型使用</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-jtp01255.html" target="_blank" rel="external">Java 理论和实践: 了解泛型</a></li>
<li><a href="http://www.cnblogs.com/panjun-Donet/archive/2008/09/27/1300609.html" target="_blank" rel="external">java泛型</a></li>
<li><a href="http://www.importnew.com/14227.html" target="_blank" rel="external">Java 注解指导手册 – 终极向导</a></li>
<li><a href="http://www.infoq.com/cn/articles/cf-java-annotation/" target="_blank" rel="external">Java深度历险（六）——Java注解</a></li>
<li><a href="http://www.cnblogs.com/figure9/archive/2014/10/24/4048421.html" target="_blank" rel="external">深入理解Java 8 Lambda（语言篇——lambda，方法引用，目标类型和默认方法）</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一，概述">一，概述</h2><p><img src="/img/2015/新特性.png" alt=""></p>
<h2 id="二，泛型">二，泛型</h2><h3 id="2-1_协变">2.1 协变</h3><p>数组是协变的，因为 Integer 是 ]]>
    </summary>
    
      <category term="java核心系列" scheme="http://sqtds.github.io/tags/java%E6%A0%B8%E5%BF%83%E7%B3%BB%E5%88%97/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java核心系列（八）—java队列]]></title>
    <link href="http://sqtds.github.io/2015/05/15/2015/java-queue/"/>
    <id>http://sqtds.github.io/2015/05/15/2015/java-queue/</id>
    <published>2015-05-15T12:31:10.000Z</published>
    <updated>2015-05-24T07:20:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="队列概览">队列概览</h2><p><img src="/img/2015/Queue.png" alt=""></p>
<h3 id="1，BlockingQueue">1，BlockingQueue</h3><ul>
<li>ArrayBlockingQueue，数组结构组成,其构造函数必须带一个int参数来指明其大小</li>
<li>LinkedBlockingQueue，由链表结构组成,若其构造函数带一个规定大小的参数，生成的BlockingQueue有大小限制，若不带大小参数，所生成的BlockingQueue的大小由Integer.MAX_VALUE来决定</li>
<li>PriorityBlockingQueue，其所含对象的排序不是FIFO,而是依据对象的自然排序顺序或者是构造函数的Comparator决定的顺序</li>
<li><p>DelayQueue：一个使用优先级队列实现的无界阻塞队列。DelayQueue是一个支持延时获取元素的无界阻塞队列。队列使用PriorityQueue来实现。队列中的元素必须实现Delayed接口，<strong>在创建元素时可以指定多久才能从队列中获取当前元素</strong>。<strong>只有在延迟期满时才能从队列中提取元素。</strong>我们可以将DelayQueue运用在以下应用场景：</p>
<p> 缓存系统的设计：<br> 可以用DelayQueue保存缓存元素的有效期，使用一个线程循环查询DelayQueue，一旦能从DelayQueue中获取元素时，表示缓存有效期到了。<br> 定时任务调度：<br> 使用DelayQueue保存当天将会执行的任务和执行时间，一旦从DelayQueue中获取到任务就开始执行，从比如TimerQueue就是使用DelayQueue实现的。</p>
</li>
<li><p>SynchronousQueue：一个不存储元素的阻塞队列。每一个put操作必须等待一个take操作，否则不能继续添加元素。</p>
</li>
<li>LinkedTransferQueue：一个由链表结构组成的无界阻塞队列。</li>
<li>LinkedBlockingDeque：一个由链表结构组成的双向阻塞队列。</li>
</ul>
<h3 id="2，Queue">2，Queue</h3><ul>
<li><p>PriorityQueue是个基于优先级堆的极大优先级队列。<br>此队列按照在构造时所指定的顺序对元素排序，既可以根据元素的自然顺序来指定排序（参阅 Comparable）， 也可以根据 Comparator 来指定，这取决于使用哪种构造方法。优先级队列不允许 null 元素。</p>
</li>
<li><p>ConcurrentLinkedQueue一个无锁的并发线程安全的队列。对比锁机制的实现，使用无锁机制的难点在于要充分考虑线程间的协调。简单的说就是多个线程对内部数据结构进行访问时，如果其中一个线程执行的中途因为一些原因出现故障，其他的线程能够检测并帮助完成剩下的操作。这就需要把对数据结构的操作过程精细的划分成多个状态或阶段，考虑每个阶段或状态多线程访问会出现的情况。<br>需要说一下的是，<strong>ConcurrentLinkedQueue的size()是要遍历一遍集合的，所以尽量要避免用size而改用isEmpty()，以免性能过慢。</strong></p>
</li>
</ul>
<h3 id="3，Deque">3，Deque</h3><p>LinkedList，ArrayDeque，非线程安全的，可以通过Collections的工具方法改造成线程安全的。<br>LinkedBlockingDeque</p>
<p>按照我们一般的理解，Deque是一个双向队列，这将意味着它不过是对Queue接口的增强。如果仔细分析Deque接口代码的话，我们会发现它里面主要包含有4个部分的功能定义。</p>
<ol>
<li>双向队列特定方法定义。 </li>
<li>Queue方法定义。 </li>
<li><strong>Stack方法定义。 </strong></li>
<li>Collection方法定义。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\\Stack定义</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        addFirst(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="4,参考资料">4,参考资料</h3><p><a href="http://www.infoq.com/cn/articles/java-blocking-queue" target="_blank" rel="external">聊聊并发（七）——Java中的阻塞队列</a><br><a href="http://blog.csdn.net/guangcigeyun/article/details/8278350" target="_blank" rel="external"> Java多线程（五）之BlockingQueue深入分析</a><br><a href="http://blog.csdn.net/guangcigeyun/article/details/8278355" target="_blank" rel="external">Java多线程（六）之Deque与LinkedBlockingDeque深入分析</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="队列概览">队列概览</h2><p><img src="/img/2015/Queue.png" alt=""></p>
<h3 id="1，BlockingQueue">1，BlockingQueue</h3><ul>
<li>ArrayBlockingQueu]]>
    </summary>
    
      <category term="java核心系列" scheme="http://sqtds.github.io/tags/java%E6%A0%B8%E5%BF%83%E7%B3%BB%E5%88%97/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java核心系列（七）—java线程]]></title>
    <link href="http://sqtds.github.io/2015/05/15/2015/java-thread/"/>
    <id>http://sqtds.github.io/2015/05/15/2015/java-thread/</id>
    <published>2015-05-15T10:01:58.000Z</published>
    <updated>2015-05-24T07:19:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="thread">thread</h2><p><img src="/img/2015/thread.png" alt=""></p>
<h3 id="1，锁">1，锁</h3><p>偏向锁(Biased Locking)是Java6引入的一项多线程优化。它通过消除资源无竞争情况下的同步原语，进一步提高了程序的运行性能。</p>
<p>轻量级锁（Lightweight Locking）本意是为了减少多线程进入互斥的几率，并不是要替代互斥。</p>
<p>轻量级锁也是一种多线程优化，它与偏向锁的区别在于，轻量级锁是通过CAS来避免进入开销较大的互斥操作，而偏向锁是在无竞争场景下完全消除同步，连CAS也不执行（CAS本身仍旧是一种操作系统同步原语，始终要在JVM与OS之间来回，有一定的开销）。</p>
<h3 id="2，同步">2，同步</h3><p>wait:方法使当前线程暂停执行并释放对象锁标示，让其他线程可以进入synchronized数据块，当前线程被放入对象等待池中。</p>
<p>notify:将从对象的等待池中移走一个任意的线程并放到锁标志等待池中，只有锁标志等待池中线程能够获取锁标志；如果锁标志等待池中没有线程，则notify()不起作用。</p>
<p>notifyAll:从对象等待池中移走所有等待那个对象的线程并放到锁标志等待池中。</p>
<p><strong>注意 这三个方法都是java.lang.Object的方法,调用时需要获取锁</strong></p>
<h3 id="3，实例方法">3，实例方法</h3><p>join:主要是让调用改方法的thread完成run方法里面的东西后， 在执行join()方法后面的代码。</p>
<pre><code class="java">t1.start();  
t1.join(); <span class="comment">// wait t1 to be finished  </span>
t2.start();  
t2.join(); <span class="comment">// in this program, this may be removed</span>
</code></pre>
<p>interupt:中断是一种协作机制。当一个线程中断另一个线程时，被中断的线程不一定要立即停止正在做的事情。相反，中断是礼貌地请求另一个线程在它愿意并且方便的时候停止它正在做的事情。</p>
<h3 id="4，静态方法">4，静态方法</h3><p>sleep：在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。该线程不丢失任何监视器的所属权。 通过调用sleep使任务进入休眠状态，在这种情况下，任务在指定的时间内不会运行。调用sleep的时候锁并没有被释放。</p>
<p>yield：线程调用yield()方法后，表明自己做的事已经完成，让出自己的cpu时间给其他线程使用。让出后，该线程可以重新获得cpu分配的权利，状态变为了可执行状态。（yield并不意味着退出和暂停，只是，告诉线程调度如果有人需要，可以先拿去，我过会再执行，没人需要，我继续执行）调用yield的时候锁并没有被释放。</p>
<h3 id="5，参考资料">5，参考资料</h3><ul>
<li><a href="http://blog.csdn.net/hsuxu/article/details/9472371" target="_blank" rel="external">java中的Synchronized 实现</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-jtp05236.html" target="_blank" rel="external">Java 理论与实践: 处理 InterruptedException</a></li>
<li><a href="http://ifeve.com/java-concurrency-constructs/" target="_blank" rel="external">Java并发结构</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="thread">thread</h2><p><img src="/img/2015/thread.png" alt=""></p>
<h3 id="1，锁">1，锁</h3><p>偏向锁(Biased Locking)是Java6引入的一项多线程优化。它通过消除资]]>
    </summary>
    
      <category term="java核心系列" scheme="http://sqtds.github.io/tags/java%E6%A0%B8%E5%BF%83%E7%B3%BB%E5%88%97/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java核心系列（六）-java集合小结]]></title>
    <link href="http://sqtds.github.io/2015/05/14/2015/java-collection/"/>
    <id>http://sqtds.github.io/2015/05/14/2015/java-collection/</id>
    <published>2015-05-14T12:42:41.000Z</published>
    <updated>2015-05-24T07:19:33.000Z</updated>
    <content type="html"><![CDATA[<p>本文主要从整体架构，功能特性，和其他方面介绍集合。</p>
<h2 id="一-整体架构">一.整体架构</h2><p>上图：<br><img src="/img/2014/collections.png" alt="集合架构"><br>我们可以看到集合主要分为set，list和queue这三类，似乎还有一个Stack。它在哪里呢？<br>我们看JDK代码：<code>public class Stack&lt;E&gt; extends Vector&lt;E&gt;</code>，原来它继承了Vector。</p>
<p>看上面这个图，我们是不是有点疑问，为什么Linkedlist实现了List又实现了Queue。这是因为List可以模拟Queue的行为，所以也可以将他看成是Queue对象，只需要去掉List的随机访问需求即可，从而实现更高效的并发。</p>
<p>了解了Collection后，我们发现JDK中还有个Collections，它是什么鬼东西？查看源码，我们发现它是包含了对Collection的基本静态方法，例如排序，创建，复制等。同理，Arrays是对数组的操作，Executors是对Executor的操作。有没有一种感觉写jdk的人喜欢用名称加s来代表一个utils。</p>
<h3 id="SET">SET</h3><p>一个不包括重复元素（包括可变对象）的Collection，是一种无序的集合。Set不包含满 a.equals(b) 的元素对a和b，并且最多有一个null。实现Set的接口有：EnumSet、HashSet、TreeSet等。下图是Set的JDK源码UML图。<br><img src="/img/2014/collection-set.png" alt="set"></p>
<h3 id="List">List</h3><p>一个有序的Collection（也称序列），元素可以重复。确切的讲，列表通常允许满足 e1.equals(e2) 的元素对 e1 和 e2，并且如果列表本身允许 null 元素的话，通常它们允许多个 null 元素。实现List的有：ArrayList、LinkedList、Vector、Stack等。下图是List的JDK源码UML图。<br><img src="/img/2014/collection-list.png" alt="list"></p>
<h3 id="Queue">Queue</h3><p>一种队列则是双端队列，支持在头、尾两端插入和移除元素，主要包括：ArrayDeque、LinkedBlockingDeque、LinkedList。另一种是阻塞式队列，队列满了以后再插入元素则会抛出异常，主要包括ArrayBlockQueue、PriorityBlockingQueue、LinkedBlockingQueue。虽然接口并未定义阻塞方法，但是实现类扩展了此接口。下图是Queue的JDK源码UML图。<br><img src="/img/2014/collection-queue.png" alt="queue"></p>
<h2 id="二，功能特性">二，功能特性</h2><p>以下比较基于ArrayList，linkedList，Vector，Stack,HashSet,TreeSet,HashMap,TreeMap</p>
<h3 id="1，添加元素">1，添加元素</h3><p>在添加元素上，ArrayList，Vector的性能相对较差，原因是ArrayList在容量不够时需要扩充。</p>
<h3 id="2，查找元素">2，查找元素</h3><p>在查找元素上，ArrayList，linkedList，Vector，Stack的性能略差一点点，这是由于他们在查找时需要遍历整个集合。而Set，Map类型的都是通过hash后再在链表上查找，因此速度比较快。</p>
<h3 id="3，删除元素">3，删除元素</h3><p>在删除元素上，除了TreeMap和TreeSet外，其他集合类型的性能基本无差异，TreeSet基于TreeMap实现，TreeMap之所以性能相对较差的原因是它在删除时需要排序。<br>List适用于允许重复元素的单个对象集合场景，Set适用于不允许重复元素的单个对象集合场景，Map适合key-value结构的集合场景。</p>
<h2 id="三，并发结构">三，并发结构</h2><h3 id="1，ConcurrentHashMap">1，ConcurrentHashMap</h3><p>线程安全的haspmap，默认采用16个Segment存储对象。每个Segment一把锁，可允许16个线程同时并发的操作集合对象。</p>
<h3 id="2，CopyOnWriteArrayList">2，CopyOnWriteArrayList</h3><p>CopyOnWriteArrayList是一个线程安全的，并且在读操作时无需加锁的ArrayList。</p>
<h3 id="3，ArrayBlockingQueue">3，ArrayBlockingQueue</h3><p>ArrayBlockingQueue是一个基于数组，先进先出的，线程安全的集合类，其特色为指定时间的阻塞读写，并且容量是可限制的。</p>
<blockquote>
<p>offer(E,long,TimeUnit) 插入元素到数组的尾部，如果数组已满，则等待。poll(E,long,TimeUnit)获取数组中的第一个元素，如果数组中没有元素，则等待。</p>
</blockquote>
<h3 id="4,LinkedBlockingQueue">4,LinkedBlockingQueue</h3><p>LinkedBlockingQueue采用链表的方式存储对象。</p>
<blockquote>
<p>对于读操作take和poll，采用一把锁，对于写操作put和poll，采用另一把锁。因此在高并发读写操作多的情况下，性能好于ArrayBlockingQueue。但在遍历和删除元素时，需要2把锁同时锁住。</p>
</blockquote>
<h3 id="5,IndentityHashMap">5,IndentityHashMap</h3><p>简单说IdentityHashMap与常用的HashMap的区别是：前者比较key时是“引用相等”而后者是“对象相等”，即对于k1和k2，当k1==k2时，IdentityHashMap认为两个key相等，而HashMap只有在k1.equals(k2) == true 时才会认为两个key相等。</p>
<h3 id="6,ConcurrentSkipListMap">6,ConcurrentSkipListMap</h3><p>SkipList是红黑树的一种简化替代方案，是个流行的有序集合算法。在4线程1.6万数据的条件下，ConcurrentHashMap 存取速度是ConcurrentSkipListMap 的4倍左右。<br>但ConcurrentSkipListMap有几个ConcurrentHashMap 不能比拟的优点：</p>
<ol>
<li>ConcurrentSkipListMap 的key是有序的。</li>
<li>ConcurrentSkipListMap 支持更高的并发。ConcurrentSkipListMap 的存取时间是log（N），和线程数几乎无关。也就是说在数据量一定的情况下，并发的线程越多，ConcurrentSkipListMap越能体现出他的优势。 </li>
</ol>
<h2 id="四，其他特性">四，其他特性</h2><h3 id="算法">算法</h3><ol>
<li>Colletions.sort(list) 与 Arrays.sort(T[]) </li>
</ol>
<p>Colletions.sort()实际会将list转为数组，然后调用Arrays.sort()，排完了再转回List。<br>PS. JDK8里，List有自己的sort()方法了，像ArrayList就直接用自己内部的数组来排，而LinkedList, CopyOnWriteArrayList还是要复制出一份数组。<br>而Arrays.sort()，对原始类型(int[],double[],char[],byte[])，JDK6里用的是快速排序，对于对象类型(Object[])，JDK6则使用归并排序。为什么要用不同的算法呢？</p>
<ol>
<li>JDK7的进步</li>
</ol>
<p>到了JDK7，快速排序升级为双基准快排(双基准快排 vs 三路快排)；归并排序升级为归并排序的改进版TimSort，一个JDK的自我进化。</p>
<ol>
<li>JDK8的进步</li>
</ol>
<p>再到了JDK8， 对大集合增加了Arrays.parallelSort()函数，使用fork-Join框架，充分利用多核，对大的集合进行切分然后再归并排序，而在小的连续片段里，依然使用TimSort与DualPivotQuickSort。</p>
<h3 id="五，参考资料">五，参考资料</h3><ol>
<li>《分布式JAVA应用 基础与实践》—-林昊</li>
<li><a href="http://calvin1978.blogcn.com/articles/jdk.html" target="_blank" rel="external">JDK78数则</a></li>
<li><a href="http://www.bysocket.com/?p=162" target="_blank" rel="external">Java 容器 &amp; 泛型（1）：认识容器</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文主要从整体架构，功能特性，和其他方面介绍集合。</p>
<h2 id="一-整体架构">一.整体架构</h2><p>上图：<br><img src="/img/2014/collections.png" alt="集合架构"><br>我们可以看到集合主要分为set，li]]>
    </summary>
    
      <category term="java核心系列" scheme="http://sqtds.github.io/tags/java%E6%A0%B8%E5%BF%83%E7%B3%BB%E5%88%97/"/>
    
      <category term="java" scheme="http://sqtds.github.io/categories/java/"/>
    
  </entry>
  
</feed>